<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2023-02-19T01:07:00.017Z</id>
    <title>osmos::feed</title>
    <updated>2023-02-19T01:07:00.017Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Understanding latency vs. network speed]]></title>
        <id>https://yurichev.org/latency/</id>
        <link href="https://yurichev.org/latency/"/>
        <updated>2023-02-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Understanding latency vs. network speed]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Three-State Stability]]></title>
        <id>https://matklad.github.io/2023/02/16/three-state-stability.html</id>
        <link href="https://matklad.github.io/2023/02/16/three-state-stability.html"/>
        <updated>2023-02-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Usually, when discussing stability of the APIs (in a broad sense; databases and programming languages are also APIs), only two states are mentioned:]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CRT-free in 2023: tips and tricks]]></title>
        <id>https://nullprogram.com/blog/2023/02/15/</id>
        <link href="https://nullprogram.com/blog/2023/02/15/"/>
        <updated>2023-02-15T02:12:00.000Z</updated>
        <summary type="html"><![CDATA[Seven years ago I wrote about “freestanding” Windows executables.
After an additional seven years of practical experience both writing and
distributing such programs, half using a custom-built toolchain,
it’s time to revisit these cabalistic incantations and otherwise scant
details. I’ve tweaked my older article over the years as I’ve learned, but
this is a full replacement and does not assumes you’ve read it. The “why”
has been covered and the focus will be on the “how”. Both the GNU
and MSVC toolchains will be considered.
I no longer call these “freestanding” programs since that term is, at
best, inaccurate. In fact, we will be actively avoiding GCC features
associated with that label. Instead I call these CRT-free programs,
where CRT stands for the C runtime the Windows-oriented term fo…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Learning Perl]]></title>
        <id>https://yurichev.org/perl/</id>
        <link href="https://yurichev.org/perl/"/>
        <updated>2023-02-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learning Perl]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scaling Media Machine Learning at Netflix]]></title>
        <id>https://medium.com/p/f19b400243</id>
        <link href="https://netflixtechblog.com/scaling-media-machine-learning-at-netflix-f19b400243?source=rss----2615bd06b42e---4"/>
        <updated>2023-02-13T17:59:51.000Z</updated>
        <summary type="html"><![CDATA[We tackle some of the unique challenges of scaling multimodal machine learning models that operate on media assets (video, audio, and…]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The bottom emoji breaks rust-analyzer]]></title>
        <id>https://fasterthanli.me/articles/the-bottom-emoji-breaks-rust-analyzer</id>
        <link href="https://fasterthanli.me/articles/the-bottom-emoji-breaks-rust-analyzer"/>
        <updated>2023-02-13T14:20:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Some bugs are merely fun. Others are simply delicious!</p>
<p>Today's pick is the latter.</p>

                        <h2>
                            <a id="reproducing-the-issue-part-1" class="anchor" href="#reproducing-the-issue-part-1">
                                Reproducing the issue, part 1
                            </a>
                        </h2>]]></summary>
        <author>
            <name>fasterthanli.me</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Let's implement buffered, formatted output]]></title>
        <id>https://nullprogram.com/blog/2023/02/13/</id>
        <link href="https://nullprogram.com/blog/2023/02/13/"/>
        <updated>2023-02-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This article was discussed on reddit.
When not using the C standard library, how does one deal with
formatted output? Re-implementing the entirety of printf from scratch
seems like a lot of work, and indeed it would be. Fortunately it’s rarely
necessary. With the right mindset, and considering your program’s actual
formatting needs, it’s not as difficult as it might appear. Since it goes
hand-in-hand with buffering, I’ll cover both topics at once, including
sprintf-like capabilities, which is where we’ll start.
The print-is-append mindset
Buffering amortizes the costs of write (and read) system calls. Many small
writes are queued via the buffer into a few large writes. This isn’t just
an implementation detail. It’s key in the mindset to tackle formatted
output: Printing is appending.
The m…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Let's write a setjmp]]></title>
        <id>https://nullprogram.com/blog/2023/02/12/</id>
        <link href="https://nullprogram.com/blog/2023/02/12/"/>
        <updated>2023-02-12T02:23:11.000Z</updated>
        <summary type="html"><![CDATA[This article was discussed on Hacker News.
Yesterday I wrote that setjmp is handy and that it would be nice
to have without linking the C standard library. It’s conceptually simple,
after all. Today let’s explore some differently-portable implementation
possibilities with distinct trade-offs. At the very least it should
illuminate why setjmp sometimes requires the use of volatile.
First, a quick review: setjmp and longjmp are a form of non-local
goto.

typedef void *jmp_buf[N];
int setjmp(jmp_buf);
void longjmp(jmp_buf, int);


Calling setjmp saves the execution context in a jmp_buf, and longjmp
restores this context, returning the thread to this previous point of
execution. This means setjmp returns twice: (1) after saving the
context, and (2) from longjmp. To distinguish these cases, the…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[<3 Deno]]></title>
        <id>https://matklad.github.io/2023/02/12/a-love-letter-to-deno.html</id>
        <link href="https://matklad.github.io/2023/02/12/a-love-letter-to-deno.html"/>
        <updated>2023-02-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Deno is a relatively new JavaScript runtime.
I find quite interesting and aesthetically appealing, in-line with the recent trend to rein in the worse-is-better law of software evolution.
This post explains why.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[My review of the C standard library in practice]]></title>
        <id>https://nullprogram.com/blog/2023/02/11/</id>
        <link href="https://nullprogram.com/blog/2023/02/11/"/>
        <updated>2023-02-11T03:04:11.000Z</updated>
        <summary type="html"><![CDATA[This article was discussed on Hacker News and critiqued on
Wandering Thoughts.
In general, when working in C I avoid the standard library, libc, as much
as possible. If possible I won’t even link it. For people not used to
working and thinking this way, the typical response is confusion. Isn’t
that like re-inventing the wheel? For me, libc is a wheel barely worth
using — too many deficiencies in both interface and implementation.
Fortunately, it’s easy to build a better, simpler wheel when you know the
terrain ahead of time. In this article I’ll review the functions and
function-like macros of the C standard library and discuss practical
issues I’ve faced with them.
Fortunately the flexibility of C-in-practice makes up for the standard
library. I already have all the tools at hand to do wh…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How a Zig IDE Could Work]]></title>
        <id>https://matklad.github.io/2023/02/10/how-a-zig-ide-could-work.html</id>
        <link href="https://matklad.github.io/2023/02/10/how-a-zig-ide-could-work.html"/>
        <updated>2023-02-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Zig is a very interesting language from an IDE point of view.
Some aspects of it are friendly to IDEs, like a very minimal and simple-to-parse syntax
(Zig can even be correctly lexed line-by-line, very cool!),
the absence of syntactic macros, and ability to do a great deal of semantic analysis on a file-by-file basis, in parallel.
On the other hand, comptime.
I accidentally spent some time yesterday thinking about how to build an IDE for that, this post is a result.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Discovering Creative Insights in Promotional Artwork]]></title>
        <id>https://medium.com/p/295e4d788db5</id>
        <link href="https://netflixtechblog.com/discovering-creative-insights-in-promotional-artwork-295e4d788db5?source=rss----2615bd06b42e---4"/>
        <updated>2023-01-30T16:16:03.000Z</updated>
        <summary type="html"><![CDATA[By Grace Tang, Aneesh Vartakavi, Julija Bagdonaite, Cristina Segalin, and Vi Iyengar]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python][C][C++][For noobs] What is 'continue']]></title>
        <id>https://yurichev.org/py_continue/</id>
        <link href="https://yurichev.org/py_continue/"/>
        <updated>2023-01-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Python][C][C++][For noobs] What is 'continue']]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python] Simplest possible serialization/marshalling]]></title>
        <id>https://yurichev.org/py_serial/</id>
        <link href="https://yurichev.org/py_serial/"/>
        <updated>2023-01-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Python] Simplest possible serialization/marshalling]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Public transport glitch. Dedicated to all fans of John Conway's Game of Life. Seen in Kiev.]]></title>
        <id>https://yurichev.org/glitch/</id>
        <link href="https://yurichev.org/glitch/"/>
        <updated>2023-01-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Public transport glitch. Dedicated to all fans of John Conway's Game of Life. Seen in Kiev.]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scalable Annotation Service — Marken]]></title>
        <id>https://medium.com/p/f5ba9266d428</id>
        <link href="https://netflixtechblog.com/scalable-annotation-service-marken-f5ba9266d428?source=rss----2615bd06b42e---4"/>
        <updated>2023-01-26T03:07:29.000Z</updated>
        <summary type="html"><![CDATA[In Marken (Scalable Annotation Service at Netflix), an annotation is a piece of metadata which can be attached to an object from any domain.]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weak data typing in MySQL]]></title>
        <id>https://yurichev.org/mysql/</id>
        <link href="https://yurichev.org/mysql/"/>
        <updated>2023-01-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Weak data typing in MySQL]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Russian][Crypto] Что такое side-channel attack / timing attack]]></title>
        <id>https://yurichev.org/side/</id>
        <link href="https://yurichev.org/side/"/>
        <updated>2023-01-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Russian][Crypto] Что такое side-channel attack / timing attack]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rust's Ugly Syntax]]></title>
        <id>https://matklad.github.io/2023/01/26/rusts-ugly-syntax.html</id>
        <link href="https://matklad.github.io/2023/01/26/rusts-ugly-syntax.html"/>
        <updated>2023-01-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[People complain about Rust syntax.
I think that most of the time when people think they have an issue with Rust's syntax, they actually object to Rust's semantics.
In this slightly whimsical post, I'll try to disentangle the two.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next Rust Compiler]]></title>
        <id>https://matklad.github.io/2023/01/25/next-rust-compiler.html</id>
        <link href="https://matklad.github.io/2023/01/25/next-rust-compiler.html"/>
        <updated>2023-01-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In Rust in 2023, @nrc floated an idea of a Rust compiler rewrite.
As my hobby is writing Rust compiler frontends (1, 2), I have some (but not very many) thoughts here!
The post consists of two parts, covering organizational and technical aspects.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part IV]]></title>
        <id>https://yurichev.org/Bleich4/</id>
        <link href="https://yurichev.org/Bleich4/"/>
        <updated>2023-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part IV]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part III]]></title>
        <id>https://yurichev.org/Bleich3/</id>
        <link href="https://yurichev.org/Bleich3/"/>
        <updated>2023-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part III]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part II]]></title>
        <id>https://yurichev.org/Bleich2/</id>
        <link href="https://yurichev.org/Bleich2/"/>
        <updated>2023-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part II]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part I]]></title>
        <id>https://yurichev.org/Bleich1/</id>
        <link href="https://yurichev.org/Bleich1/"/>
        <updated>2023-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part I]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto] RSA blinding]]></title>
        <id>https://yurichev.org/RSA_blind/</id>
        <link href="https://yurichev.org/RSA_blind/"/>
        <updated>2023-01-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto] RSA blinding]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
</feed>