<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2025-02-23T01:14:15.196Z</id>
    <title>osmos::feed</title>
    <updated>2025-02-23T01:14:15.196Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Pairwise alignment]]></title>
        <id>https://curiouscoding.nl/posts/pairwise-alignment/</id>
        <link href="https://curiouscoding.nl/posts/pairwise-alignment/"/>
        <updated>2025-02-20T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
1 Introduction

1.1 Overview
2 A history of pairwise alignment

2.1 Problem statement
2.2 Variations on pairwise alignment

Alignment types
Cost Models
Minimizing Cost versus Maximizing Score
2.3 The classic quadratic DP algorithms
2.4 Linear Memory using Divide and Conquer
2.5 Computational volumes
2.6 LCS and Contours
2.7 Diagonal transition
2.8 graph algos
2.9 Four russians
2.10 parallelism & Bitpacking
2.11 Approximate

seed-chain-extend approximate
BlockAligner
2.12 Semi-global highlight
2.13 Tools
3 A*PA

3.1 Summary/overview/contribs
3.2 Methods
3.3 Evaluation
3.4 Discussion
4 A*PA2

4.1 Summary/overview/contribs
4.2 Notation
4.3 Methods
4.4 Evaluation
4.5 Discussion
5 TODO
Attribution
 
This chapter is based on two papers:]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Minimizers and more]]></title>
        <id>https://curiouscoding.nl/posts/minimizers/</id>
        <link href="https://curiouscoding.nl/posts/minimizers/"/>
        <updated>2025-02-17T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
1 Introduction

1.1 Overview
2 Theory of sampling schemes

2.1 Types of sampling schemes
2.2 Computing the density
2.3 The density of random minimizers
2.4 Universal hitting sets
2.5 Asymptotic results
2.6 Variants
3 Lower bounds

3.1 Schleimer et al.’s bound
3.2 Marçais et al.’s bound
3.3 Improving and extending Marçais et al.’s bound
3.4 A near-tight lower bound on the density of forward sampling schemes
3.5 Discussion
4 Sampling schemes

4.1 Variants of lexicographic minimizers

Evaluation
4.2 UHS-inspired schemes
4.3 Syncmer-based schemes
4.4 Open-closed minimizer

Evaluation
4.5 Mod-minimizer

Theoretical density
Evaluation
4.6 Discussion
5 Selection schemes

5.1 Bidirectional anchors
5.2 Sus-anchors

Evaluation
5.3 Discussion
6 Discussion
Attribution
 
This chapter is based on three papers:]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Meet the new xxd for w64devkit: rexxd]]></title>
        <id>https://nullprogram.com/blog/2025/02/17/</id>
        <link href="https://nullprogram.com/blog/2025/02/17/"/>
        <updated>2025-02-17T00:49:49.000Z</updated>
        <summary type="html"><![CDATA[xxd is a versatile hexdump utility with a “reverse” feature, originally
written between 1990–1996. The Vim project soon adopted it, and it’s lived
there ever since. If you have Vim, you also have xxd. Its primary use
cases are (1) the basis for a hex editor due to its -r reverse option
that can unhexdump its previous output, and (2) a data embedding tool
for C and C++ (-i). The former provides Vim’s rudimentary hex editor
functionality. The second case is of special interest to w64devkit:
xxd -i appears in many builds that embed arbitrary data. It’s
important that w64devkit has a compatible implementation, and a freshly
rewritten, improved xxd, rexxd, now replaces the original xxd (as
xxd).
For those unfamiliar with xxd, examples are in order. Its default hexdump
output looks like this:

$…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Minimizer papers]]></title>
        <id>https://curiouscoding.nl/posts/minimizer-papers/</id>
        <link href="https://curiouscoding.nl/posts/minimizer-papers/"/>
        <updated>2025-02-16T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
1 Overview
2 Introduction
- Previous reviews
3 Theory of sampling schemes

3.1 Questions
3.2 Types of schemes
3.3 Parameter regimes
3.4 Different perspectives
3.5 UHS vs minimizer scheme
3.6 (Asymptotic) bounds
3.7 Lower bounds
4 Minimizer schemes

4.1 Orders
4.2 UHS-based and search-based schemes
4.3 Pure schemes
4.4 Other variants

Selection schemes
Canonical minimizers
4.5 Non-overlapping string sets
This post is simply a list of brief comments on many papers related to
minimizers, and forms the basis of /posts/minimizers/.
1 Overview
 
 
 


 
Figure 1: An overview of the papers this post discusses, showing authors and categories of each paper.]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing Impressions at Netflix]]></title>
        <id>https://medium.com/p/e2b67c88c9fb</id>
        <link href="https://netflixtechblog.com/introducing-impressions-at-netflix-e2b67c88c9fb?source=rss----2615bd06b42e---4"/>
        <updated>2025-02-15T01:13:20.000Z</updated>
        <summary type="html"><![CDATA[Part 1: Creating the Source of Truth for Impressions]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AVX-512 gotcha: avoid compressing words to memory with AMD Zen 4 processors]]></title>
        <id>https://lemire.me/blog/?p=21895</id>
        <link href="https://lemire.me/blog/2025/02/14/avx-512-gotcha-avoid-compressing-words-to-memory-with-amd-zen-4-processors/"/>
        <updated>2025-02-14T21:27:29.000Z</updated>
        <summary type="html"><![CDATA[Convention computer instructions operate on a single piece of data at once (e.g., they can negate an integer or add two integers). For better performance, CPU vendors add support for SIMD instructions. SIMD stands for Single Instruction, Multiple Data. It is a type of parallel processing where a single operation is executed simultaneously on multiple … Continue reading AVX-512 gotcha: avoid compressing words to memory with AMD Zen 4 processors]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[WIP] Binary search variants and the effects of batching]]></title>
        <id>https://curiouscoding.nl/posts/binsearch/</id>
        <link href="https://curiouscoding.nl/posts/binsearch/"/>
        <updated>2025-02-11T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
1 Optimizing Binary Search And Interpolation Search

1.1 Problem statement
1.2 Inspiration and background
1.3 Benchmarking setup
2 Binary search

2.1 Branchless search
2.2 Explicit prefetching
2.3 Batching
2.4 A note on power-of-two array sizes
3 Eytzinger

3.1 Naive implementation
3.2 Prefetching
3.3 Branchless Eytzinger
3.4 Batched Eytzinger

3.4.1 Non-prefetched
3.4.2 Prefetched
4 Eytzinger or BinSearch?
5 Memory efficiency – parallel search and comparison to B-trees
6 Interpolation search
7 Conclusion and takeaways
1 Optimizing Binary Search And Interpolation Search
 
 
 

This blogpost is a preliminary of the
post on static
search trees. We will be looking into binary search and how it can be
optimized using different memory layouts (Eytzinger), branchless
techniques and careful use of prefetching. In addition, we will explore
batching and different implementations of it, some of them using vector
instructions. Our language of choice will be Rust.]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Thoughts on Consensus MPHF and tiny pointers]]></title>
        <id>https://curiouscoding.nl/posts/consensus/</id>
        <link href="https://curiouscoding.nl/posts/consensus/"/>
        <updated>2025-02-11T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
1 Consensus

1.1 Consensus-RecSplit
2 IDEA: Consensus-PtrHash
3 Tiny pointers and optimal open addressing hash tables
These are some thoughts on the Consensus-based MPHF presented in
Lehmann et al. (2025), and how this could be applied to PtrHash:
Lehmann, Hans-Peter, Peter Sanders, Stefan Walzer, and Jonatan Ziegler. 2025. “Combined Search and Encoding for Seeds, with an Application to Minimal Perfect Hashing.” arXiv. https://doi.org/10.48550/ARXIV.2502.05613.
Below are also some thoughts on the papers on tiny pointers, used to achieve
hash tables with load factors very close to 1: Bender et al. (2021), Farach-Colton, Krapivin, and Kuszmaul (2025).]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Thread-safe memory copy]]></title>
        <id>https://lemire.me/blog/?p=21864</id>
        <link href="https://lemire.me/blog/2025/02/07/thread-safe-memory-copy/"/>
        <updated>2025-02-07T23:12:34.000Z</updated>
        <summary type="html"><![CDATA[A common operation in software is the copy of a block of memory. In C/C++, we often call the function memcpy for this purpose. But what happens if, while you are copying the data, another thread is modifying either the source or the destination? The result is fundamentally unpredictable and almost surely a programming error. … Continue reading Thread-safe memory copy]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tips for more effective fuzz testing with AFL++]]></title>
        <id>https://nullprogram.com/blog/2025/02/05/</id>
        <link href="https://nullprogram.com/blog/2025/02/05/"/>
        <updated>2025-02-05T18:03:55.000Z</updated>
        <summary type="html"><![CDATA[Fuzz testing is incredibly effective for mechanically discovering software
defects, yet remains underused and neglected. Pick any program that must
gracefully accept complex input, written in any language, which has not
yet been been fuzzed, and fuzz testing usually reveals at least one bug.
At least one program currently installed on your own computer certainly
qualifies. Perhaps even most of them. Everything is broken and
low-hanging fruit is everywhere. After fuzz testing ~1,000 projects over
the past six years, I’ve accumulated tips for picking that fruit.
The checklist format has worked well in the past (1, 2), so
I’ll use it again. This article discusses AFL++ on source-available
C and C++ targets, running on glibc-based Linux distributions, currently
the indisputable best fuzzing pl…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nim version 2.2.2 released]]></title>
        <id>https://nim-lang.org//blog/2025/02/05/nim-222.html</id>
        <link href="https://nim-lang.org//blog/2025/02/05/nim-222.html"/>
        <updated>2025-02-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Nim Team is happy to announce version 2.2.2, the first patch release for our stable release, Nim 2.2.
It comes four months after the 2.2.0 release and it contains 203 commits, bringing bugfixes and improvements.
If you’re still on Nim 1.6, take a look at the version 2.0 release article to see all the features you’re missing.
If you’ve been using Nim 2.0, the version 2.2 release article shows the improvements available in Nim 2.2.
Installing Nim 2.2.2
Check out if the package manager of your OS already ships version 2.2.2 or
install it as described here.
If you have installed a previous version of Nim using choosenim,
getting Nim 2.2.2 is as easy as:
$ choosenim update self
$ choosenim update stable

NOTE: Make sure that the version of choosenim you have installed is 0.8.5 or higher, ot…]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PtrHash: Minimal Perfect Hashing at RAM Throughput]]></title>
        <id>https://curiouscoding.nl/posts/ptrhash-paper/</id>
        <link href="https://curiouscoding.nl/posts/ptrhash-paper/"/>
        <updated>2025-02-02T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
Abstract
1 Introduction
2 Related work
3 PtrHash

3.1 Overview
3.2 Details
3.3 Construction
3.4 Bucket Assignment Functions
3.5 Remapping using CacheLineEF
4 Results

4.1 Construction

4.1.1 Bucket Functions
4.1.2 Tuning Parameters for Construction
4.1.3 Remap
4.2 Comparison to Other Methods
5 Conclusions and Future Work
Acknowledgements
Funding
6 Appendix: Query throughput

6.1 Batching and streaming
6.2 Evaluation
6.3 Multi-threaded Throughput
7 Appendix: Sharding

7.1 Evaluation
8 Appendix: Evaluating Hash Functions
\[
\newcommand{\part}{\mathsf{part}}
\newcommand{\bucket}{\mathsf{bucket}}
\newcommand{\slot}{\mathsf{slot}}
\newcommand{\reduce}{\mathsf{reduce}}
\newcommand{\h}{\mathsf{h}}
\newcommand{\hp}{\mathsf{h}_{\mathsf{p}}}
\newcommand{\C}{\mathsf{C}}
\newcommand{\select}{\mathsf{select}}
\newcommand{\free}{F}
\newcommand{\mphf}{\mathsf{H_{mphf}}}
\]
This is the work-in-progress paper on PtrHash. The original blog post on its
development is here.]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Programmer time and the pitfalls of wasteful work]]></title>
        <id>https://lemire.me/blog/?p=21850</id>
        <link href="https://lemire.me/blog/2025/01/30/programmer-time-and-the-pitfalls-of-false-positives/"/>
        <updated>2025-01-30T03:02:36.000Z</updated>
        <summary type="html"><![CDATA[Programmer time is precious. This realization should shape our approach to software development, focusing our efforts on tasks that genuinely contribute to the improvement of our code and the software ecosystem.   What does matter?   Hunting for bugs. I like to add tests, and then even more tests. The time spent building tests should … Continue reading Programmer time and the pitfalls of wasteful work]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Regular expressions can blow up!]]></title>
        <id>https://lemire.me/blog/?p=21848</id>
        <link href="https://lemire.me/blog/2025/01/25/regular-expressions-can-blow-up/"/>
        <updated>2025-01-25T03:53:36.000Z</updated>
        <summary type="html"><![CDATA[Regular expressions, often abbreviated as regex, are a powerful tool for pattern matching within text. For example, the expression \d*\.?\d+ would match a positive number such as 1.1 or 12. If designed and tested with care, regular expressions may be used in mission-critical software. However, their power comes with a risk: it is possible to … Continue reading Regular expressions can blow up!]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
</feed>