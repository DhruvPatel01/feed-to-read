<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2023-07-23T01:09:03.251Z</id>
    <title>osmos::feed</title>
    <updated>2023-07-23T01:09:03.251Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[[Computing] Why even let users set their own passwords?]]></title>
        <id>https://www.devever.net/~hl/passwords</id>
        <link href="https://www.devever.net/~hl/passwords"/>
        <updated>2023-07-22T13:35:00.000Z</updated>
        <summary type="html"><![CDATA[<div type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p xmlns="http://www.w3.org/1999/xhtml">Today we seem to be living through a war on passwords. This is manifested in
various ways; in its most passive form, it takes the form of people blogging
about how passwords are bad. The more material changes are the general trend
towards no longer treating passwords as a sufficient condition for access in
favour of either mandatory “2FA” or, where 2FA is not used, , in which some extra authentication step is
non-deterministically and randomly demanded.<a href="logindenial">risk-based
authentication</a></p></div></div>]]></summary>
        <author>
            <name>devever.net/~hl</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fast decoding of base32 strings]]></title>
        <id>https://lemire.me/blog/?p=20706</id>
        <link href="https://lemire.me/blog/2023/07/20/fast-decoding-of-base32-strings/"/>
        <updated>2023-07-20T23:26:24.000Z</updated>
        <summary type="html"><![CDATA[We often need to encode binary data into ASCII strings (e.g., email). The standards to do so include base16, base32 and base64. There are some research papers on fast base64 encoding and decoding: Base64 encoding and decoding at almost the speed of a memory copy and Faster Base64 Encoding and Decoding using AVX2 Instructions. For … Continue reading Fast decoding of base32 strings]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Science and Technology links (July 16 2023)]]></title>
        <id>https://lemire.me/blog/?p=20704</id>
        <link href="https://lemire.me/blog/2023/07/16/science-and-technology-links-july-16-2023/"/>
        <updated>2023-07-16T18:00:20.000Z</updated>
        <summary type="html"><![CDATA[Most people think that they are more intelligent than average. Lack of vitamin C may damage the arteries. Make sure you have enough! A difficult problem in software is caching. Caching is the idea that you keep some values in fast memory. But how do you choose which values to keep? A standard technique is … Continue reading Science and Technology links (July 16 2023)]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Three Different Cuts]]></title>
        <id>https://matklad.github.io/2023/07/16/three-different-cuts.html</id>
        <link href="https://matklad.github.io/2023/07/16/three-different-cuts.html"/>
        <updated>2023-07-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this post, we'll look at how Rust, Go, and Zig express the signature of function cut --- the power tool of string manipulation.
Cut takes a string and a pattern, and splits the string around the first occurrence of the pattern:
cut("life", "if") = ("l", "e").]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Recognizing string prefixes with SIMD instructions]]></title>
        <id>https://lemire.me/blog/?p=20688</id>
        <link href="https://lemire.me/blog/2023/07/14/recognizing-string-prefixes-with-simd-instructions/"/>
        <updated>2023-07-14T03:11:02.000Z</updated>
        <summary type="html"><![CDATA[Suppose that I give you a long list of string tokens (e.g., “A”, “A6”, “AAAA”, “AFSDB”, “APL”, “CAA”, “CDS”, “CDNSKEY”, “CERT”, “CH”, “CNAME”, “CS”, “CSYNC”, “DHC”, etc.). I give you a pointer inside a much larger string and I ask you whether you are pointing at one of these tokens, and if so, which one. … Continue reading Recognizing string prefixes with SIMD instructions]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tech debt metaphor maximalism]]></title>
        <id>https://apenwarr.ca/log/20230605</id>
        <link href="https://apenwarr.ca/log/20230605"/>
        <updated>2023-07-11T03:12:47.000Z</updated>
        <summary type="html"><![CDATA[I really like the "tech debt" metaphor. A lot of people don't,
but I think that's because they either don't extend the metaphor far enough,
or because they don't properly understand financial debt.
So let's talk about debt!
Consumer debt vs capital investment
Back in school my professor, Canadian economics superhero Larry
Smith, explained debt this way (paraphrased): debt is
stupid if it's for instant gratification that you pay for later, with
interest. But debt is great if it means you can make more money than the
interest payments.
A family that takes on high-interest credit card debt
for a visit to Disneyland is wasting money. If you think you can pay it off
in a year, you'll pay 20%-ish interest for that year for no reason. You can
instead save up for a year and get the same gratificat…]]></summary>
        <author>
            <name>apenwarr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Systems design 2: What we hope we know]]></title>
        <id>https://apenwarr.ca/log/20230415</id>
        <link href="https://apenwarr.ca/log/20230415"/>
        <updated>2023-07-11T03:12:47.000Z</updated>
        <summary type="html"><![CDATA[Someone asked if I could write about the rise of AI and Large Language Models (LLMs) and what I think that means for the future of people, technology, society, and so on. Although that's a fun topic, it left me with two problems: I know approximately nothing about AI, and predicting the future is hard even for people who know what they're talking about.
Let's try something else instead. I'll tell you a bunch of things I do know that are somehow related to the topic, and then you can predict the future yourself.
Magic
I think magic gets a bad reputation for no good reason.
First of all, you might be thinking: magic doesn't actually exist. I assure you that it does. We just need to agree on a definition. For our purposes, let's define magic as: something you know is there, but you can't expl…]]></summary>
        <author>
            <name>apenwarr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Stealth, not secrecy]]></title>
        <id>https://lemire.me/blog/?p=20671</id>
        <link href="https://lemire.me/blog/2023/07/08/stealth-not-secrecy/"/>
        <updated>2023-07-08T16:43:46.000Z</updated>
        <summary type="html"><![CDATA[The strategy for winning is simple: do good work and tell the world about it. In that order! This implies some level of stealth as you are doing the good work. If you plan to lose weight, don’t announce it… lose the weight and then do the reveal. Early feedback frames the problem and might … Continue reading Stealth, not secrecy]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Packing a string of digits into an integer quickly]]></title>
        <id>https://lemire.me/blog/?p=20663</id>
        <link href="https://lemire.me/blog/2023/07/07/packing-a-string-of-digits-into-an-integer-quickly/"/>
        <updated>2023-07-07T17:19:34.000Z</updated>
        <summary type="html"><![CDATA[Suppose that I give you a short string of digits, containing possibly spaces or other characters (e.g., "20141103 012910"). We would like to pack the digits into an integer (e.g., 0x20141103012910) so that the lexicographical order over the string matches the ordering of the integers. We can use the fact that in ASCII, the digits … Continue reading Packing a string of digits into an integer quickly]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jersey City]]></title>
        <id>https://thenumb.at/Jersey-City/</id>
        <link href="https://thenumb.at/Jersey-City/"/>
        <updated>2023-07-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Jersey City, NJ, 2023]]></summary>
        <author>
            <name>Max Slater</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Having fun with string literal suffixes in C++]]></title>
        <id>https://lemire.me/blog/?p=20659</id>
        <link href="https://lemire.me/blog/2023/07/05/having-fun-with-string-literal-suffixes-in-c/"/>
        <updated>2023-07-05T21:38:25.000Z</updated>
        <summary type="html"><![CDATA[The C++11 standard introduced user-defined string suffixes. It also added regular  expressions to the C++ language as a standard feature. I wanted to have fun and see whether we could combine these features. Regular expressions are useful to check whether a given string matches a pattern. For example, the expression \d+ checks that the string … Continue reading Having fun with string literal suffixes in C++]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Parsing time stamps faster with SIMD instructions]]></title>
        <id>https://lemire.me/blog/?p=20651</id>
        <link href="https://lemire.me/blog/2023/07/01/parsing-time-stamps-faster-with-simd-instructions/"/>
        <updated>2023-07-01T21:38:06.000Z</updated>
        <summary type="html"><![CDATA[In software, it is common to represent time as a time-stamp string. It is usually specified by a time format string. Some standards use the format %Y%m%d%H%M%S meaning that we print the year, the month, the day, the hours, the minutes and the seconds. The current time as I write this blog post would be … Continue reading Parsing time stamps faster with SIMD instructions]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Computing] The problem with federated web apps]]></title>
        <id>https://www.devever.net/~hl/webappcoupling</id>
        <link href="https://www.devever.net/~hl/webappcoupling"/>
        <updated>2023-07-01T12:05:00.000Z</updated>
        <summary type="html"><![CDATA[<div type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p xmlns="http://www.w3.org/1999/xhtml">Trying to make web applications federated is a popular effort. Examples include
things like the “fediverse”, as well as various other efforts, like attempts to
make distributed software forges, and so on. However, all of these efforts
suffer from a problem which is fundamental in building federated applications
built on top of the web platform.</p></div></div>]]></summary>
        <author>
            <name>devever.net/~hl</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dynamic bit shuffle using AVX-512]]></title>
        <id>https://lemire.me/blog/?p=20642</id>
        <link href="https://lemire.me/blog/2023/06/29/dynamic-bit-shuffle-using-avx-512/"/>
        <updated>2023-06-29T15:59:01.000Z</updated>
        <summary type="html"><![CDATA[Suppose that you want to reorder, arbitrarily, the bits in a 64-bit word. This question was raised on Twitter by @experquisite. Formally, you might want to provide, for each of the 64 bit position, an original bit position you want to copy. Hence, the following code would reverse the bit order in your 64-bit word: … Continue reading Dynamic bit shuffle using AVX-512]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Version 1.6.14 released]]></title>
        <id>https://nim-lang.org//blog/2023/06/27/version-1614-released.html</id>
        <link href="https://nim-lang.org//blog/2023/06/27/version-1614-released.html"/>
        <updated>2023-06-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Nim team is happy to announce version 1.6.14, our seventh (and largest) patch release for
Nim 1.6.
Version 1.6.14 is a result of three months of hard work, and it contains
179 commits,
bringing lots of general improvements over 1.6.12.
This release contains more than the usual amount of commits for a patch release
because we want to give you the best Nim v1 experience, in case you won’t be able to
immediately switch to Nim v2, which will be our next release.
We would recommend to all of our users to upgrade and use version 1.6.14.
Installing Nim 1.6
New users
Check out if the package manager of your OS already ships version 1.6.14 or
install it as described here.
Existing users
If you have installed a previous version of Nim using choosenim,
getting Nim 1.6.14 is as easy as:
$ chooseni…]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Solving "Two Sum" in C with a tiny hash table]]></title>
        <id>https://nullprogram.com/blog/2023/06/26/</id>
        <link href="https://nullprogram.com/blog/2023/06/26/"/>
        <updated>2023-06-26T19:38:18.000Z</updated>
        <summary type="html"><![CDATA[I came across a question: How does one efficiently solve Two Sum in C?
There’s a naive quadratic time solution, but also an amortized linear time
solution using a hash table. Without a built-in or standard library hash
table, the latter sounds onerous. However, a mask-step-index table,
a hash table construction suitable for many problems, requires only a few
lines of code. This approach is useful even when a standard hash table is
available, because by exploiting the known problem constraints, it
beats typical generic hash table performance by 1–2 orders of magnitude
(demo).
The Two Sum exercise, restated:
Given an integer array and target, return the distinct indices of two
elements that sum to the target.
In particular, the solution doesn’t find elements, but their indices. The
exercise …]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Science and Technology links (June 25 2023)]]></title>
        <id>https://lemire.me/blog/?p=20640</id>
        <link href="https://lemire.me/blog/2023/06/25/science-and-technology-links-june-25-2023/"/>
        <updated>2023-06-25T17:32:56.000Z</updated>
        <summary type="html"><![CDATA[Women in highly religious relationships report the highest levels of relationship quality. US politics is largely divided into two parties (Republicans and Democrats). People who are affiliated with the Republicans have many more kids. The Antartic ice shelves gained 661 gigaton of ice over the past decade. A low protein diet increases mortality among older … Continue reading Science and Technology links (June 25 2023)]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Hμblog] I don't trust Signal]]></title>
        <id>https://www.devever.net/~hl/u/202306#25a</id>
        <link href="https://www.devever.net/~hl/u/202306#25a"/>
        <updated>2023-06-25T10:34:12.000Z</updated>
        <summary type="html"><![CDATA[<div type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><ul><li><a href="https://blog.dijit.sh/i-don-t-trust-signal">I don't trust Signal</a></li></ul><p xmlns="http://www.w3.org/1999/xhtml">Re: my article , this is another good article focused on Signal specifically and why it should not be considered trustworthy or secure.<a href="https://www.devever.net/~hl/webcrypto">Web-based cryptography is always snake oil</a></p></div></div>]]></summary>
        <author>
            <name>devever.net/~hl</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Computing] Web-based cryptography is always snake oil]]></title>
        <id>https://www.devever.net/~hl/webcrypto</id>
        <link href="https://www.devever.net/~hl/webcrypto"/>
        <updated>2023-06-25T08:38:00.000Z</updated>
        <summary type="html"><![CDATA[<div type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p xmlns="http://www.w3.org/1999/xhtml">Nowadays, there is an epidemic of web applications purporting to offer
“end-to-end” encryption. Examples might range from a file upload service,
which allows you to upload and share files of arbitrary size and promises
“end-to-end encryption”; or a web-based password safe service which claims that
it can't see your passwords because they're encrypted; or a web-based
cryptocurrency wallet.</p></div></div>]]></summary>
        <author>
            <name>devever.net/~hl</name>
        </author>
    </entry>
</feed>