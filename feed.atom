<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2024-09-29T01:13:31.746Z</id>
    <title>osmos::feed</title>
    <updated>2024-09-29T01:13:31.746Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[It is never too late to write your own C/C++ command-line utilities]]></title>
        <id>https://lemire.me/blog/?p=21694</id>
        <link href="https://lemire.me/blog/2024/09/28/it-is-never-too-later-to-write-your-own-c-c-command-line-utilities/"/>
        <updated>2024-09-28T04:06:18.000Z</updated>
        <summary type="html"><![CDATA[Recently, I received an email from an engineer at a prominent company who shared how he managed to save his employer tens of thousands of dollars annually by developing a custom command-line utility in C++. Without delving into specifics (which remain confidential), the company’s servers were tasked with querying a JSON file for a specific … Continue reading It is never too late to write your own C/C++ command-line utilities]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Watermelon Operator]]></title>
        <id>https://matklad.github.io/2024/09/24/watermelon-operator.html</id>
        <link href="https://matklad.github.io/2024/09/24/watermelon-operator.html"/>
        <updated>2024-09-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In these two most excellent articles,
https://without.boats/blog/let-futures-be-futures
and
https://without.boats/blog/futures-unordered, 
withoutboats introduces the concepts of multi-task and intra-task concurrency.
I want to revisit this distinction --- while I agree that there are different classes
of patterns of concurrency here, I am not quite satisfied with this specific partitioning of the
design space. I will use Rust-like syntax for most of the examples, but I am more interested in the
language-agnostic patterns, rather than in Rust's specific implementation of async.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[What is io_uring?]]></title>
        <id>https://matklad.github.io/2024/09/23/what-is-io-uring.html</id>
        <link href="https://matklad.github.io/2024/09/23/what-is-io-uring.html"/>
        <updated>2024-09-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An attempt at concise explanation of what io_uring is.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing Netflix’s Key-Value Data Abstraction Layer]]></title>
        <id>https://medium.com/p/1ea8a0a11b30</id>
        <link href="https://netflixtechblog.com/introducing-netflixs-key-value-data-abstraction-layer-1ea8a0a11b30?source=rss----2615bd06b42e---4"/>
        <updated>2024-09-18T22:49:04.000Z</updated>
        <summary type="html"><![CDATA[Vidhya Arvind, Rajasekhar Ummadisetty, Joey Lynch, Vinay Chella]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The PhD Paradox: A Journey into Academia’s Upside-Down World]]></title>
        <id>https://lemire.me/blog/?p=21688</id>
        <link href="https://lemire.me/blog/2024/09/11/the-phd-paradox-a-journey-into-academias-upside-down-world/"/>
        <updated>2024-09-11T20:33:28.000Z</updated>
        <summary type="html"><![CDATA[Imagine a world where becoming a doctor isn’t about years of rigorous study, but about showcasing your life’s work. That’s how doctorates used to roll. You’d write a book, make a groundbreaking discovery, and voila, a doctorate was yours. Fast forward to today, and we’ve flipped the script. Now, a PhD is less about what … Continue reading The PhD Paradox: A Journey into Academia’s Upside-Down World]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pushy to the Limit: Evolving Netflix’s WebSocket proxy for the future]]></title>
        <id>https://medium.com/p/b468bc0ff658</id>
        <link href="https://netflixtechblog.com/pushy-to-the-limit-evolving-netflixs-websocket-proxy-for-the-future-b468bc0ff658?source=rss----2615bd06b42e---4"/>
        <updated>2024-09-10T19:15:34.000Z</updated>
        <summary type="html"><![CDATA[Pushy is Netflix’s WebSocket server that maintains persistent WebSocket connections with devices running the Netflix application. This…]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Noisy Neighbor Detection with eBPF]]></title>
        <id>https://medium.com/p/64b1f4b3bbdd</id>
        <link href="https://netflixtechblog.com/noisy-neighbor-detection-with-ebpf-64b1f4b3bbdd?source=rss----2615bd06b42e---4"/>
        <updated>2024-09-10T18:00:21.000Z</updated>
        <summary type="html"><![CDATA[By Jose Fernandez, Sebastien Dabdoub, Jason Koch, Artem Tkachuk]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Replace strings by views when you can]]></title>
        <id>https://lemire.me/blog/?p=21677</id>
        <link href="https://lemire.me/blog/2024/09/09/replace-stdstring-by-stdstring_view-when-you-can/"/>
        <updated>2024-09-09T20:26:36.000Z</updated>
        <summary type="html"><![CDATA[C++ programmers tend to represent strings using the std::string class. Though the implementation might vary, each instance of an std::string might use 32 bytes. Though it is not a large amount of memory, it can add up. In the Node.js runtime, as part of the build tools, there is a function which precomputes the string … Continue reading Replace strings by views when you can]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Try to Fix It One Level Deeper]]></title>
        <id>https://matklad.github.io/2024/09/06/fix-one-level-deeper.html</id>
        <link href="https://matklad.github.io/2024/09/06/fix-one-level-deeper.html"/>
        <updated>2024-09-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I had a productive day today! I did many different and unrelated things, but they all had the same
unifying theme:]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Giving C++ std::regex a C makeover]]></title>
        <id>https://nullprogram.com/blog/2024/09/04/</id>
        <link href="https://nullprogram.com/blog/2024/09/04/"/>
        <updated>2024-09-04T17:15:07.000Z</updated>
        <summary type="html"><![CDATA[Suppose you’re working in C using one of the major toolchains — that is,
it’s mainly a C++ implementation — and you need regular expressions. You
could integrate a library, but there’s a regex implementation in the C++
standard library included with your compiler, just within reach. As a
resourceful engineer, using an asset already in hand seems prudent. But
it’s a C++ interface, and you’re using C instead of C++ for a reason,
perhaps to avoid dealing with C++. Have no worries. This article is
about wrapping std::regex in a tidy C interface which not only
hides all the C++ machinery, but utterly tames it. It’s not so much
practical as a potpourri of interesting techniques.
If you’d like to skip ahead, here’s the full source up front. Tested with
w64devkit, MSVC cl, and clang-cl: scratch/re…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Fundamental Law Of Software Dependencies]]></title>
        <id>https://matklad.github.io/2024/09/03/the-fundamental-law-of-dependencies.html</id>
        <link href="https://matklad.github.io/2024/09/03/the-fundamental-law-of-dependencies.html"/>
        <updated>2024-09-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Canonical source code for software should include checksums of the content of all its
dependencies.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Compressing floating-point numbers quickly by converting them to brain floats]]></title>
        <id>https://lemire.me/blog/?p=21588</id>
        <link href="https://lemire.me/blog/2024/09/02/compressing-floating-point-numbers-quickly-by-converting-them-to-brain-floats/"/>
        <updated>2024-09-02T22:52:28.000Z</updated>
        <summary type="html"><![CDATA[We sometimes have to work a large quantity of floating-point numbers. This volume can be detrimental to performance. Thus we often want to compress these numbers. Large-language models routinely do so. A sensible approach is to convert them to brain floating point numbers. These are 16-bit numbers that are often capable of representing accurately a … Continue reading Compressing floating-point numbers quickly by converting them to brain floats]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
</feed>