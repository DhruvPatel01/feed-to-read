<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2024-10-06T01:13:05.738Z</id>
    <title>osmos::feed</title>
    <updated>2024-10-06T01:13:05.738Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[On Ousterhout's Dichotomy]]></title>
        <id>https://matklad.github.io/2024/10/06/ousterhouts-dichotomy.html</id>
        <link href="https://matklad.github.io/2024/10/06/ousterhouts-dichotomy.html"/>
        <updated>2024-10-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Why are there so many programming languages? One of the driving reasons for this is that some
languages tend to produce fast code, but are a bit of a pain to use (C++), while others are a breeze
to write, but run somewhat slow (Python). Depending on the ratio of CPUs to programmers, one or the
other might be relatively more important.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Slim Reader/Writer Locks are neato]]></title>
        <id>https://nullprogram.com/blog/2024/10/03/</id>
        <link href="https://nullprogram.com/blog/2024/10/03/"/>
        <updated>2024-10-03T22:40:13.000Z</updated>
        <summary type="html"><![CDATA[I’m 18 years late, but Slim Reader/Writer Locks have a fantastic
interface: pointer-sized (“slim”), zero-initialized, and non-allocating.
Lacking cleanup, they compose naturally with arena allocation.
Sounds like a futex? That’s because they’re built on futexes introduced at
the same time. They’re also complemented by condition variables
with the same desirable properties. My only quibble is that slim locks
could easily have been 32-bit objects, but it hardly matters. This
article, while treating Win32 as a foreign interface, discusses a
paper-thin C++ wrapper interface around lock and condition variables, in
my own style.
If you’d like to see/try a complete, working demonstration before diving
into the details: demo.cpp. We’re going to build this from the
ground up, so let’s establish a f…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nim versions 2.2.0 and 2.0.10 released]]></title>
        <id>https://nim-lang.org//blog/2024/10/02/nim-220-2010.html</id>
        <link href="https://nim-lang.org//blog/2024/10/02/nim-220-2010.html"/>
        <updated>2024-10-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Nim Team is happy to announce two releases:
version 2.2.0, our new stable release
version 2.0.10, a patch release for Nim 2.0
Nim v2.2.0 is a continuation of our efforts to improve Nim 2: it contains almost 1000 new commits, bringing improvements to the ORC memory management and to the language and the compiler overall.
Nim v2.0.10 is a patch release aimed at our enterprise users who cannot immediately switch to Nim 2.2, containing 80 commits with bugfixes.
Nim 2.2.0
Release highlights
Many long-standing compiler bugs with generics, typedesc and static types have been fixed in this release, effectively making these features stable.
In particular, arbitrary expressions for types and values in generic types are now largely functional when they only worked in specific cases before.
The re…]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[It is never too late to write your own C/C++ command-line utilities]]></title>
        <id>https://lemire.me/blog/?p=21694</id>
        <link href="https://lemire.me/blog/2024/09/28/it-is-never-too-later-to-write-your-own-c-c-command-line-utilities/"/>
        <updated>2024-09-28T04:06:18.000Z</updated>
        <summary type="html"><![CDATA[Recently, I received an email from an engineer at a prominent company who shared how he managed to save his employer tens of thousands of dollars annually by developing a custom command-line utility in C++. Without delving into specifics (which remain confidential), the company’s servers were tasked with querying a JSON file for a specific … Continue reading It is never too late to write your own C/C++ command-line utilities]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Watermelon Operator]]></title>
        <id>https://matklad.github.io/2024/09/24/watermelon-operator.html</id>
        <link href="https://matklad.github.io/2024/09/24/watermelon-operator.html"/>
        <updated>2024-09-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In these two most excellent articles,
https://without.boats/blog/let-futures-be-futures
and
https://without.boats/blog/futures-unordered, 
withoutboats introduces the concepts of multi-task and intra-task concurrency.
I want to revisit this distinction --- while I agree that there are different classes
of patterns of concurrency here, I am not quite satisfied with this specific partitioning of the
design space. I will use Rust-like syntax for most of the examples, but I am more interested in the
language-agnostic patterns, rather than in Rust's specific implementation of async.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[What is io_uring?]]></title>
        <id>https://matklad.github.io/2024/09/23/what-is-io-uring.html</id>
        <link href="https://matklad.github.io/2024/09/23/what-is-io-uring.html"/>
        <updated>2024-09-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An attempt at concise explanation of what io_uring is.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing Netflix’s Key-Value Data Abstraction Layer]]></title>
        <id>https://medium.com/p/1ea8a0a11b30</id>
        <link href="https://netflixtechblog.com/introducing-netflixs-key-value-data-abstraction-layer-1ea8a0a11b30?source=rss----2615bd06b42e---4"/>
        <updated>2024-09-18T22:49:04.000Z</updated>
        <summary type="html"><![CDATA[Vidhya Arvind, Rajasekhar Ummadisetty, Joey Lynch, Vinay Chella]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The PhD Paradox: A Journey into Academia’s Upside-Down World]]></title>
        <id>https://lemire.me/blog/?p=21688</id>
        <link href="https://lemire.me/blog/2024/09/11/the-phd-paradox-a-journey-into-academias-upside-down-world/"/>
        <updated>2024-09-11T20:33:28.000Z</updated>
        <summary type="html"><![CDATA[Imagine a world where becoming a doctor isn’t about years of rigorous study, but about showcasing your life’s work. That’s how doctorates used to roll. You’d write a book, make a groundbreaking discovery, and voila, a doctorate was yours. Fast forward to today, and we’ve flipped the script. Now, a PhD is less about what … Continue reading The PhD Paradox: A Journey into Academia’s Upside-Down World]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pushy to the Limit: Evolving Netflix’s WebSocket proxy for the future]]></title>
        <id>https://medium.com/p/b468bc0ff658</id>
        <link href="https://netflixtechblog.com/pushy-to-the-limit-evolving-netflixs-websocket-proxy-for-the-future-b468bc0ff658?source=rss----2615bd06b42e---4"/>
        <updated>2024-09-10T19:15:34.000Z</updated>
        <summary type="html"><![CDATA[Pushy is Netflix’s WebSocket server that maintains persistent WebSocket connections with devices running the Netflix application. This…]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Noisy Neighbor Detection with eBPF]]></title>
        <id>https://medium.com/p/64b1f4b3bbdd</id>
        <link href="https://netflixtechblog.com/noisy-neighbor-detection-with-ebpf-64b1f4b3bbdd?source=rss----2615bd06b42e---4"/>
        <updated>2024-09-10T18:00:21.000Z</updated>
        <summary type="html"><![CDATA[By Jose Fernandez, Sebastien Dabdoub, Jason Koch, Artem Tkachuk]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Replace strings by views when you can]]></title>
        <id>https://lemire.me/blog/?p=21677</id>
        <link href="https://lemire.me/blog/2024/09/09/replace-stdstring-by-stdstring_view-when-you-can/"/>
        <updated>2024-09-09T20:26:36.000Z</updated>
        <summary type="html"><![CDATA[C++ programmers tend to represent strings using the std::string class. Though the implementation might vary, each instance of an std::string might use 32 bytes. Though it is not a large amount of memory, it can add up. In the Node.js runtime, as part of the build tools, there is a function which precomputes the string … Continue reading Replace strings by views when you can]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
</feed>