<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2024-12-29T01:15:04.186Z</id>
    <title>osmos::feed</title>
    <updated>2024-12-29T01:15:04.186Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Nim version 2.0.14 released]]></title>
        <id>https://nim-lang.org//blog/2024/12/24/nim-2014-released.html</id>
        <link href="https://nim-lang.org//blog/2024/12/24/nim-2014-released.html"/>
        <updated>2024-12-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Nim team is happy to announce Nim version 2.0.14, our seventh patch release for Nim 2.0,
for our users who haven’t switched yet to Nim 2.2.
Version 2.0.14 contains 40 commits, and it brings several improvements to Nim 2.0.12, released two months ago.
Installing Nim 2.0.14
If you have installed a previous version of Nim using choosenim,
getting Nim 2.0.14 is as easy as:
$ choosenim update self
$ choosenim 2.0.14

Make sure that the version of choosenim you have installed is 0.8.5 or higher, otherwise visit choosenim’s repo and see there how to re-install it first, before updating Nim.
Alternatively, you can download Nim 2.0.14 from
our nightlies builds.
Nim Community Survey 2024
We would like to remind you about Nim Community Survey.
If you haven’t participated yet, now’s the time.
It shouldn’t take more than 5 minutes, and it helps us to make Nim better.
Bugfixes
These reported issues were fixed:
Fixed “ensureMove usage leading to memory leak for JsonNode !”
(#24504)
Fixed “UB calling allocCStringArray([""]) with --mm:refc”
(#22153)
Fixed “Regression when using generic type with Table/OrderedTable”
(#23233)
Fixed “Wrong C code generated for newSeqWith when initializing two variables”
(#18104)
Fixed “Wrong behaviour when wrapping a constant  object variant into a sequence at runtime”
(#23295)
Fixed “Invalid C code generated for lent array in tuple”
(#24034)
Fixed “Seg fault when adding deque element”
(#24319)
Fixed “C compiler error when default initializing an object field function when the default function is overloaded”
(#23545)
Fixed “build failed for lib/pure/selectors via mingw”
(#24371)
Fixed “Calling proc with nested ref/deref constructed object results in invalid generated code”
(#18081)
Fixed “let symbol created by template is reused in nimvm branch “
(#24472)
Fixed “building nimble 0.16.4 fails when running build_all.sh”
(#24536)
The complete list of changes is available
here.]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Minimal Version Selection Revisited]]></title>
        <id>https://matklad.github.io/2024/12/24/minimal-version-selection-revisited.html</id>
        <link href="https://matklad.github.io/2024/12/24/minimal-version-selection-revisited.html"/>
        <updated>2024-12-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this post, I want to highlight one aspect of Go-style minimal version selection that I have
missed completely at first. Maybe you missed it too?]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rules to avoid common extended inline assembly mistakes]]></title>
        <id>https://nullprogram.com/blog/2024/12/20/</id>
        <link href="https://nullprogram.com/blog/2024/12/20/"/>
        <updated>2024-12-20T19:46:48.000Z</updated>
        <summary type="html"><![CDATA[GCC and Clang inline assembly is an interface between high and low level
programming languages. It is subtle and treacherous. Many are ensnared in
its traps, usually unknowingly. As such, the asm keyword is essentially
the unsafe keyword of C and C++. Nearly every inline assembly tutorial,
including the awful ibilio page at the top of search engines for
decades, propagate fundamental, serious mistakes, and most examples are
incorrect. The dangerous part is that the examples usually produce the
expected results! The situation is dire. This article isn’t a tutorial,
but basic rules to avoid the most common mistakes, or to spot them in code
review.
The focus is entirely extended assembly, and not basic assembly,
which has different rules. The former is any inline assembly statement
with const…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing Configurable Metaflow]]></title>
        <id>https://medium.com/p/d2fb8e9ba1c6</id>
        <link href="https://netflixtechblog.com/introducing-configurable-metaflow-d2fb8e9ba1c6?source=rss----2615bd06b42e---4"/>
        <updated>2024-12-20T07:11:37.000Z</updated>
        <summary type="html"><![CDATA[David J. Berg*, David Casler^, Romain Cledat*, Qian Huang*, Rui Lin*, Nissan Pow*, Nurcan Sonmez*, Shashank Srikanth*, Chaoying Wang*…]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Turing Machines]]></title>
        <id>https://samwho.dev/turing-machines/</id>
        <link href="https://samwho.dev/turing-machines/"/>
        <updated>2024-12-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[body {
    text-wrap: pretty;
  }

  @media (prefers-reduced-motion: reduce) {
    * {
      transition: none;
      animation: none;
    }
  }

  turing-machine {
    width: 100%;
    display: block;
    position: relative;
    padding-bottom: 1em;
  }

  turing-machine .program-container {
    position: relative;
    display: flex;
    justify-content: center;
  }

  turing-machine table {
    border: none;
    font-family: Fira Code;
    border-collapse: collapse;
    border-spacing: 0;
    margin: 1px;
    margin-top: 0.5em;
    width: auto;
  }

  turing-machine thead td {
    text-align: center;
  }

  turing-machine td {
    text-align: left;
    padding-left: 3vw;
    padding-right: 3vw;
    padding-top: 0.2em;
    padding-bottom: 0.2em;
    border: 1px dashed #bbbbbb;
  }

  turin…]]></summary>
        <author>
            <name>samwho.dev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Part 1: A Survey of Analytics Engineering Work at Netflix]]></title>
        <id>https://medium.com/p/d761cfd551ee</id>
        <link href="https://netflixtechblog.com/part-1-a-survey-of-analytics-engineering-work-at-netflix-d761cfd551ee?source=rss----2615bd06b42e---4"/>
        <updated>2024-12-17T23:26:37.000Z</updated>
        <summary type="html"><![CDATA[This article is the first in a multi-part series sharing a breadth of Analytics Engineering work at Netflix, recently presented as part of…]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cloud Efficiency at Netflix]]></title>
        <id>https://medium.com/p/f2a142955f83</id>
        <link href="https://netflixtechblog.com/cloud-efficiency-at-netflix-f2a142955f83?source=rss----2615bd06b42e---4"/>
        <updated>2024-12-17T22:17:29.000Z</updated>
        <summary type="html"><![CDATA[By J Han, Pallavi Phadnis]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Title Launch Observability at Netflix Scale]]></title>
        <id>https://medium.com/p/c88c586629eb</id>
        <link href="https://netflixtechblog.com/title-launch-observability-at-netflix-scale-c88c586629eb?source=rss----2615bd06b42e---4"/>
        <updated>2024-12-17T21:54:37.000Z</updated>
        <summary type="html"><![CDATA[Part 1: Understanding The Challenges]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Majjit LSP]]></title>
        <id>https://matklad.github.io/2024/12/13/majjit-lsp.html</id>
        <link href="https://matklad.github.io/2024/12/13/majjit-lsp.html"/>
        <updated>2024-12-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An out-there suggestion for the nascent jj ecosystem!]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Launching the 2024 Nim Community Survey]]></title>
        <id>https://nim-lang.org//blog/2024/12/09/community-survey-2024.html</id>
        <link href="https://nim-lang.org//blog/2024/12/09/community-survey-2024.html"/>
        <updated>2024-12-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We are proud to announce the launch of the official
2024 Nim Community Survey!
No matter whether you use Nim today, have used Nim previously, or never used Nim before;
we want to know your opinions.
Your feedback will help the Nim project understand its strengths and
weaknesses, and to determine development priorities for the future.
It shouldn’t take you much longer than 5 minutes to complete this survey.
Submissions will be accepted until the start of 2025, depending on the
response rates.
If you have any questions or feedback, please don’t hesitate
to get in touch with us via email at survey@nim-lang.org or on the
Nim Forum.
This is now the eight year in which this survey has been running.
An analysis of the results for the past years can be found at the following links:
2016
2017
2018
2019
2020
2021
2023
We would appreciate your help in spreading the word about this survey.
Share the Google Forms link on your social network feeds, with your colleagues
and in other communities.
Once the submission period ends, the results will be shown here and publicized
via the Nim Forum.
Thanks for your time!]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
</feed>