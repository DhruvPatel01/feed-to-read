<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2023-05-07T01:02:46.289Z</id>
    <title>osmos::feed</title>
    <updated>2023-05-07T01:02:46.289Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Migrating Critical Traffic At Scale with No Downtime — Part 1]]></title>
        <id>https://medium.com/p/ba1c7a1c7835</id>
        <link href="https://netflixtechblog.com/migrating-critical-traffic-at-scale-with-no-downtime-part-1-ba1c7a1c7835?source=rss----2615bd06b42e---4"/>
        <updated>2023-05-04T21:32:37.000Z</updated>
        <summary type="html"><![CDATA[Shyam Gala, Javier Fernandez-Ivern, Anup Rokkam Pratap, Devang Shah]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Interesting Links for April 2023]]></title>
        <id>https://notes.abhinavsarkar.net/2023/links-23-04</id>
        <link href="https://notes.abhinavsarkar.net/2023/links-23-04"/>
        <updated>2023-05-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Here are some interesting things I read on the internet in April 2023:</p>

<h2 id="haskell">Haskell</h2>

<ul>
  <li><a href="https://ciobaca.substack.com/p/pedagogical-downsides-of-haskell">Pedagogical Downsides of Haskell</a> <br />
Why teaching Haskell is hard.</li>
</ul>

<h2 id="nix">Nix</h2>

<ul>
  <li>
    <p><a href="https://tweag.io/blog/2022-12-15-bazel-nix-migration-experience/">Bazel and Nix: A Migration Experience</a> <br />
Integrating Nix with Bazel for dependency management.</p>
  </li>
  <li>
    <p><a href="https://blinry.org/nix-time-travel/">Building 15-year-old software with Nix</a> <br />
How to build old software with Nix.</p>
  </li>
  <li>
    <p><a href="https://jade.fyi/blog/nix-evaluation-blocking/">Stopping evaluation from blocking in Nix</a> <br />
How to stop Nix from blocking when evaluating an expression</p>
  </li>
</ul>

<h2 id="programming-languages-theory">Programming Languages Theory</h2>

<ul>
  <li>
    <p><a href="https://danieljharvey.github.io//posts/2023-02-23-llvm-compiler-part-2.html">Compiling a functional language to LLVM, part 2</a> <br />
Compiling a functional language to LLVM: adding support for conditionals.</p>
  </li>
  <li>
    <p><a href="https://elizarov.medium.com/deep-recursion-with-coroutines-7c53e15993e3">Deep recursion with coroutines</a> <br />
How to do deep recursion with coroutines in Kotlin without blowing the stack.</p>
  </li>
  <li>
    <p><a href="https://borretti.me/article/design-austral-compiler">Design of the Austral Compiler</a> <br />
Complete description of the design of the Austral compiler.</p>
  </li>
  <li>
    <p><a href="https://blog.jez.io/intro-elim/">Every type is defined by its intro and elim forms</a> <br />
Every type is defined by how we construct it and how we deconstruct it.</p>
  </li>
  <li>
    <p><a href="https://intuitiveexplanations.com/tech/kalyn">Kalyn: a self-hosting compiler for x86-64</a> <br />
Complete description of a self-hosting compiler for x86-64.</p>
  </li>
  <li>
    <p><a href="https://eli.thegreenplace.net/2017/on-recursion-continuations-and-trampolines/">On Recursion, Continuations and Trampolines</a> <br />
Implementing tail recursion using Continuation Passing Style and trampolines.</p>
  </li>
  <li>
    <p><a href="https://matklad.github.io/2023/04/13/reasonable-bootstrap.html">Reasonable Bootstrap</a> <br />
A better way to bootstrap a compiler.</p>
  </li>
  <li>
    <p><a href="https://capitalex.codeberg.page/scripting-languages-without-gcs/">Scripting Objects without Trash Day</a> <br />
Survey of scripting languages without garbage collection.</p>
  </li>
</ul>

<h2 id="reverse-engineering">Reverse Engineering</h2>

<ul>
  <li>
    <p><a href="https://www.anvilsecure.com/blog/compromising-garmins-sport-watches-a-deep-dive-into-garminos-and-its-monkeyc-virtual-machine.html">Compromising Garmin’s Sport Watches: A Deep Dive into GarminOS and its MonkeyC Virtual Machine</a> <br />
Reverse engineering GarminOS and its MonkeyC VM to find vulnerabilities.</p>
  </li>
  <li>
    <p><a href="https://blog.polybdenum.com/2021/05/05/how-i-hacked-google-app-engine-anatomy-of-a-java-bytecode-exploit.html">How I Hacked Google App Engine: Anatomy of a Java Bytecode Exploit</a> <br />
Story of a Java bytecode exploit that allowed running arbitrary code on Google App Engine.</p>
  </li>
</ul>

<h2 id="programming">Programming</h2>

<ul>
  <li>
    <p><a href="https://mckayla.blog/posts/all-you-need-is-data-and-functions.html">All you need is data and functions</a> <br />
Replacing traits with data and functions.</p>
  </li>
  <li>
    <p><a href="https://www.evalapply.org/posts/animate-text-art-javascript/index.html">Animating Text Art in JavaScript</a> <br />
How to animate text art in JavaScript.</p>
  </li>
  <li>
    <p><a href="https://typeclasses.substack.com/p/make-invalid-states-representable">Make invalid states representable</a> <br />
Making invalid states representable to provide better error messages.</p>
  </li>
</ul>

<h2 id="miscellaneous">Miscellaneous</h2>

<ul>
  <li>
    <p><a href="https://borretti.me/article/effective-spaced-repetition">Effective Spaced Repetition</a> <br />
Strategies for effective spaced repetition.</p>
  </li>
  <li>
    <p><a href="https://typeclasses.substack.com/p/erasing-at-the-blackboard">Erasing at the blackboard</a> <br />
Better ways to write code for a book.</p>
  </li>
</ul>

<p>Like, share, or comment on this post on <a href="https://fantastic.earth/@abnv/110297621824341094">Mastodon</a>.</p>]]></summary>
        <author>
            <name>Posts on abhinavsarkar.net</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Value Oriented Programming Needs Implicits?]]></title>
        <id>https://matklad.github.io/2023/05/02/implicits-for-mvs.html</id>
        <link href="https://matklad.github.io/2023/05/02/implicits-for-mvs.html"/>
        <updated>2023-05-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[An amateur note on language design which explores two important questions:]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[My favorite C compiler flags during development]]></title>
        <id>https://nullprogram.com/blog/2023/04/29/</id>
        <link href="https://nullprogram.com/blog/2023/04/29/"/>
        <updated>2023-04-29T22:55:25.000Z</updated>
        <summary type="html"><![CDATA[This article was discussed on Hacker News and on reddit.
The major compilers have an enormous number of knobs. Most are
highly specialized, but others are generally useful even if uncommon. For
warnings, the venerable -﻿Wall -﻿Wextra is a good start, but
circumstances improve by tweaking this warning set. This article covers
high-hitting development-time options in GCC, Clang, and MSVC that ought
to get more consideration.
There’s an irony that the more you use these options, the less useful they
become. Given a reasonable workflow, they are a harsh mistress in a fast,
tight feedback loop quickly breaking the habits that cause warnings and
errors. It’s a kind of self-improvement, where eventually most findings
will be false positives. With heuristics internalized, you will be able
spot the…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Improved Alerting with Atlas Streaming Eval]]></title>
        <id>https://medium.com/p/e691c60dc61e</id>
        <link href="https://netflixtechblog.com/improved-alerting-with-atlas-streaming-eval-e691c60dc61e?source=rss----2615bd06b42e---4"/>
        <updated>2023-04-27T20:52:51.000Z</updated>
        <summary type="html"><![CDATA[Ruchir Jha, Brian Harrington, Yingwu Zhao]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Data Oriented Parallel Value Interner]]></title>
        <id>https://matklad.github.io/2023/04/23/data-oriented-parallel-value-interner.html</id>
        <link href="https://matklad.github.io/2023/04/23/data-oriented-parallel-value-interner.html"/>
        <updated>2023-04-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this post, I will present a theoretical design for an interner.
It should be fast, but there will be no benchmarks as I haven't implemented the thing.
So it might actually be completely broken or super slow for one reason or another.
Still, I think there are a couple of neat ideas, which I would love to call out.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reasonable Bootstrap]]></title>
        <id>https://matklad.github.io/2023/04/13/reasonable-bootstrap.html</id>
        <link href="https://matklad.github.io/2023/04/13/reasonable-bootstrap.html"/>
        <updated>2023-04-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Compilers for systems programming languages (C, C++, Rust, Zig) tend to be implemented in the languages themselves.
The idea being that the current version of the compiler is built using some previous version.
But how can you get a working compiler if you start out from nothing?]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Can You Trust a Compiler to Optimize Your Code?]]></title>
        <id>https://matklad.github.io/2023/04/09/can-you-trust-a-compiler-to-optimize-your-code.html</id>
        <link href="https://matklad.github.io/2023/04/09/can-you-trust-a-compiler-to-optimize-your-code.html"/>
        <updated>2023-04-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[More or less the title this time, but first, a story about SIMD. There are three
levels of understanding how SIMD works (well, at least I am level 3 at the moment):]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
</feed>