<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2023-01-27T05:22:43.715Z</id>
    <title>osmos::feed</title>
    <updated>2023-01-27T05:22:43.715Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Scalable Annotation Service — Marken]]></title>
        <id>https://medium.com/p/f5ba9266d428</id>
        <link href="https://netflixtechblog.com/scalable-annotation-service-marken-f5ba9266d428?source=rss----2615bd06b42e---4"/>
        <updated>2023-01-26T03:07:29.000Z</updated>
        <summary type="html"><![CDATA[In Marken (Scalable Annotation Service at Netflix), an annotation is a piece of metadata which can be attached to an object from any domain.]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weak data typing in MySQL]]></title>
        <id>https://yurichev.org/mysql/</id>
        <link href="https://yurichev.org/mysql/"/>
        <updated>2023-01-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Weak data typing in MySQL]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Russian][Crypto] Что такое side-channel attack / timing attack]]></title>
        <id>https://yurichev.org/side/</id>
        <link href="https://yurichev.org/side/"/>
        <updated>2023-01-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Russian][Crypto] Что такое side-channel attack / timing attack]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rust's Ugly Syntax]]></title>
        <id>https://matklad.github.io/2023/01/26/rusts-ugly-syntax.html</id>
        <link href="https://matklad.github.io/2023/01/26/rusts-ugly-syntax.html"/>
        <updated>2023-01-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[People complain about Rust syntax.
I think that most of the time when people think they have an issue with Rust's syntax, they actually object to Rust's semantics.
In this slightly whimsical post, I'll try to disentangle the two.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next Rust Compiler]]></title>
        <id>https://matklad.github.io/2023/01/25/next-rust-compiler.html</id>
        <link href="https://matklad.github.io/2023/01/25/next-rust-compiler.html"/>
        <updated>2023-01-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In Rust in 2023, @nrc floated an idea of a Rust compiler rewrite.
As my hobby is writing Rust compiler frontends (1, 2), I have some (but not very many) thoughts here!
The post consists of two parts, covering organizational and technical aspects.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part IV]]></title>
        <id>https://yurichev.org/Bleich4/</id>
        <link href="https://yurichev.org/Bleich4/"/>
        <updated>2023-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part IV]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part III]]></title>
        <id>https://yurichev.org/Bleich3/</id>
        <link href="https://yurichev.org/Bleich3/"/>
        <updated>2023-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part III]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part II]]></title>
        <id>https://yurichev.org/Bleich2/</id>
        <link href="https://yurichev.org/Bleich2/"/>
        <updated>2023-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part II]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part I]]></title>
        <id>https://yurichev.org/Bleich1/</id>
        <link href="https://yurichev.org/Bleich1/"/>
        <updated>2023-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part I]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto] RSA blinding]]></title>
        <id>https://yurichev.org/RSA_blind/</id>
        <link href="https://yurichev.org/RSA_blind/"/>
        <updated>2023-01-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto] RSA blinding]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[u-config: a new, lean pkg-config clone]]></title>
        <id>https://nullprogram.com/blog/2023/01/18/</id>
        <link href="https://nullprogram.com/blog/2023/01/18/"/>
        <updated>2023-01-18T06:39:51.000Z</updated>
        <summary type="html"><![CDATA[This article was discussed on Hacker News.
In my common SDL2 mistakes listing, the first was about winging it
instead of using the sdl2-config script. It’s just one of three official
options for portably configuring SDL2, but I had dismissed the others from
consideration. One is the pkg-config facility common to unix-like
systems. However, the SDL maintainers recently announced SDL3, which will
not have a sdl3-config. The concept has been deprecated in favor of the
existing pkg-config option. I’d like to support this on w64devkit, except
that it lacks pkg-config — not the first time this has come up. So last
weekend I wrote a new pkg-config from scratch with first-class Windows
support: u-config (“micro-config”). It will serve as pkg-config
in w64devkit starting in the next release.
Ultima…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++ vs Rust: which is faster?]]></title>
        <id>https://fasterthanli.me/videos/cpp-vs-rust-which-is-faster</id>
        <link href="https://fasterthanli.me/videos/cpp-vs-rust-which-is-faster"/>
        <updated>2023-01-17T08:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>I ported some Advent of Code solutions from C/C++ to Rust, and used the
opportunity to compare performance. When I couldn't explain why they performed
differently, I had no choice but to disassemble both and look at what the
codegen was like!</p>]]></summary>
        <author>
            <name>fasterthanli.me</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Day 18 (Advent of Code 2022)]]></title>
        <id>https://fasterthanli.me/series/advent-of-code-2022/part-18</id>
        <link href="https://fasterthanli.me/series/advent-of-code-2022/part-18"/>
        <updated>2023-01-12T14:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>This time around, we're porting a solution from C++ to Rust and seeing how it
feels, how it performs, and what we can learn about both languages by doing that.</p>
<p>See <a href="part-17">Day 17</a> for the rationale re: porting solutions rather than
writing my own from scratch. TL;DR is: it's better than nothing, and we can
still focus about learning Rust rather than spending entire days fighting
off-by-one errors.</p>]]></summary>
        <author>
            <name>fasterthanli.me</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Twitch fell behind]]></title>
        <id>https://fasterthanli.me/articles/twitch-fell-behind</id>
        <link href="https://fasterthanli.me/articles/twitch-fell-behind"/>
        <updated>2023-01-12T13:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>So you want to do live streams. Are you sure? Okay. Let's talk about it.</p>

                        <h2>
                            <a id="let-s-talk-numbers" class="anchor" href="#let-s-talk-numbers">
                                Let's talk numbers
                            </a>
                        </h2>]]></summary>
        <author>
            <name>fasterthanli.me</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Day 17 (Advent of Code 2022)]]></title>
        <id>https://fasterthanli.me/series/advent-of-code-2022/part-17</id>
        <link href="https://fasterthanli.me/series/advent-of-code-2022/part-17"/>
        <updated>2023-01-11T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Advent of Code gets harder and harder, and I'm not getting any smarter. Or any
more free time. So, in order to close out this series anyway, I'm going to try
and port other people's solutions from &quot;language X&quot; to Rust. That way, they
already figured out the hard stuff, and we can just focus on the Rust bits!</p>]]></summary>
        <author>
            <name>fasterthanli.me</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[This Month with Nim: November and December 2022]]></title>
        <id>https://nim-lang.org//blog/2023/01/11/this-month-with-nim.html</id>
        <link href="https://nim-lang.org//blog/2023/01/11/this-month-with-nim.html"/>
        <updated>2023-01-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[New Cliche version
Author: Juan Carlos
New Cliche version:
Added support for bool.
Reads enum, Positive, Natural, BiggestInt, BiggestFloat, int, float directly from command line.
Fallbacks for values: static default ➡️  env var ➡️  command line.
Uses parseInt for int, parseFloat for float, parseEnum for enum, etc.
import std/strutils
import cliche
# Use https://nim-lang.github.io/Nim/os.html#commandLineParams
type Food = enum PIZZA, TACO  # Enum from CLI.
# let real = commandLineParams()
let fake = @["--a=1", "--v_1=9.9", "--v2=1", "--v3=2", "--v4=X", "--v5=t", "--v6=5", "--v7=true", "--food=PIZZA"]
fake.getOpt (a: int.high, v_1: 3.14, v2: 9'u64, v3: -9'i64, v4: "a", v5: '4', v6: 9.Positive, v7: false, missing: 42, food: TACO)
doAssert a == 1  # int
doAssert v_1 == 9.9  # float
doAssert v2…]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SDL2 common mistakes and how to avoid them]]></title>
        <id>https://nullprogram.com/blog/2023/01/08/</id>
        <link href="https://nullprogram.com/blog/2023/01/08/"/>
        <updated>2023-01-08T02:09:26.000Z</updated>
        <summary type="html"><![CDATA[This article was discussed on reddit.
SDL has grown on me over the past year. I didn’t understand its value
until viewing it in the right lens: as a complete platform and runtime
replacing the host’s runtime, possibly including libc. Ideally an SDL
application links exclusively against SDL and otherwise not directly
against host libraries, though in practice it’s somewhat porous. With care
— particularly in avoiding mistakes covered in this article — that ideal
is quite achievable for C applications that fit within SDL’s feature set.
SDL applications are always interesting one way or another, so I like to
dig in when I come across them. The items in this article are mistakes
I’ve either made myself or observed across many such passion projects in
the wild.
Mistake 1: Not using sdl2-config
…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spherical Integration]]></title>
        <id>https://thenumbat.github.io/Spherical-Integration/</id>
        <link href="https://thenumbat.github.io/Spherical-Integration/"/>
        <updated>2023-01-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Or, where does that \(\sin\theta\) come from? Integrating functions over spheres is a ubiquitous task in graphics—and a common source of confusion for beginners. In particular, understanding why integration in spherical coordinates requires multiplying by \(\sin\theta\) takes some thought. The Confusion So, we want to integrate a function \(f\) over the unit sphere. For simplicity, let’s assume \(f = 1\). Integrating \(1\) over any surface computes the area of that surface: for a unit sphere, we should end up with \(4\pi\). Integrating over spheres is much easier in the eponymous spherical coordinates, so let’s define \(f\) in terms of \(\theta, \phi\): \(\theta\) ranges from \(0\) to \(\pi\), representing latitude, and \(\phi\) ranges from \(0\) to \(2\pi\), representing longitude. Naively, we might try to integrate \(f\) by ranging over the two parameters: \[\begin{align*} \int_{0}^{2\pi}\int_0^\pi 1\, d\theta d\phi &amp;= \int_0^{2\pi} \theta\Big|_0^\pi\, d\phi\\ &amp;= \int_0^{2\pi} \pi\, d\phi \\ &amp;= \pi \left(\phi\Big|_0^{2\pi}\right) \\ &amp;= 2\pi^2 \end{align*}\] That’s not \(4\pi\)—we didn’t integrate over the sphere! All we did was integrate over a flat rectangle of height \(\pi\) and width \(2\pi\). One way to conceptualize this integral is by adding up the differential area \(dA\) of many small rectangular patches of the domain. Each patch has area \(dA = d\theta d\phi\), so adding them up results in the area of the rectangle. What we actually want is to add up the areas of patches on the sphere, where they are smaller. In the limit (small \(d\theta,d\phi\)), the spherical patch \(d\mathcal{S}\) is a factor of \(\sin\theta\) smaller than the rectangular patch \(dA\)1. Intuitively, the closer to the poles the patch is, the smaller its area. When integrating over the sphere \(\mathcal{S}\), we call the area differential \(d\mathcal{S} = \sin\theta\, d\theta d\phi\)2. Let’s try using it: \[\begin{align*} \iint_\mathcal{S} 1\,d\mathcal{S} &amp;= \int_{0}^{2\pi}\int_0^\pi \sin\theta\, d\theta d\phi\\ &amp;= \int_0^{2\pi} (-\cos\theta)\Big|_0^\pi\, d\phi\\ &amp;= \int_0^{2\pi} 2\, d\phi \\ &amp;= 2 \left(\phi\Big|_0^{2\pi}\right) \\ &amp;= 4\pi \end{align*}\] It works! If you just wanted the intuition, you can stop reading here. But why \(\sin\theta\)? It’s illustrative to analyze how \(\sin\theta\) arises from parameterizing the cartesian (\(x,y,z\)) sphere using spherical coordinates. In cartesian coordinates, a unit sphere is defined by \(x^2 + y^2 + z^2 = 1\). It’s possible to formulate a cartesian surface integral based on this definition, but it would be ugly. \[\iint_{x^2+y^2+z^2=1} f dA = \text{?}\] Instead, we can perform a change of coordinates from cartesian to spherical coordinates. To do so, we will define \(\Phi : \theta,\phi \mapsto x,y,z\): $$ \begin{align*} \Phi(\theta,\phi) = \begin{bmatrix}\sin\theta\cos\phi\\ \sin\theta\sin\phi\\ \cos\theta\end{bmatrix} \end{align*} $$ The function \(\Phi\) is a parameterization of the unit sphere \(\mathcal{S}\). We can check that it satisfies \(x^2+y^2+z^2=1\) regardless of \(\theta\) and \(\phi\): \[\begin{align*} |\Phi(\theta,\phi)|^2 &amp;= (\sin\theta\cos\phi)^2 + (\sin\theta\sin\phi)^2 + \cos^2\theta\\ &amp;= \sin^2\theta(\cos^2\phi+\sin^2\phi) + \cos^2\theta \\ &amp;= \sin^2\theta + \cos^2\theta\\ &amp;= 1 \end{align*}\] Applying \(\Phi\) to the rectangular domain \(\theta\in[0,\pi],\phi\in[0,2\pi]\) in fact describes all of \(\mathcal{S}\), giving us a much simpler parameterization of the integral. To integrate over \(d\theta\) and \(d\phi\), we also need to compute how they relate to \(d\mathcal{S}\). Luckily, there’s a formula that holds for any parametric surface \(\mathbf{r}(u,v)\) describing a three-dimensional domain \(\mathcal{R}\)3: \[d\mathcal{R} = \left\lVert \frac{\partial \mathbf{r}}{\partial u} \times \frac{\partial \mathbf{r}}{\partial v} \right\rVert du dv\] The two partial derivatives represent tangent vectors on \(\mathcal{R}\) along the \(u\) and \(v\) axes, respectively. Intuitively, each tangent vector describes how a \(u,v\) patch is stretched along the corresponding axis when mapped onto \(\mathcal{R}\). The magnitude of their cross product then computes the area of the resulting parallelogram. Finally, we can actually apply the change of coordinates: \[\begin{align*} \iint_\mathcal{S} f\, d\mathcal{S} &amp;= \int_0^{2\pi}\int_0^\pi f(\Phi(\theta,\phi)) \left\lVert \frac{\partial\Phi}{\partial\theta} \times \frac{\partial\Phi}{\partial\phi} \right\rVert d\theta d\phi \end{align*}\] We just need to compute the area term: \[\begin{align*} \frac{\partial\Phi}{\partial\theta} &amp;= \begin{bmatrix}\cos\phi\cos\theta &amp; \sin\phi\cos\theta &amp; -\sin\theta\end{bmatrix}\\ \frac{\partial\Phi}{\partial\phi} &amp;= \begin{bmatrix}-\sin\phi\sin\theta &amp; \cos\phi\sin\theta &amp; 0\end{bmatrix}\\ \frac{\partial\Phi}{\partial\theta} \times \frac{\partial\Phi}{\partial\phi} &amp;= \begin{bmatrix}\sin^2\theta\cos\phi &amp; \sin^2\theta\sin\phi &amp; \cos^2\phi\cos\theta\sin\theta + \sin^2\phi\cos\theta\sin\theta\end{bmatrix}\\ &amp;= \begin{bmatrix}\sin^2\theta\cos\phi &amp; \sin^2\theta\sin\phi &amp; \cos\theta\sin\theta \end{bmatrix}\\ \left\lVert\frac{\partial\Phi}{\partial\theta} \times \frac{\partial\Phi}{\partial\phi}\right\rVert &amp;= \sqrt{\sin^4\theta(\cos^2\phi+\sin^2\phi) + \cos^2\theta\sin^2\theta}\\ &amp;= \sqrt{\sin^2\theta(\sin^2\theta + \cos^2\theta)}\\ &amp;= \lvert\sin\theta\rvert \end{align*}\] Since \(\theta\in[0,\pi]\), we can say \(\lvert\sin\theta\rvert = \sin\theta\). That means \(d\mathcal{S} = \sin\theta\, d\theta d\phi\)! Our final result is the familiar spherical integral: \[\iint_\mathcal{S} f dS = \int_0^{2\pi}\int_0^\pi f(\theta,\phi) \sin\theta\, d\theta d\phi\] Footnotes Interestingly, if we knew the formula for the area of a spherical patch, we could do some slightly illegal math to derive the area form: \[\begin{align*} dA &amp;= (\phi_1-\phi_0)(\cos\theta_0-\cos\theta_1)\\ &amp;= ((\phi + d\phi) - \phi)(\cos(\theta)-\cos(\theta+d\theta))\\ &amp;= d\phi d\theta \frac{(\cos(\theta)-\cos(\theta+d\theta))}{d\theta}\\ &amp;= d\phi d\theta \sin\theta \tag{Def. derivative} \end{align*}\] &#8617; In graphics, also known as differential solid angle, \(d\mathbf{\omega} = \sin\theta\, d\theta d\phi\). &#8617; Even more generally, the scale is related to the inner product on the tangent space of the surface. This inner product is defined by the first fundamental form \(\mathrm{I}\) of the surface, and the scale factor is \(\sqrt{\det\mathrm{I}}\), regardless of dimension. For surfaces immersed in 3D, this simplifies to the cross product mentioned above. Changes of coordinates that don’t change dimensionality have a more straightforward scale factor: it’s the determinant of their Jacobian.4 &#8617; These topics are often more easily understood using the language of exterior calculus, where integrals can be uniformly expressed regardless of dimension. I will write about it at some point. &#8617;]]></summary>
        <author>
            <name>Max Slater</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto][Python] Padding oracle attack: demonstration]]></title>
        <id>https://yurichev.org/padding_oracle_attack/</id>
        <link href="https://yurichev.org/padding_oracle_attack/"/>
        <updated>2023-01-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto][Python] Padding oracle attack: demonstration]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto] PKCS#7 padding]]></title>
        <id>https://yurichev.org/pkcs7/</id>
        <link href="https://yurichev.org/pkcs7/"/>
        <updated>2023-01-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto] PKCS#7 padding]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[On Random Numbers]]></title>
        <id>https://matklad.github.io/2023/01/04/on-random-numbers.html</id>
        <link href="https://matklad.github.io/2023/01/04/on-random-numbers.html"/>
        <updated>2023-01-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is a short post which decomposes random numbers topic into principal components and maps them to Rust ecosystem.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Los Cabos]]></title>
        <id>https://thenumbat.github.io/Cabo/</id>
        <link href="https://thenumbat.github.io/Cabo/"/>
        <updated>2023-01-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Los Cabos, BCS, Mexico, 2022]]></summary>
        <author>
            <name>Max Slater</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[We need to talk about Dropout]]></title>
        <id>https://fasterthanli.me/videos/we-need-to-talk-about-dropout</id>
        <link href="https://fasterthanli.me/videos/we-need-to-talk-about-dropout"/>
        <updated>2022-12-31T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Let's talk about big TV and movie studios. About the life and death of
CollegeHumor, about what makes Dropout interesting, and how their video platform
could be improved!</p>
<p>00:00 Big TV and movie studios<br />
01:38 Internet and the attention economy<br />
02:32 The life and death of CollegeHumor<br />
03:55 Pivot to video they said<br />
04:39 The second life of CollegeHumor
05:56 Dirty Laundry, with Lili Du &amp; Grant O'Brien<br />
06:42 Um, Actually, with Mike Trapp<br />
07:38 Game Changer, with Sam Reich<br />
08:41 The good parts of the Dropout platform<br />
09:21 Ten details Dropout can fix<br />
12:35 Thanks and announcements</p>]]></summary>
        <author>
            <name>fasterthanli.me</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ray Tracer Construction Kit]]></title>
        <id>https://matklad.github.io/2022/12/31/raytracer-construction-kit.html</id>
        <link href="https://matklad.github.io/2022/12/31/raytracer-construction-kit.html"/>
        <updated>2022-12-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Ray or path tracing is an algorithm for getting a 2D picture out of a 3D virtual scene, by simulating a trajectory of a particle of light which hits the camera.
It's one of the fundamental techniques of computer graphics, but that's not why it is the topic for today's blog post.
Implementing a toy ray tracer is one of the best exercises for learning a particular programming language (and a great deal about software architecture in general as well), and that's the why? for this text.
My goal here is to teach you to learn new programming languages better, by giving a particularly good exercise for that.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Day 16 (Advent of Code 2022)]]></title>
        <id>https://fasterthanli.me/series/advent-of-code-2022/part-16</id>
        <link href="https://fasterthanli.me/series/advent-of-code-2022/part-16"/>
        <updated>2022-12-29T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Let's tackle the <a href="https://adventofcode.com/2022/day/16">day 16 puzzle</a>!</p>

                        <h2>
                            <a id="parsing" class="anchor" href="#parsing">
                                Parsing
                            </a>
                        </h2>
                        
<p>The input looks like this:</p>
<div class="code-block" translate="no"><pre class="code-block-inner" data-lang="">Valve AA has flow rate=0; tunnels lead to valves DD, II, BB
Valve BB has flow rate=13; tunnels lead to valves CC, AA
Valve CC has flow rate=2; tunnels lead to valves DD, BB
Valve DD has flow rate=20; tunnels lead to valves CC, AA, EE
Valve EE has flow rate=3; tunnels lead to valves FF, DD
Valve FF has flow rate=0; tunnels lead to valves EE, GG
Valve GG has flow rate=0; tunnels lead to valves FF, HH
Valve HH has flow rate=22; tunnel leads to valve GG
Valve II has flow rate=0; tunnels lead to valves AA, JJ
Valve JJ has flow rate=21; tunnel leads to valve II
</pre></div>]]></summary>
        <author>
            <name>fasterthanli.me</name>
        </author>
    </entry>
</feed>