<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2023-04-30T01:04:36.893Z</id>
    <title>osmos::feed</title>
    <updated>2023-04-30T01:04:36.893Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[My favorite C compiler flags during development]]></title>
        <id>https://nullprogram.com/blog/2023/04/29/</id>
        <link href="https://nullprogram.com/blog/2023/04/29/"/>
        <updated>2023-04-29T22:55:25.000Z</updated>
        <summary type="html"><![CDATA[The major compilers have an enormous number of knobs. Most are
highly specialized, but others are generally useful even if uncommon. For
warnings, the venerable -﻿Wall -﻿Wextra is a good start, but
circumstances improve by tweaking this warning set. This article covers
high-hitting development-time options in GCC, Clang, and MSVC that ought
to get more consideration.
There’s an irony that the more you use these options, the less useful they
become. Given a reasonable workflow, they are a harsh mistress in a fast,
tight feedback loop quickly breaking the habits that cause warnings and
errors. It’s a kind of self-improvement, where eventually most findings
will be false positives. With heuristics internalized, you will be able
spot the same issues just reading code — a handy skill during cod…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Improved Alerting with Atlas Streaming Eval]]></title>
        <id>https://medium.com/p/e691c60dc61e</id>
        <link href="https://netflixtechblog.com/improved-alerting-with-atlas-streaming-eval-e691c60dc61e?source=rss----2615bd06b42e---4"/>
        <updated>2023-04-27T20:52:51.000Z</updated>
        <summary type="html"><![CDATA[Ruchir Jha, Brian Harrington, Yingwu Zhao]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Data Oriented Parallel Value Interner]]></title>
        <id>https://matklad.github.io/2023/04/23/data-oriented-parallel-value-interner.html</id>
        <link href="https://matklad.github.io/2023/04/23/data-oriented-parallel-value-interner.html"/>
        <updated>2023-04-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this post, I will present a theoretical design for an interner.
It should be fast, but there will be no benchmarks as I haven't implemented the thing.
So it might actually be completely broken or super slow for one reason or another.
Still, I think there are a couple of neat ideas, which I would love to call out.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reasonable Bootstrap]]></title>
        <id>https://matklad.github.io/2023/04/13/reasonable-bootstrap.html</id>
        <link href="https://matklad.github.io/2023/04/13/reasonable-bootstrap.html"/>
        <updated>2023-04-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Compilers for systems programming languages (C, C++, Rust, Zig) tend to be implemented in the languages themselves.
The idea being that the current version of the compiler is built using some previous version.
But how can you get a working compiler if you start out from nothing?]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Can You Trust a Compiler to Optimize Your Code?]]></title>
        <id>https://matklad.github.io/2023/04/09/can-you-trust-a-compiler-to-optimize-your-code.html</id>
        <link href="https://matklad.github.io/2023/04/09/can-you-trust-a-compiler-to-optimize-your-code.html"/>
        <updated>2023-04-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[More or less the title this time, but first, a story about SIMD. There are three
levels of understanding how SIMD works (well, at least I am level 3 at the moment):]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[UB Might Be a Wrong Term for Newer Languages]]></title>
        <id>https://matklad.github.io/2023/04/02/ub-might-be-the-wrong-term-for-newer-languages.html</id>
        <link href="https://matklad.github.io/2023/04/02/ub-might-be-the-wrong-term-for-newer-languages.html"/>
        <updated>2023-04-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A short note on undefined behavior, which assumes familiarity with the subject (see this article for the introduction).
The TL;DR is that I think that carrying the wording from the C standard into newer languages, like Zig and Rust, might be a mistake.
This is strictly the word choice, the lexical syntax of the comments argument.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[This Month with Nim: March 2023]]></title>
        <id>https://nim-lang.org//blog/2023/04/01/this-month-with-nim.html</id>
        <link href="https://nim-lang.org//blog/2023/04/01/this-month-with-nim.html"/>
        <updated>2023-04-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Binance
Author: Juan Carlos
Trade Bitcoin, USD and Gold using Nim!
Includes examples, API documentation, giftcards maker, futures maker,
leveraged perpetual futures automated trading bots with TSL/SL/TP/PNL,
make your own strategy, code Nim and make some money.
Lichess BOT Annie
Author: Tsoj
I want to introduce you to Annie, a chess bot for Lichess.
She’s excited about exploring the more intricate sides of chess.
Her favorite openings are the cloud variations and she is a very enthusiastic fan of en passant in every imaginable form.
Annie’s handcrafted, large-table powered evaluation was trained on no fewer than six million, four hundred and thirty-four positions from games played on Lichess.
Not just the games of grandmasters, but the games of noobs and sub-800 Elo players too. On top of …]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Interesting Links for March 2023]]></title>
        <id>https://notes.abhinavsarkar.net/2023/links-23-03</id>
        <link href="https://notes.abhinavsarkar.net/2023/links-23-03"/>
        <updated>2023-04-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Here are some interesting things I read on the internet in March 2023:</p>

<h2 id="haskell">Haskell</h2>

<ul>
  <li><a href="https://web.archive.org/web/3/https://mihai.page/evolving-is-digit/">Evolving <code class="language-plaintext highlighter-rouge">isDigit</code></a> <br />
Using Genetic algorithms to evolve a Haskell program that determines if a character is a digit.</li>
  <li><a href="https://web.archive.org/web/3/https://typeclasses.substack.com/p/memfd-an-example-of-haskell-and-c">memfd: An example of Haskell and C</a> <br />
A simple example of how to call C code from Haskell.</li>
  <li><a href="https://web.archive.org/web/3/https://sriramsami.com/haskell-optimization/">Optimizing Haskell Programs</a> <br />
A guide to optimizing Haskell programs.</li>
  <li><a href="https://web.archive.org/web/3/https://www.lambdabytes.io/articles/defectprocess/">The Source Code of Defect Process</a> <br />
An analysis of the source code of the Defect Process video game written in Haskell.</li>
  <li><a href="https://web.archive.org/web/3/https://typeclasses.substack.com/p/whats-new-in-ghc-2021">What’s new in GHC 2021</a> <br />
A summary of the new features in GHC 2021 language.</li>
</ul>

<h2 id="nix">Nix</h2>

<ul>
  <li><a href="https://web.archive.org/web/3/https://typeclasses.substack.com/p/flakes-nixos-desktop">7.5 years of NixOS on the desktop, cleaned up with Flakes</a> <br />
A guide to using NixOS on the desktop.</li>
  <li><a href="https://web.archive.org/web/3/https://bmcgee.ie/posts/2022/11/getting-nixos-to-keep-a-secret/">Getting NixOS to keep a secret</a> <br />
A guide on how to use secrets in NixOS.</li>
  <li><a href="https://web.archive.org/web/3/https://jvns.ca/blog/2023/03/03/how-do-nix-builds-work-/">How do Nix builds work?</a> <br />
An exploration of how Nix builds work.</li>
  <li><a href="https://web.archive.org/web/3/https://jvns.ca/blog/2023/02/28/some-notes-on-using-nix/">Some notes on using Nix</a> <br />
Some notes on using Nix as a beginner.</li>
</ul>

<h2 id="zig">Zig</h2>

<ul>
  <li><a href="https://web.archive.org/web/3/https://www.scattered-thoughts.net/writing/assorted-thoughts-on-zig-and-rust/">Assorted thoughts on Zig (and Rust)</a> <br />
A comparison of Zig and Rust.</li>
  <li><a href="https://web.archive.org/web/3/https://matklad.github.io/2023/03/26/zig-and-rust.html">Zig and Rust</a> <br />
Another comparison of Zig and Rust, from the point of view of writing reliable software.</li>
  <li><a href="https://web.archive.org/web/3/https://www.openmymind.net/Zig-Quirks/">Zig Quirks</a> <br />
Some quirks of the Zig programming language.</li>
</ul>

<h2 id="programming-languages-theory">Programming Languages Theory</h2>

<ul>
  <li><a href="https://web.archive.org/web/3/https://yangdanny97.github.io/blog/2020/05/29/chocopy-typechecker">Chocopy Hacking Part 1: Building a compiler frontend in Python</a> <br />
Building a compiler frontend in Python for the Chocopy programming language.</li>
  <li><a href="https://web.archive.org/web/3/https://yangdanny97.github.io/blog/2021/08/26/chocopy-jvm-backend">Chocopy Hacking Part 2: Compiling to JVM</a> <br />
Compiling Chocopy to JVM bytecode.</li>
  <li><a href="https://web.archive.org/web/3/https://yangdanny97.github.io/blog/2022/10/11/chocopy-wasm-backend">Chocopy Hacking Part 4: Compiling to WASM</a> <br />
Compiling Chocopy to WASM.</li>
  <li><a href="https://web.archive.org/web/3/http://www.iro.umontreal.ca/~felipe/IFT2030-Automne2002/Complements/tinyc.c">Compiler for the Tiny-C language</a> <br />
A bytecode compiler and virtual machine for a tiny C-like programming language written in C.</li>
  <li><a href="https://web.archive.org/web/3/https://pubby.games/codegen.html">Explaining my fast 6502 code generator</a> <br />
Somewhat unconventional 6502 code generation that is fast.</li>
  <li><a href="https://web.archive.org/web/3/https://tweedegolf.nl/en/blog/88/data-oriented-design">Optimizing a parser/compiler with data-oriented design: a case study</a> <br />
A case study of optimizing a parser/compiler with data-oriented design.</li>
  <li><a href="https://web.archive.org/web/3/https://yangdanny97.github.io/blog/2022/09/03/scratching-the-pl-itch">Scratching the PL Itch</a> <br />
Various ways in which programming language theory can be applied to real-world problems other than compilers.</li>
</ul>

<h2 id="miscellaneous">Miscellaneous</h2>

<ul>
  <li><a href="https://web.archive.org/web/3/https://sandymaguire.me/blog/book-mechanics/">The Mechanics of Writing a Book</a> <br />
How to write a book.</li>
  <li><a href="https://web.archive.org/web/3/https://www.richard-towers.com/2023/03/11/typescripting-the-technical-interview.html">Typescripting the technical interview</a> <br />
A homage to Aphyr’s “Typing the Technical Interview”.</li>
  <li><a href="https://web.archive.org/web/3/http://rtpg.co/2023/03/02/quines-for-dummies.html">Writing The World’s Most Boring Quine</a> <br />
How to write quines from first principles.</li>
</ul>

<p>Like, repost, or comment on this post on <a href="https://fantastic.earth/@abnv/110122311237335886">Mastodon</a>.</p>]]></summary>
        <author>
            <name>Posts on abhinavsarkar.net</name>
        </author>
    </entry>
</feed>