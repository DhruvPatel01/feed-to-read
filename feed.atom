<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2024-05-12T00:59:17.978Z</id>
    <title>osmos::feed</title>
    <updated>2024-05-12T00:59:17.978Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Peer review is not the gold standard in science]]></title>
        <id>https://lemire.me/blog/?p=21322</id>
        <link href="https://lemire.me/blog/2024/05/11/peer-review-is-not-the-gold-standard-in-science/"/>
        <updated>2024-05-11T22:47:16.000Z</updated>
        <summary type="html"><![CDATA[Peer review as we know it today was introduced very late, over a century after the scientific revolution. It happened after Einstein’s time… arguably the most productive era in science. Current scientists often equate a success with the publication in a selective peer-reviewed venue. But that was never the scientific paradigm. In fact, it is … Continue reading Peer review is not the gold standard in science]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How fast can you construct a small list of strings in C for Python?]]></title>
        <id>https://lemire.me/blog/?p=21316</id>
        <link href="https://lemire.me/blog/2024/05/09/how-fast-can-construct-small-list-of-strings-in-c-for-python/"/>
        <updated>2024-05-09T03:55:45.000Z</updated>
        <summary type="html"><![CDATA[Python is probably the most popular programming language in the world right now. Python is easy to extend using C code. You may want to return from Python a small data structure. When crossing from C to Python, there is an overhead. Thus, if performance is a concern, you do not want to return lots … Continue reading How fast can you construct a small list of strings in C for Python?]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Should Node.js be built with ClangCL under Windows?]]></title>
        <id>https://lemire.me/blog/?p=21309</id>
        <link href="https://lemire.me/blog/2024/05/02/should-node-js-be-built-with-clangcl-under-windows/"/>
        <updated>2024-05-02T19:23:11.000Z</updated>
        <summary type="html"><![CDATA[Under Windows, when using Visual Studio to build C++ code, there are two possible compiler strategies. The Visual Studio compiler (often referred to as MSVC) is the default compiler provided by Microsoft for Windows development. In Debug mode, the regular Visual Studio compiler produces faster compilation times and more performant code compared to ClangCL. ClangCL … Continue reading Should Node.js be built with ClangCL under Windows?]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Brooklyn Botanical Garden]]></title>
        <id>https://thenumb.at/BBG/</id>
        <link href="https://thenumb.at/BBG/"/>
        <updated>2024-05-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Brooklyn Botanical Garden, New York, NY, 2024]]></summary>
        <author>
            <name>Max Slater</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Careful with Pair-of-Registers instructions on Apple Silicon]]></title>
        <id>https://lemire.me/blog/?p=21297</id>
        <link href="https://lemire.me/blog/2024/04/29/careful-with-pair-of-registers-instructions-on-apple-silicon/"/>
        <updated>2024-04-29T00:32:38.000Z</updated>
        <summary type="html"><![CDATA[Egor Bogatov is an engineer working on C# compiler technology at Microsoft. He had an intriguing remark about a performance regression on Apple hardware following what appears to be an optimization. The .NET 9.0 runtime introduced the optimization where two loads (ldr) could be combined into a single load (ldp). It is a typical peephole … Continue reading Careful with Pair-of-Registers instructions on Apple Silicon]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Large language models (e.g., ChatGPT) as research assistants]]></title>
        <id>https://lemire.me/blog/?p=21288</id>
        <link href="https://lemire.me/blog/2024/04/27/large-language-models-e-g-chatgpt-as-research-assistants/"/>
        <updated>2024-04-27T00:05:24.000Z</updated>
        <summary type="html"><![CDATA[Software can beat human beings at most games… from Chess to Go, and even poker. Large language models like GPT-4 offered through services such as ChatGPT allow us to solve a new breed of problems. GPT-4 can beat 90% of human beings at the bar exam. Artificial intelligence can match math Olympians. The primary skills … Continue reading Large language models (e.g., ChatGPT) as research assistants]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How do you recognize an expert?]]></title>
        <id>https://lemire.me/blog/?p=21278</id>
        <link href="https://lemire.me/blog/2024/04/21/how-do-you-recognize-an-expert/"/>
        <updated>2024-04-21T17:35:28.000Z</updated>
        <summary type="html"><![CDATA[Go back to the roots: experience. An expert is someone who has repeatedly solved the concrete problem you are encountering. If your toilet leaks, an experienced plumber is an expert. An expert has a track record and has had to face the consequences of their work. Failing is part of what makes an expert: any … Continue reading How do you recognize an expert?]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How quickly can you break a long string into lines?]]></title>
        <id>https://lemire.me/blog/?p=21272</id>
        <link href="https://lemire.me/blog/2024/04/19/how-quickly-can-you-break-a-long-string-into-lines/"/>
        <updated>2024-04-19T21:25:21.000Z</updated>
        <summary type="html"><![CDATA[Suppose that you receive a long string and you need to break it down into lines. Consider the simplified problems where you need to break the string into segments of (say) 72 characters. It is a relevant problem if your string is a base64 string or a Fortran formatted statement. The problem could be a … Continue reading How quickly can you break a long string into lines?]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Versions 2.0.4 and 1.6.20 released]]></title>
        <id>https://nim-lang.org//blog/2024/04/16/versions-1620-204-released.html</id>
        <link href="https://nim-lang.org//blog/2024/04/16/versions-1620-204-released.html"/>
        <updated>2024-04-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Nim team is happy to announce two releases:
the latest Nim, version 2.0.4
LTS release, version 1.6.20
For the majority of our users, v2.0.4 contains 23 commits and brings bugfixes and improvements to Nim 2.0.2, released four months ago.
For those users who haven’t switched to Nim v2.0 yet, we have released the ninth patch release for Nim 1.6.x.
It is a small release with 13 commits.
Installing Nim 2.0.4
New users
Check out if the package manager of your OS already ships version 2.0.4 or
install it as described here.
Existing users
If you have installed a previous version of Nim using choosenim,
getting Nim 2.0.4 is as easy as:
$ choosenim 2.0.4

If you are on OSX ARM, choosenim will not work for you.
Please choose an alternative method of installing or updating.
Alternatively, you can …]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Interesting Links for April 2024]]></title>
        <id>https://notes.abhinavsarkar.net/2024/links-04</id>
        <link href="https://notes.abhinavsarkar.net/2024/links-04"/>
        <updated>2024-04-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Here are some interesting things I recently read on the internet:</p>

<ul>
  <li>
    <p><a href="https://web.archive.org/web/3/https://blog.brycekerley.net/2024/04/01/p-langs.html">A lazy and flippant classification of programming languages</a> <br />
Bryce Kerley classifies some popular programming languages into categories with single letter names, with hilarious effects.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://benhoyt.com/writings/go-1brc/">The One Billion Row Challenge in Go: from 1m45s to 3.4s in nine solutions</a> <br />
Ben Hoyt optimizes a Golang program to be thirty times faster.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://tonsky.me/blog/js-bloat/">JavaScript Bloat in 2024</a> <br />
Nikita Prokopov gets in touch with modern front-end development, and hates how bloated everything is.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://andrewkelley.me/post/why-we-cant-have-nice-software.html">Why We Can’t Have Nice Software</a> <br />
Andrew Kelley muses about the bad state of current software, and attributes it to human greed.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://tratt.net/laurie/blog/2024/faster_shell_startup_with_shell_switching.html">Faster Shell Startup With Shell Switching</a> <br />
Laurence Tratt uses profiling to figure out a trick to start shells faster.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://buttondown.email/hillelwayne/archive/when-would-you-ever-want-bubblesort/">When would you ever want bubblesort?</a> <br />
Hillel Wayne finally finds the answer to the age-old oft-asked question.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://vfoley.xyz/parsing/">You already know how to parse by hand</a> <br />
Vincent Foley lets you know how to parse by hand, but then you already knew that.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://compiler.club/compiling-lambda-calculus/">Compiling Lambda Calculus</a> <br />
Colin James compiles Lambda Calculus to LLVM IR, for fun and no profit.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://dubroy.com/blog/three-ways-of-handling-user-input">Three ways of handling user input</a> <br />
Patrick Dubroy surveys different ways of handling user input: callbacks, polling and magic.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://hirrolot.github.io/posts/why-static-languages-suffer-from-complexity.html">Why Static Languages Suffer From Complexity</a> <br />
Tima Kinsart argues that statically typed languages are complex because metaprogramming them is hard.</p>
  </li>
</ul>

<p>Like, share, or comment on this post on <a href="https://fantastic.earth/@abnv/112281600001282969" class="mastodon-link">Mastodon</a>.</p>]]></summary>
        <author>
            <name>Posts on abhinavsarkar.net</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Speculations on arenas and custom strings in C++]]></title>
        <id>https://nullprogram.com/blog/2024/04/14/</id>
        <link href="https://nullprogram.com/blog/2024/04/14/"/>
        <updated>2024-04-14T00:39:18.000Z</updated>
        <summary type="html"><![CDATA[My techniques with arena allocation and strings are
oriented around C. I’m always looking for a better way, and lately I’ve
been experimenting with building them using C++ features. What are the
trade-offs? Are the benefits worth the costs? In this article I lay out my
goals, review implementation possibilities, and discuss my findings.
Following along will require familiarity with those previous two articles.
Some of C++ is beyond my mental capabilities, and so I cannot wield those
parts effectively. Other parts I can wrap my head around, but it
requires substantial effort and the inevitable mistakes are difficult to
debug. So a general goal is to minimize contact with that complexity, only
touching a few higher-value features that I can use confidently.
Existing practice is unimportant. …]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Science and Technology links (April 13 2024)]]></title>
        <id>https://lemire.me/blog/?p=21254</id>
        <link href="https://lemire.me/blog/2024/04/13/science-and-technology-links-april-13-2024/"/>
        <updated>2024-04-13T22:31:25.000Z</updated>
        <summary type="html"><![CDATA[Our computer hardware exchange data using a standard called PCI Express. Your disk, your network and your GPU are limited by what PCI Express can do. Currently, it means that you are limited to a few gigabytes per second of bandwidth. PCI Express is about to receive a big performance boost in 2025 when PCI … Continue reading Science and Technology links (April 13 2024)]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Greatest common divisor,  the extended Euclidean algorithm, and speed!]]></title>
        <id>https://lemire.me/blog/?p=21250</id>
        <link href="https://lemire.me/blog/2024/04/13/greatest-common-divisor-the-extended-euclidean-algorithm-and-speed/"/>
        <updated>2024-04-13T20:56:11.000Z</updated>
        <summary type="html"><![CDATA[We sometimes need to find the greatest common divisor between two integers in software. The fastest way to compute the greatest common divisor might be the binary Euclidean algorithm. In C++20, it can be implemented generically as follows: template <typename int_type> int_type binary_gcd(int_type u, int_type v) { if (u == 0) { return v; } … Continue reading Greatest common divisor,  the extended Euclidean algorithm, and speed!]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
</feed>