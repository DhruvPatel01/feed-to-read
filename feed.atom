<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2023-09-24T00:53:50.382Z</id>
    <title>osmos::feed</title>
    <updated>2023-09-24T00:53:50.382Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Parsing integers quickly with AVX-512]]></title>
        <id>https://lemire.me/blog/?p=20836</id>
        <link href="https://lemire.me/blog/2023/09/22/parsing-integers-quickly-with-avx-512/"/>
        <updated>2023-09-22T21:50:14.000Z</updated>
        <summary type="html"><![CDATA[If I give a programmer a string such as "9223372036854775808" and I ask them to convert it to an integer, they might do the following in C++: std::string s = .... uint64_t val; auto [ptr, ec] = std::from_chars(s.data(), s.data() + s.size(), val); if (ec != std::errc()) {} // I have an error ! // val … Continue reading Parsing integers quickly with AVX-512]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mastering Nim, 2nd edition]]></title>
        <id>https://nim-lang.org//blog/2023/09/19/mastering-nim.html</id>
        <link href="https://nim-lang.org//blog/2023/09/19/mastering-nim.html"/>
        <updated>2023-09-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Discover the secret of Nim!
The definite guide on Nim!
Written by the inventor himself.
Now with updated content for version 2.0 which solves the biggest pain point of Nim 1.0, shared memory in a multi-threaded setting.
Please have a look at its cover image:
But Nim’s logo is a crown!
Where is the crown?
That’s the secret of Nim!
Send us your reply to support@nim-lang.org until December 6th 2023.
Among the correct answers we will select 3 winners by randomization.
The winners will receive a signed hardcover!
“Mastering Nim” is available here:
amazon.com
amazon.de]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Transcoding Unicode strings at crazy speeds with AVX-512]]></title>
        <id>https://lemire.me/blog/?p=20820</id>
        <link href="https://lemire.me/blog/2023/09/13/transcoding-unicode-strings-at-crazy-speeds-with-avx-512/"/>
        <updated>2023-09-13T16:00:30.000Z</updated>
        <summary type="html"><![CDATA[In software, we store strings of text as arrays of bytes in memory using one of the Unicode Transformation Formats (UTF), the most popular being UTF-8 and UTF-16. Windows, Java, C# and other systems common languages and systems default on UTF-16, whereas other systems and most of the web relies on UTF-8. There are benefits … Continue reading Transcoding Unicode strings at crazy speeds with AVX-512]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Comparative Analysis]]></title>
        <id>https://matklad.github.io/2023/09/13/comparative-analysis.html</id>
        <link href="https://matklad.github.io/2023/09/13/comparative-analysis.html"/>
        <updated>2023-09-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Most languages provide 6 comparison operators:]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Locating ‘identifiers’ quickly (ARM NEON edition)]]></title>
        <id>https://lemire.me/blog/?p=20798</id>
        <link href="https://lemire.me/blog/2023/09/04/locating-identifiers-quickly-arm-neon-edition/"/>
        <updated>2023-09-04T00:46:18.000Z</updated>
        <summary type="html"><![CDATA[A common problem in parsing is that you want to find all identifiers (e.g., variable names, function names) in a document quickly. There are typically some fixed rules. For example, it is common to allow ASCII letters and digits as well as characters like ‘_’ in the identifier, but to forbid some characters at the … Continue reading Locating ‘identifiers’ quickly (ARM NEON edition)]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Science and Technology links (September 2 2023)]]></title>
        <id>https://lemire.me/blog/?p=20790</id>
        <link href="https://lemire.me/blog/2023/09/02/science-and-technology-links-september-2-2023/"/>
        <updated>2023-09-02T18:30:10.000Z</updated>
        <summary type="html"><![CDATA[Physicists have a published a paper with 5154 authors. The list of authors takes 24 pages out of the 33 pages. The lesson is that if someone tell you that they have published an important paper, you should ask how many authors there were and what their exact role was. Vegatarians are at higher risk … Continue reading Science and Technology links (September 2 2023)]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[This Month with Nim: July and August 2023]]></title>
        <id>https://nim-lang.org//blog/2023/09/01/this-month-with-nim.html</id>
        <link href="https://nim-lang.org//blog/2023/09/01/this-month-with-nim.html"/>
        <updated>2023-09-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[HappyX
Author: ethosa
HappyX is a macro-oriented full-stack web framework that combines frontend and backend features.
With HappyX you can write single page applications (SPA),
static site generation (SSG),
and server side rendering (SSR) web applications.
It provides the same syntax for all of these solutions:
import happyx

serve("127.0.0.1", 5000):
  "/":
    "Hello, world!"

or:
import happyx

appRoutes("app"):
  "/":
    "Hello, world!"

Included is a command line interface hpx.
This enables easy creation of projects for Nim and Python.
A non exhaustive list of features is as follows:
Multiple server options (built-in asynchttpserver, microasynchttpserver, httpbeast and httpx)
Hot code reloading (now only for SPA)
Debug logging with -d:debug
Powerful routing that includes path params …]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zero Configuration Service Mesh with On-Demand Cluster Discovery]]></title>
        <id>https://medium.com/p/ac6483b52a51</id>
        <link href="https://netflixtechblog.com/zero-configuration-service-mesh-with-on-demand-cluster-discovery-ac6483b52a51?source=rss----2615bd06b42e---4"/>
        <updated>2023-08-29T23:08:45.000Z</updated>
        <summary type="html"><![CDATA[Netflix’s service mesh adoption: history, motivations, and how we worked with the Envoy community on a feature to streamline mesh adoption]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to link identical function names from different DLLs]]></title>
        <id>https://nullprogram.com/blog/2023/08/27/</id>
        <link href="https://nullprogram.com/blog/2023/08/27/"/>
        <updated>2023-08-27T01:46:31.000Z</updated>
        <summary type="html"><![CDATA[For the typical DLL function call you declare the function prototype (via
header file), you inform the link editor (ld, link) that the DLL
exports a symbol with that name (import library), it matches the declared
name with this export, and it becomes an import in your program’s import
table. What happens when two different DLLs export the same symbol? The
link editor will pick the first found. But what if you want to use both
exports? If they have the same name, how could program or link editor
distinguish them? In this article I’ll demonstrate a technique to resolve
this by creating a program which links with and directly uses two
different C runtimes (CRTs) simultaneously.
In PE executable images, an import isn’t just a symbol, but a tuple
of DLL name and symbol. For human display, a tup…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
</feed>