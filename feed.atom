<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2024-02-25T00:55:07.671Z</id>
    <title>osmos::feed</title>
    <updated>2024-02-25T00:55:07.671Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Bloom Filters]]></title>
        <id>https://samwho.dev/bloom-filters/</id>
        <link href="https://samwho.dev/bloom-filters/"/>
        <updated>2024-02-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[.bf {
  width: 100%;
  height: 150px;
}

@media only screen and (min-width: 320px) and (max-width: 479px) {
  .bf {
    height: 200px;
  }
}

@media only screen and (min-width: 480px) and (max-width: 676px) {
  .bf {
    height: 200px;
  }
 }

@media only screen and (min-width: 677px) and (max-width: 991px) {
  .bf {
    height: 150px;
  }
}

form {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: stretch;
}

input {
    border: 1px solid rgb(119, 119, 119);
    padding: 0.25rem;
    border-radius: 0.25rem;
    height: 2em;
    line-height: 2em;
}

.aside {
  padding: 2rem;
  width: 100vw;
  position: relative;
  margin-left: -50vw;
  left: 50%;
  background-color: #eeeeee;

  display: flex;
  align-items: center;
  flex-direction: column;
}

.aside > * …]]></summary>
        <author>
            <name>samwho.dev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sequential A/B Testing Keeps the World Streaming Netflix
Part 1: Continuous Data]]></title>
        <id>https://medium.com/p/cba6c7ed49df</id>
        <link href="https://netflixtechblog.com/sequential-a-b-testing-keeps-the-world-streaming-netflix-part-1-continuous-data-cba6c7ed49df?source=rss----2615bd06b42e---4"/>
        <updated>2024-02-13T19:10:28.000Z</updated>
        <summary type="html"><![CDATA[Michael Lindon, Chris Sanden, Vache Shirikian, Yanjun Liu, Minal Mishra, Martin Tingley]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing SafeTest: A Novel Approach to Front End Testing]]></title>
        <id>https://medium.com/p/37f9f88c152d</id>
        <link href="https://netflixtechblog.com/introducing-safetest-a-novel-approach-to-front-end-testing-37f9f88c152d?source=rss----2615bd06b42e---4"/>
        <updated>2024-02-13T16:07:48.000Z</updated>
        <summary type="html"><![CDATA[by Moshe Kolodny]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Window: Live, Constant Time Grep]]></title>
        <id>https://matklad.github.io/2024/02/10/window-live-constant-time-grep.html</id>
        <link href="https://matklad.github.io/2024/02/10/window-live-constant-time-grep.html"/>
        <updated>2024-02-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this post, I describe the design of window --- a small
grep-like utility I implemented in 500 lines of Rust. The utility itself is likely not that
interesting --- I bet some greybeared can implement an equivalent in 5 lines of bash. But the
design principles behind it might be interesting --- this small utility manages to combine core
ideas of rust-analyzer and TigerBeetle!]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[An improved chkstk function on Windows]]></title>
        <id>https://nullprogram.com/blog/2024/02/05/</id>
        <link href="https://nullprogram.com/blog/2024/02/05/"/>
        <updated>2024-02-05T17:56:05.000Z</updated>
        <summary type="html"><![CDATA[If you’ve spent much time developing with Mingw-w64 you’ve likely seen the
symbol ___chkstk_ms, perhaps in an error message. It’s a little piece of
runtime provided by GCC via libgcc which ensures enough of the stack is
committed for the caller’s stack frame. The “function” uses a custom ABI
and is implemented in assembly. So is the subject of this article, a
slightly improved implementation soon to be included in w64devkit as
libchkstk (-lchkstk).
The MSVC toolchain has an identical (x64) or similar (x86) function named
__chkstk. We’ll discuss that as well, and w64devkit will include x86 and
x64 implementations, useful when linking with MSVC object files. The new
x86 __chkstk in particular is also better than the MSVC definition.
A note on spelling: ___chkstk_ms is spelled with three unde…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Computing] The Bootstrapping Exam: Escaping from “Trusting Trust”]]></title>
        <id>https://www.devever.net/~hl/bootstrapping-exam</id>
        <link href="https://www.devever.net/~hl/bootstrapping-exam"/>
        <updated>2024-02-04T11:37:00.000Z</updated>
        <summary type="html"><![CDATA[<div type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p xmlns="http://www.w3.org/1999/xhtml">The following is an “exam”. To my knowledge, nobody has ever passed it, as it
is an  difficult challenge. But I am firmly convinced it is
possible, and it makes for an interesting discussion.<em>extremely</em></p></div></div>]]></summary>
        <author>
            <name>devever.net/~hl</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Hμblog] 37C3 talk recording: Adventures in Reverse Engineering Broadcom NIC Firmware]]></title>
        <id>https://www.devever.net/~hl/u/202402#03a</id>
        <link href="https://www.devever.net/~hl/u/202402#03a"/>
        <updated>2024-02-03T07:31:16.000Z</updated>
        <summary type="html"><![CDATA[<div type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><ul><li><a href="https://media.ccc.de/v/37c3-11781-adventures_in_reverse_engineering_broadcom_nic_firmware">37C3 talk recording: Adventures in Reverse Engineering Broadcom NIC Firmware</a></li></ul><p xmlns="http://www.w3.org/1999/xhtml">For those that missed it, a recording of my talk at 37C3 can be found here.</p></div></div>]]></summary>
        <author>
            <name>devever.net/~hl</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nim Community Survey 2023 Results]]></title>
        <id>https://nim-lang.org//blog/2024/01/31/community-survey-results-2023.html</id>
        <link href="https://nim-lang.org//blog/2024/01/31/community-survey-results-2023.html"/>
        <updated>2024-01-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Nim community survey 2023 has been open for two months, and we have received 662 responses – we think this is a large enough sample to draw conclusions about our users and their habits.
Before we go into details, we would like to thank all the people who took the time to respond.
We really appreciate the feedback!
The goal of this survey was primarily to determine how our community is using Nim, in order to better understand how we should be improving it.
Do you use Nim?
Based on the answer to this question, the respondents were divided into two groups that each received a separate set of questions.

Approximately three quarters of the respondents use Nim (33% frequently, 40% occasionally), while the remaining quarter is divided between people who never used Nim (10%) and people who st…]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Two handy GDB breakpoint tricks]]></title>
        <id>https://nullprogram.com/blog/2024/01/28/</id>
        <link href="https://nullprogram.com/blog/2024/01/28/"/>
        <updated>2024-01-28T21:56:07.000Z</updated>
        <summary type="html"><![CDATA[Over the past couple months I’ve discovered a couple of handy tricks for
working with GDB breakpoints. I figured these out on my own, and I’ve not
seen either discussed elsewhere, so I really ought to share them.
Continuable assertions
The assert macro in typical C implementations leaves a lot to be
desired, as does raise and abort, so I’ve suggested
alternative definitions that behave better under debuggers:

#define assert(c)  while (!(c)) __builtin_trap()
#define assert(c)  while (!(c)) __builtin_unreachable()
#define assert(c)  while (!(c)) *(volatile int *)0 = 0


Each serves a slightly different purpose but still has the most
important property: Immediately halt the program directly on the defect.
None have an occasionally useful secondary property: Optionally allow the
program to co…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Computing] I hacked a train toilet]]></title>
        <id>https://www.devever.net/~hl/traintoilet</id>
        <link href="https://www.devever.net/~hl/traintoilet"/>
        <updated>2024-01-28T09:08:00.000Z</updated>
        <summary type="html"><![CDATA[<div type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p xmlns="http://www.w3.org/1999/xhtml">The other day I rode on a Class 800 train in the UK. This is the “Intercity
Express” train designed to replace the venerable HST (Intercity 125 with Mark 3
coaches, a train of which I have many memories and which I will dearly miss).</p></div></div>]]></summary>
        <author>
            <name>devever.net/~hl</name>
        </author>
    </entry>
</feed>