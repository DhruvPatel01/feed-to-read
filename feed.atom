<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2023-10-01T00:58:21.142Z</id>
    <title>osmos::feed</title>
    <updated>2023-10-01T00:58:21.142Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[An easy-to-implement, arena-friendly hash map]]></title>
        <id>https://nullprogram.com/blog/2023/09/30/</id>
        <link href="https://nullprogram.com/blog/2023/09/30/"/>
        <updated>2023-09-30T23:18:40.000Z</updated>
        <summary type="html"><![CDATA[My last article had tips for for arena allocation. This next
article demonstrates a technique for building bespoke hash maps that
compose nicely with arena allocation. In addition, they’re fast, simple,
and automatically scale to any problem that could reasonably be solved
with an in-memory hash map. To avoid resizing — both to better support
arenas and to simplify implementation — they have slightly above average
memory requirements. The design, which we’re calling a hash-trie, is the
result of fruitful collaboration with NRK, whose sibling article
includes benchmarks. It’s my new favorite data structure, and has proven
incredibly useful. With a couple well-placed acquire/release atomics, we
can even turn it into a lock-free concurrent hash map.
I’ve written before about MSI hash tables, …]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Arena allocator tips and tricks]]></title>
        <id>https://nullprogram.com/blog/2023/09/27/</id>
        <link href="https://nullprogram.com/blog/2023/09/27/"/>
        <updated>2023-09-27T03:58:59.000Z</updated>
        <summary type="html"><![CDATA[This article was discussed on Hacker News.
Over the past year I’ve refined my approach to arena allocation.
With practice, it’s effective, simple, and fast; typically as easy to use
as garbage collection but without the costs. Depending on need, an
allocator can weigh just 7–25 lines of code — perfect when lacking a
runtime. With the core details of my own technique settled, now is a
good time to document and share lessons learned. This is certainly not the
only way to approach arena allocation, but these are practices I’ve worked
out to simplify programs and reduce mistakes.
An arena is a memory buffer and an offset into that buffer, initially
zero. To allocate an object, grab a pointer at the offset, advance the
offset by the size of the object, and return the pointer. There’s a little
m…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Parsing integers quickly with AVX-512]]></title>
        <id>https://lemire.me/blog/?p=20836</id>
        <link href="https://lemire.me/blog/2023/09/22/parsing-integers-quickly-with-avx-512/"/>
        <updated>2023-09-22T21:50:14.000Z</updated>
        <summary type="html"><![CDATA[If I give a programmer a string such as "9223372036854775808" and I ask them to convert it to an integer, they might do the following in C++: std::string s = .... uint64_t val; auto [ptr, ec] = std::from_chars(s.data(), s.data() + s.size(), val); if (ec != std::errc()) {} // I have an error ! // val … Continue reading Parsing integers quickly with AVX-512]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mastering Nim, 2nd edition]]></title>
        <id>https://nim-lang.org//blog/2023/09/19/mastering-nim.html</id>
        <link href="https://nim-lang.org//blog/2023/09/19/mastering-nim.html"/>
        <updated>2023-09-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Discover the secret of Nim!
The definite guide on Nim!
Written by the inventor himself.
Now with updated content for version 2.0 which solves the biggest pain point of Nim 1.0, shared memory in a multi-threaded setting.
Please have a look at its cover image:
But Nim’s logo is a crown!
Where is the crown?
That’s the secret of Nim!
Send us your reply to support@nim-lang.org until December 6th 2023.
Among the correct answers we will select 3 winners by randomization.
The winners will receive a signed hardcover!
“Mastering Nim” is available here:
amazon.com
amazon.de]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Transcoding Unicode strings at crazy speeds with AVX-512]]></title>
        <id>https://lemire.me/blog/?p=20820</id>
        <link href="https://lemire.me/blog/2023/09/13/transcoding-unicode-strings-at-crazy-speeds-with-avx-512/"/>
        <updated>2023-09-13T16:00:30.000Z</updated>
        <summary type="html"><![CDATA[In software, we store strings of text as arrays of bytes in memory using one of the Unicode Transformation Formats (UTF), the most popular being UTF-8 and UTF-16. Windows, Java, C# and other systems common languages and systems default on UTF-16, whereas other systems and most of the web relies on UTF-8. There are benefits … Continue reading Transcoding Unicode strings at crazy speeds with AVX-512]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Comparative Analysis]]></title>
        <id>https://matklad.github.io/2023/09/13/comparative-analysis.html</id>
        <link href="https://matklad.github.io/2023/09/13/comparative-analysis.html"/>
        <updated>2023-09-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Most languages provide 6 comparison operators:]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Locating ‘identifiers’ quickly (ARM NEON edition)]]></title>
        <id>https://lemire.me/blog/?p=20798</id>
        <link href="https://lemire.me/blog/2023/09/04/locating-identifiers-quickly-arm-neon-edition/"/>
        <updated>2023-09-04T00:46:18.000Z</updated>
        <summary type="html"><![CDATA[A common problem in parsing is that you want to find all identifiers (e.g., variable names, function names) in a document quickly. There are typically some fixed rules. For example, it is common to allow ASCII letters and digits as well as characters like ‘_’ in the identifier, but to forbid some characters at the … Continue reading Locating ‘identifiers’ quickly (ARM NEON edition)]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Science and Technology links (September 2 2023)]]></title>
        <id>https://lemire.me/blog/?p=20790</id>
        <link href="https://lemire.me/blog/2023/09/02/science-and-technology-links-september-2-2023/"/>
        <updated>2023-09-02T18:30:10.000Z</updated>
        <summary type="html"><![CDATA[Physicists have a published a paper with 5154 authors. The list of authors takes 24 pages out of the 33 pages. The lesson is that if someone tell you that they have published an important paper, you should ask how many authors there were and what their exact role was. Vegatarians are at higher risk … Continue reading Science and Technology links (September 2 2023)]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
</feed>