<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2023-11-12T00:56:23.082Z</id>
    <title>osmos::feed</title>
    <updated>2023-11-12T00:56:23.082Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[The Next Step in Personalization: Dynamic Sizzles]]></title>
        <id>https://medium.com/p/4dc4ce2011ef</id>
        <link href="https://netflixtechblog.com/the-next-step-in-personalization-dynamic-sizzles-4dc4ce2011ef?source=rss----2615bd06b42e---4"/>
        <updated>2023-11-08T20:56:53.000Z</updated>
        <summary type="html"><![CDATA[Authors:Bruce Wobbe, Leticia Kwok]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Generating arrays at compile-time in C++ with lambdas]]></title>
        <id>https://lemire.me/blog/?p=20933</id>
        <link href="https://lemire.me/blog/2023/11/07/generating-arrays-at-compile-time-in-c-with-lambdas/"/>
        <updated>2023-11-07T20:54:12.000Z</updated>
        <summary type="html"><![CDATA[Suppose that you want to check whether a character in C++ belongs to a fixed set, such as ‘\0’, ‘\x09’, ‘\x0a’,’\x0d’, ‘ ‘, ‘#’, ‘/’, ‘:’, ‘<‘, ‘>’, ‘?’, ‘@’, ‘[‘, ‘\\’, ‘]’, ‘^’, ‘|’. A simple way is to generate a 256-byte array of Boolean values and lookup the value. This approach is sometimes … Continue reading Generating arrays at compile-time in C++ with lambdas]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Data Oriented Blogging]]></title>
        <id>https://matklad.github.io/2023/11/07/dta-oriented-blogging.html</id>
        <link href="https://matklad.github.io/2023/11/07/dta-oriented-blogging.html"/>
        <updated>2023-11-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Wherein I describe the setup of this blog. The main take away from the post are not specific
technical tools, but the underlying principles and ideas, which I wish I had articulated earlier.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building In-Video Search]]></title>
        <id>https://medium.com/p/936766f0017c</id>
        <link href="https://netflixtechblog.com/building-in-video-search-936766f0017c?source=rss----2615bd06b42e---4"/>
        <updated>2023-11-06T17:35:19.000Z</updated>
        <summary type="html"><![CDATA[Empowering video editors with multimodal machine learning to discover perfect moments across the entire Netflix catalog]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Streaming SQL in Data Mesh]]></title>
        <id>https://medium.com/p/0d83f5a00d08</id>
        <link href="https://netflixtechblog.com/streaming-sql-in-data-mesh-0d83f5a00d08?source=rss----2615bd06b42e---4"/>
        <updated>2023-11-03T21:48:50.000Z</updated>
        <summary type="html"><![CDATA[Democratizing Stream Processing @ Netflix]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Computing] Expect-CT Lite: A humble proposal for minimal CT enforcement in TLS certificates]]></title>
        <id>https://www.devever.net/~hl/expect-ct-lite</id>
        <link href="https://www.devever.net/~hl/expect-ct-lite"/>
        <updated>2023-10-28T14:07:00.000Z</updated>
        <summary type="html"><![CDATA[<div type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p xmlns="http://www.w3.org/1999/xhtml">Last week we witnessed the , most likely by a Western nation-state. While it's  to any
attack which was carried out in this incident, one thing that has been brought
to my attention in the aftermath of this is that Certificate Transparency
logging remains optional for CAs.<a href="xmpp-incident">discovery of the compromise of an XMPP
service</a><a href="xmpp-incident-2#context-of-certificate-transparency">not
directly related</a></p></div></div>]]></summary>
        <author>
            <name>devever.net/~hl</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Computing] Mitigating the Hetzner/Linode XMPP.ru MitM interception incident, part 2: XMPP-specific mitigations]]></title>
        <id>https://www.devever.net/~hl/xmpp-incident-2</id>
        <link href="https://www.devever.net/~hl/xmpp-incident-2"/>
        <updated>2023-10-28T14:06:00.000Z</updated>
        <summary type="html"><![CDATA[<div type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p xmlns="http://www.w3.org/1999/xhtml">I've had a few comments in response to my previous article,  which have provided
XMPP-specific suggestions for how this could have been mitigated.<a href="https://www.devever.net/~hl/xmpp-incident">Mitigating the
Hetzner/Linode XMPP.ru MitM interception
incident</a></p></div></div>]]></summary>
        <author>
            <name>devever.net/~hl</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kubernetes And Kernel Panics]]></title>
        <id>https://medium.com/p/ed620b9c6225</id>
        <link href="https://netflixtechblog.com/kubernetes-and-kernel-panics-ed620b9c6225?source=rss----2615bd06b42e---4"/>
        <updated>2023-10-27T16:05:58.000Z</updated>
        <summary type="html"><![CDATA[How Netflix’s Container Platform Connects Linux Kernel Panics to Pods]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Appending to an std::string character-by-character: how does the capacity grow?]]></title>
        <id>https://lemire.me/blog/?p=20907</id>
        <link href="https://lemire.me/blog/2023/10/23/appending-to-an-stdstring-character-by-character-how-does-the-capacity-grow/"/>
        <updated>2023-10-23T13:33:37.000Z</updated>
        <summary type="html"><![CDATA[In C++, suppose that you append to a string one character at a time: while(my_string.size() <= 10'000'000) { my_string += "a"; } In theory, it might be possible for the C++ runtime library to implement this routine as the creation of a new string with each append: it could allocate a new memory region that … Continue reading Appending to an std::string character-by-character: how does the capacity grow?]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unified Versus Split Diff]]></title>
        <id>https://matklad.github.io/2023/10/23/unified-vs-split-diff.html</id>
        <link href="https://matklad.github.io/2023/10/23/unified-vs-split-diff.html"/>
        <updated>2023-10-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Which is better for code reviews, a unified diff or a split diff?]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Computing] Mitigating the Hetzner/Linode XMPP.ru MitM interception incident]]></title>
        <id>https://www.devever.net/~hl/xmpp-incident</id>
        <link href="https://www.devever.net/~hl/xmpp-incident"/>
        <updated>2023-10-20T20:30:00.000Z</updated>
        <summary type="html"><![CDATA[<div type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p xmlns="http://www.w3.org/1999/xhtml">(If you just want some recommendations for what to do, .)<a href="#recommendations">skip down to the Recommendations section below</a></p></div></div>]]></summary>
        <author>
            <name>devever.net/~hl</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[For processing strings, streams in C++ can be slow]]></title>
        <id>https://lemire.me/blog/?p=20899</id>
        <link href="https://lemire.me/blog/2023/10/19/for-processing-strings-streams-in-c-can-be-slow/"/>
        <updated>2023-10-19T01:55:34.000Z</updated>
        <summary type="html"><![CDATA[The C++ library has long been organized around stream classes, at least when it comes to reading and parsing strings. But streams can be surprisingly slow. For example, if you want to parse numbers, then this C++ routine is close to being the worst possible choice for performance: std::stringstream in(mystring); while(in >> x) { sum … Continue reading For processing strings, streams in C++ can be slow]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How many billions of transistors in your iPhone processor?]]></title>
        <id>https://lemire.me/blog/?p=20892</id>
        <link href="https://lemire.me/blog/2023/10/18/how-many-billions-of-transistors-in-your-iphone-processor/"/>
        <updated>2023-10-18T13:51:28.000Z</updated>
        <summary type="html"><![CDATA[In about 10 years, Apple has multiplied by 19 the number of transistors in its mobile processors. It corresponds roughly to a steady rate of improvement of 34% per year on the number of transistors, or a doubling every 2.5 years. In real dollars, an iPhone has roughly a constant price: the price tag of … Continue reading How many billions of transistors in your iPhone processor?]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unless Explicitly Specified Otherwise, Open Source Software With Users Carries Moral Obligations]]></title>
        <id>https://matklad.github.io/2023/10/18/obligations.html</id>
        <link href="https://matklad.github.io/2023/10/18/obligations.html"/>
        <updated>2023-10-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[My thoughts on the topic of whether maintainers owe you anything. Speaking as an author, a maintainer,
a user of, and a contributor to open-source software.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Randomness in programming (with Go code)]]></title>
        <id>https://lemire.me/blog/?p=20886</id>
        <link href="https://lemire.me/blog/2023/10/17/randomness-in-programming-with-go-code/"/>
        <updated>2023-10-17T00:15:32.000Z</updated>
        <summary type="html"><![CDATA[Computer software is typically deterministic on paper: if you run twice the same program with the same inputs, you should get the same outputs. In practice, the complexity of modern computing makes it unlikely that you could ever run twice the same program and get exactly the same result, down to the exact same execution … Continue reading Randomness in programming (with Go code)]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
</feed>