<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2025-02-16T01:14:16.972Z</id>
    <title>osmos::feed</title>
    <updated>2025-02-16T01:14:16.972Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Introducing Impressions at Netflix]]></title>
        <id>https://medium.com/p/e2b67c88c9fb</id>
        <link href="https://netflixtechblog.com/introducing-impressions-at-netflix-e2b67c88c9fb?source=rss----2615bd06b42e---4"/>
        <updated>2025-02-15T01:13:20.000Z</updated>
        <summary type="html"><![CDATA[Part 1: Creating the Source of Truth for Impressions]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AVX-512 gotcha: avoid compressing words to memory with AMD Zen 4 processors]]></title>
        <id>https://lemire.me/blog/?p=21895</id>
        <link href="https://lemire.me/blog/2025/02/14/avx-512-gotcha-avoid-compressing-words-to-memory-with-amd-zen-4-processors/"/>
        <updated>2025-02-14T21:27:29.000Z</updated>
        <summary type="html"><![CDATA[Convention computer instructions operate on a single piece of data at once (e.g., they can negate an integer or add two integers). For better performance, CPU vendors add support for SIMD instructions. SIMD stands for Single Instruction, Multiple Data. It is a type of parallel processing where a single operation is executed simultaneously on multiple … Continue reading AVX-512 gotcha: avoid compressing words to memory with AMD Zen 4 processors]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[WIP] Binary search variants and the effects of batching]]></title>
        <id>https://curiouscoding.nl/posts/binsearch/</id>
        <link href="https://curiouscoding.nl/posts/binsearch/"/>
        <updated>2025-02-11T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
1 Optimizing Binary Search And Interpolation Search

1.1 Problem statement
1.2 Inspiration and background
1.3 Benchmarking setup
2 Baseline

2.1 A note on power-of-two array sizes
3 Alternative memory layout

3.1 Naive implementation
3.2 Prefetching
3.3 Branchless Eytzinger
3.4 Batched Eytzinger

3.4.1 Non-prefetched
3.4.2 Prefetched
4 Eytzinger or BinSearch?
5 Memory efficiency – parallel search and comparison to B-trees
6 Interpolation search
7 Comparing everything on the human genome
1 Optimizing Binary Search And Interpolation Search
 
 
 

This blogpost is a preliminary of the
post on static
search trees. We will be looking into binary search and how it can be
optimized using different memory layouts (Eytzinger), branchless
techniques and careful use of prefetching. In addition, we will explore
batching and different implementations of it, some of them using vector
instructions. Our language of choice will be Rust.]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Thoughts on Consensus MPHF and tiny pointers]]></title>
        <id>https://curiouscoding.nl/posts/consensus/</id>
        <link href="https://curiouscoding.nl/posts/consensus/"/>
        <updated>2025-02-11T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
1 Consensus

1.1 Consensus-RecSplit
2 IDEA: Consensus-PtrHash
3 Tiny pointers and optimal open addressing hash tables
These are some thoughts on the Consensus-based MPHF presented in
Lehmann et al. (2025), and how this could be applied to PtrHash:
Lehmann, Hans-Peter, Peter Sanders, Stefan Walzer, and Jonatan Ziegler. 2025. “Combined Search and Encoding for Seeds, with an Application to Minimal Perfect Hashing.” arXiv. https://doi.org/10.48550/ARXIV.2502.05613.
Below are also some thoughts on the papers on tiny pointers, used to achieve
hash tables with load factors very close to 1: Bender et al. (2021), Farach-Colton, Krapivin, and Kuszmaul (2025).]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Thread-safe memory copy]]></title>
        <id>https://lemire.me/blog/?p=21864</id>
        <link href="https://lemire.me/blog/2025/02/07/thread-safe-memory-copy/"/>
        <updated>2025-02-07T23:12:34.000Z</updated>
        <summary type="html"><![CDATA[A common operation in software is the copy of a block of memory. In C/C++, we often call the function memcpy for this purpose. But what happens if, while you are copying the data, another thread is modifying either the source or the destination? The result is fundamentally unpredictable and almost surely a programming error. … Continue reading Thread-safe memory copy]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tips for more effective fuzz testing with AFL++]]></title>
        <id>https://nullprogram.com/blog/2025/02/05/</id>
        <link href="https://nullprogram.com/blog/2025/02/05/"/>
        <updated>2025-02-05T18:03:55.000Z</updated>
        <summary type="html"><![CDATA[Fuzz testing is incredibly effective for mechanically discovering software
defects, yet remains underused and neglected. Pick any program that must
gracefully accept complex input, written in any language, which has not
yet been been fuzzed, and fuzz testing usually reveals at least one bug.
At least one program currently installed on your own computer certainly
qualifies. Perhaps even most of them. Everything is broken and
low-hanging fruit is everywhere. After fuzz testing ~1,000 projects over
the past six years, I’ve accumulated tips for picking that fruit.
The checklist format has worked well in the past (1, 2), so
I’ll use it again. This article discusses AFL++ on source-available
C and C++ targets, running on glibc-based Linux distributions, currently
the best fuzzing platform for C …]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nim version 2.2.2 released]]></title>
        <id>https://nim-lang.org//blog/2025/02/05/nim-222.html</id>
        <link href="https://nim-lang.org//blog/2025/02/05/nim-222.html"/>
        <updated>2025-02-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Nim Team is happy to announce version 2.2.2, the first patch release for our stable release, Nim 2.2.
It comes four months after the 2.2.0 release and it contains 203 commits, bringing bugfixes and improvements.
If you’re still on Nim 1.6, take a look at the version 2.0 release article to see all the features you’re missing.
If you’ve been using Nim 2.0, the version 2.2 release article shows the improvements available in Nim 2.2.
Installing Nim 2.2.2
Check out if the package manager of your OS already ships version 2.2.2 or
install it as described here.
If you have installed a previous version of Nim using choosenim,
getting Nim 2.2.2 is as easy as:
$ choosenim update self
$ choosenim update stable

NOTE: Make sure that the version of choosenim you have installed is 0.8.5 or higher, ot…]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PtrHash: Minimal Perfect Hashing at RAM Throughput]]></title>
        <id>https://curiouscoding.nl/posts/ptrhash-paper/</id>
        <link href="https://curiouscoding.nl/posts/ptrhash-paper/"/>
        <updated>2025-02-02T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
Abstract
1 Introduction
2 Related work
3 PtrHash

3.1 Overview
3.2 Construction
3.3 Remapping using CacheLineEF
3.4 Bucket Assignment Functions
3.5 Parallel Queries
3.6 Sharding
4 Results

4.1 Construction

4.1.1 Bucket Functions
4.1.2 Tuning Parameters for Construction
4.1.3 [Appendix?] Remap
4.1.4 Sharding
4.2 Query Throughput

4.2.1 [Appendix?] Batching and Streaming
4.2.2 [Appendix?] Multi-threaded Throughput
4.3 Comparison to Other Methods
5 Conclusions and Future Work
Acknowledgements
Funding
6 Appendix

6.1 Rust and Assembly Code for Streaming
7 DONE Failed Ideas
8 Appendix

8.1 TODO Choosing the Part Size
8.2 Input Types and Hash Functions
9 Graveyard
\[
\newcommand{\part}{\mathsf{part}}
\newcommand{\bucket}{\mathsf{bucket}}
\newcommand{\slot}{\mathsf{slot}}
\newcommand{\reduce}{\mathsf{reduce}}
\newcommand{\h}{\mathsf{h}}
\newcommand{\hp}{\mathsf{h}_{\mathsf{p}}}
\newcommand{\C}{\mathsf{C}}
\newcommand{\select}{\mathsf{select}}
\newcommand{\free}{F}
\newcommand{\mphf}{\mathsf{H_{mphf}}}
\]]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Programmer time and the pitfalls of wasteful work]]></title>
        <id>https://lemire.me/blog/?p=21850</id>
        <link href="https://lemire.me/blog/2025/01/30/programmer-time-and-the-pitfalls-of-false-positives/"/>
        <updated>2025-01-30T03:02:36.000Z</updated>
        <summary type="html"><![CDATA[Programmer time is precious. This realization should shape our approach to software development, focusing our efforts on tasks that genuinely contribute to the improvement of our code and the software ecosystem.   What does matter?   Hunting for bugs. I like to add tests, and then even more tests. The time spent building tests should … Continue reading Programmer time and the pitfalls of wasteful work]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Regular expressions can blow up!]]></title>
        <id>https://lemire.me/blog/?p=21848</id>
        <link href="https://lemire.me/blog/2025/01/25/regular-expressions-can-blow-up/"/>
        <updated>2025-01-25T03:53:36.000Z</updated>
        <summary type="html"><![CDATA[Regular expressions, often abbreviated as regex, are a powerful tool for pattern matching within text. For example, the expression \d*\.?\d+ would match a positive number such as 1.1 or 12. If designed and tested with care, regular expressions may be used in mission-critical software. However, their power comes with a risk: it is possible to … Continue reading Regular expressions can blow up!]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nim Community Survey 2024 Results]]></title>
        <id>https://nim-lang.org//blog/2025/01/23/community-survey-results-2024.html</id>
        <link href="https://nim-lang.org//blog/2025/01/23/community-survey-results-2024.html"/>
        <updated>2025-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Nim community survey 2024 has been open for two months, and we have received 367 responses – less than in previous years, but we’ll still try to draw conclusions about our users and their habits.
Before we go into details, we would like to thank all the people who took the time to respond.
We really appreciate the feedback!
The goal of this survey was primarily to determine how our community is using Nim, in order to better understand how we should be improving it.
Do you use Nim?
Based on the answer to this question, the respondents were divided into two groups that each received a separate set of questions.

Approximately three quarters of the respondents use Nim (40% frequently, 36% occasionally), while the remaining quarter is divided between people who never used Nim (7%) and peop…]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Checking whether an ARM NEON register is zero]]></title>
        <id>https://lemire.me/blog/?p=21836</id>
        <link href="https://lemire.me/blog/2025/01/20/checking-whether-an-arm-neon-register-is-zero/"/>
        <updated>2025-01-20T01:05:51.000Z</updated>
        <summary type="html"><![CDATA[Your phone probably runs on 64-bit ARM processors. These processors are ubiquitous: they power the Nintendo Switch, they power cloud servers at both Amazon AWS and Microsoft Azure, they power fast laptops, and so forth. ARM processors have special powerful instructions called ARM NEON. They provide a specific type of parallelism called Single instruction, multiple … Continue reading Checking whether an ARM NEON register is zero]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Examples of quick hash tables and dynamic arrays in C]]></title>
        <id>https://nullprogram.com/blog/2025/01/19/</id>
        <link href="https://nullprogram.com/blog/2025/01/19/"/>
        <updated>2025-01-19T04:10:33.000Z</updated>
        <summary type="html"><![CDATA[This article durably captures my reddit comment showing techniques
for std::unordered_map and std::vector equivalents in C programs. The
core, important features of these data structures require only a dozen or
so lines of code apiece. They compile quickly, and tend to run faster in
debug builds than release builds of their C++ equivalents. What they
lack in genericity they compensate in simplicity. Nothing here will be
new. Everything has been covered in greater detail previously, which I
will reference when appropriate.
For a concrete goal, we will build a data structure representing an
process environment, along with related functionality to make it more
interesting. That is, we’ll build a string-to-string map.
Allocator
The foundation is our allocator, a simple bump allocator, so
we’ll…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Interpreting Brainfuck in Haskell]]></title>
        <id>https://abhinavsarkar.net/posts/brainfuck-interpreter/?mtm_campaign=feed</id>
        <link href="https://abhinavsarkar.net/posts/brainfuck-interpreter/?mtm_campaign=feed"/>
        <updated>2025-01-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Writing an interpreter for Brainfuck is almost a rite of passage for any programming language implementer,
and it’s my turn now. In this post, we’ll write not one but four Brainfuck interpreters in Haskell. Let’s go!</p>]]></summary>
        <author>
            <name>Posts on abhinavsarkar.net</name>
        </author>
    </entry>
</feed>