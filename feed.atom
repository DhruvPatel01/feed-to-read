<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2024-07-07T01:04:05.128Z</id>
    <title>osmos::feed</title>
    <updated>2024-07-07T01:04:05.128Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Scan HTML faster with SIMD instructions: .NET/C# Edition]]></title>
        <id>https://lemire.me/blog/?p=21437</id>
        <link href="https://lemire.me/blog/2024/07/05/scan-html-faster-with-simd-instructions-net-c-edition/"/>
        <updated>2024-07-05T19:44:50.000Z</updated>
        <summary type="html"><![CDATA[Recently, the two major Web engines (WebKit and Chromium) adopted fast SIMD routines to scan HTML content. The key insight is to use vectorized classification (Langdale and Lemire, 2019): you load blocks of characters and identify the characters you seek using a few instructions. In particular, we use ‘SIMD instructions’, special instructions that are available … Continue reading Scan HTML faster with SIMD instructions: .NET/C# Edition]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Properly Testing Concurrent Data Structures]]></title>
        <id>https://matklad.github.io/2024/07/05/properly-testing-concurrent-data-structures.html</id>
        <link href="https://matklad.github.io/2024/07/05/properly-testing-concurrent-data-structures.html"/>
        <updated>2024-07-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[There's a fascinating Rust library, loom, which can be used to
thoroughly test lock-free data structures. I always wanted to learn how it works. I still do! But
recently I accidentally implemented a small toy which, I think, contains some of the loom's ideas,
and it seems worthwhile to write about that. The goal here isn't to teach you what you should be
using in practice (if you need that, go read loom's docs), but rather to derive a couple of neat
ideas from first principles.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nim version 2.0.8 released]]></title>
        <id>https://nim-lang.org//blog/2024/07/03/version-208-released.html</id>
        <link href="https://nim-lang.org//blog/2024/07/03/version-208-released.html"/>
        <updated>2024-07-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Nim team is happy to announce Nim version 2.0.8, our fourth patch release for Nim 2.0.
Version 2.0.8 is a small release, containing just 20 commits, but it brings important improvements to Nim 2.0.6, released 10 days ago.
Major improvements in this release:
Nim’s allocator is now much more stable with --threads:on.
Better support for gcc14.
Optimized setLen(0) for uninitialized strings and seqs.
Optimized move when used with --mm:refc.
This release comes relatively quickly after our previous release because it was time-critical for our partner Status to receive these improvements as soon as possible.
It is our way of saying “thank you” for their continued support of Nim.
Check out if the package manager of your OS already ships version 2.0.8 or
install it as described here.
Existing users
If you have installed a previous version of Nim using choosenim,
getting Nim 2.0.8 is as easy as:
$ choosenim 2.0.8

If you are on OSX ARM, choosenim will not work for you.
Please choose an alternative method of installing or updating.
Alternatively, you can download Nim 2.0.8 from
our nightlies builds.
Donating to Nim
We would like to encourage you to donate to Nim.
The donated money will be used to further improve Nim by creating bounties
for the most important bugfixes and features.
You can donate via:
Open Collective
Bitcoin: 1BXfuKM2uvoD6mbx4g5xM3eQhLzkCK77tJ
If you are a company, we also offer commercial support.
Bugfixes
These reported issues were fixed:
Fixed “[Semi-regression] C code contains backtick`gensym”
(#23711)
Fixed “setLen(0) allocates memory causing performance regression”
(#23742)
Fixed “Sigsegv on std/tasks destructor”
(#23725)
Fixed “genericAssign does not take care of the importC variables”
(#9940)
Fixed “move(table) does not move the table”
(#23759)
Fixed “Local variables can be prematurely moved to closure, causing use-after-move”
(#23748)
Fixed “tvatiteropenarray test fails with c++”
(#19977)
The complete list of changes is available
here.]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Symbol inspection tools for w64devkit: vc++filt and peports]]></title>
        <id>https://nullprogram.com/blog/2024/06/30/</id>
        <link href="https://nullprogram.com/blog/2024/06/30/"/>
        <updated>2024-06-30T21:30:19.000Z</updated>
        <summary type="html"><![CDATA[I introduced two new tools to w64devkit, vc++filt and
peports (pronounced like purports), which aid manual symbol
inspection and complement one another. As of this writing, the latter is
not yet in a release, but it’s feature-complete and trivial to build if
you wanted to try it out early. This article explains the motivation and
purpose for each.
vc++filt
Binutils has c++filt, a tool to demangle C++ symbols. Its primary use
case is operating on whole files or streams, passing through anything that
doesn’t look like a mangled C++ symbol, and interpolating human-friendly
names in place of mangled symbols. In, say, Vim I could run the current
buffer through it to translate mangled symbols (:%!c++filt).
Otherwise it’s often composed with other tools in a pipeline.
For example, suppose I want …]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How much memory does a call to ‘malloc’  allocate?]]></title>
        <id>https://lemire.me/blog/?p=21423</id>
        <link href="https://lemire.me/blog/2024/06/27/how-much-memory-does-a-call-to-malloc-allocates/"/>
        <updated>2024-06-27T20:41:51.000Z</updated>
        <summary type="html"><![CDATA[In C, we allocate memory on the heap using the malloc function. Other programming languages like C++ or zig (e.g., std.heap.c_allocator) may call on malloc underneath so it is important to understand how malloc works. Furthermore, the same concepts apply broadly to other memory allocators. In theory, you could allocate just one byte like so: … Continue reading How much memory does a call to ‘malloc’  allocate?]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Enhancing Netflix Reliability with Service-Level Prioritized Load Shedding]]></title>
        <id>https://medium.com/p/e735e6ce8f7d</id>
        <link href="https://netflixtechblog.com/enhancing-netflix-reliability-with-service-level-prioritized-load-shedding-e735e6ce8f7d?source=rss----2615bd06b42e---4"/>
        <updated>2024-06-25T22:58:09.000Z</updated>
        <summary type="html"><![CDATA[Applying Quality of Service techniques at the application level]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Hμblog] Hire me]]></title>
        <id>https://www.devever.net/~hl/u/202406#23a</id>
        <link href="https://www.devever.net/~hl/u/202406#23a"/>
        <updated>2024-06-23T09:43:07.000Z</updated>
        <summary type="html"><![CDATA[<div type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><ul><li><a href="https://www.linkedin.com/in/hugo-landau/">Hire me</a></li></ul><p xmlns="http://www.w3.org/1999/xhtml">Looking for a new role. Expertise in cryptography, security, networking,
reversing. Dev, ops, security. Amongst other things I've authored a , a
 and . I gave a talk about .
 / .<a href="https://github.com/openssl/openssl/pulls?q=author%3Ahlandau">QUIC
implementation</a><a href="http://github.com/hlandau/acmetool">Let's Encrypt client</a><a href="/~hl/acme-caa-live">an
RFC</a><a href="/~hl/ortega-37c3/">reverse engineering an Ethernet
controller's firmware at 37C3</a><a href="https://www.linkedin.com/in/hugo-landau/">LinkedIn</a><a href="/~hl/contact">contact
details</a></p></div></div>]]></summary>
        <author>
            <name>devever.net/~hl</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Performance tip: avoid unnecessary copies]]></title>
        <id>https://lemire.me/blog/?p=21410</id>
        <link href="https://lemire.me/blog/2024/06/22/performance-tip-avoid-unnecessary-copies/"/>
        <updated>2024-06-22T19:14:18.000Z</updated>
        <summary type="html"><![CDATA[Copying data in software is cheap, but it is not at all free. As you start optimizing your code, you might find that copies become a performance bottleneck. Let me be clear that copies really are cheap. It is often more performant to copy that data than to track the same memory across different threads. … Continue reading Performance tip: avoid unnecessary copies]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Validating gigabytes of Unicode strings per second… in C#?]]></title>
        <id>https://lemire.me/blog/?p=21400</id>
        <link href="https://lemire.me/blog/2024/06/20/validating-gigabytes-of-unicode-strings-per-second-in-c/"/>
        <updated>2024-06-20T17:25:02.000Z</updated>
        <summary type="html"><![CDATA[We have been working on a fast library to validate and transcode Unicode and other formats such as base64 in C++: simdutf. We wondered: could we achieve the same good results in C#? Microsoft’s .NET framework has made great strides in leveraging advanced instructions. For instance, if your processor supports AVX-512, you can instantiate 512-bit … Continue reading Validating gigabytes of Unicode strings per second… in C#?]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Recap of the Data Engineering Open Forum at Netflix]]></title>
        <id>https://medium.com/p/6b4d4410b88f</id>
        <link href="https://netflixtechblog.com/a-recap-of-the-data-engineering-open-forum-at-netflix-6b4d4410b88f?source=rss----2615bd06b42e---4"/>
        <updated>2024-06-20T15:01:27.000Z</updated>
        <summary type="html"><![CDATA[A summary of sessions at the first Data Engineering Open Forum at Netflix on April 18th, 2024]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Video annotator: building video classifiers using vision-language models and active learning]]></title>
        <id>https://medium.com/p/8ebdda0b2db4</id>
        <link href="https://netflixtechblog.com/video-annotator-building-video-classifiers-using-vision-language-models-and-active-learning-8ebdda0b2db4?source=rss----2615bd06b42e---4"/>
        <updated>2024-06-19T15:29:29.000Z</updated>
        <summary type="html"><![CDATA[Harness domain expertise with Video Annotator: streamline ML annotations, cut costs, and deploy faster using a human-in-the-loop system 🚀]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nim version 2.0.6 released]]></title>
        <id>https://nim-lang.org//blog/2024/06/17/version-206-released.html</id>
        <link href="https://nim-lang.org//blog/2024/06/17/version-206-released.html"/>
        <updated>2024-06-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Nim team is happy to announce Nim version 2.0.6, our third, and the largest by far, patch release for Nim 2.0.
Version 2.0.6 contains (exactly!) 200 commits and brings bugfixes and improvements to Nim 2.0.4, released two months ago.
The reason for this many commits in this release is that this is planned as the last 2.0.x release before Nim 2.2 and we wanted to give you the best Nim 2.0 experience in case you won’t be able to switch immediately to Nim 2.2.
NOTE: If your program uses threads (--threads:on became the default in the 2.0.x line) please also use the -d:useMalloc switch.
This problem will be fixed in a future release, sorry for the inconvenience.
Check out if the package manager of your OS already ships version 2.0.6 or
install it as described here.
Existing users
If you hav…]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Interesting Links for June 2024]]></title>
        <id>https://notes.abhinavsarkar.net/2024/links-06</id>
        <link href="https://notes.abhinavsarkar.net/2024/links-06"/>
        <updated>2024-06-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Here are some interesting things I recently read on the internet:</p>

<figure>
  <blockquote>
    <p>“As I walk around Philadelphia I often converse with Benjamin Franklin, to see what he thinks about how things have changed since 1790.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://blog.plover.com/tech/its-an-age-of-marvels.html">It’s an Age of Marvels</a></cite><a href="https://web.archive.org/web/3/https://blog.plover.com/tech/its-an-age-of-marvels.html" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“The difficulty with music is that half of it is arbitrary and half of it is actually based on something, but you can’t tell the difference just by looking at it.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://eev.ee/blog/2016/09/15/music-theory-for-nerds/">Music Theory for Nerds</a></cite><a href="https://web.archive.org/web/3/https://eev.ee/blog/2016/09/15/music-theory-for-nerds/" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“Defining the original paths for those letters was a very manual process of writing their positions into the code and then nudging the points back and forth until the letters looked right. When it came to coding cursive, I streamlined the process.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://www.amygoodchild.com/blog/cursive-handwriting-in-javascript">Coding My Handwriting</a></cite><a href="https://web.archive.org/web/3/https://www.amygoodchild.com/blog/cursive-handwriting-in-javascript" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“Are there deeper, more fundamental aspects of software that can help us think beyond surface-level matters? I’ve come to think that a triad of interacting factors best explains what software is and, by extension, why software is difficult.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://tratt.net/laurie/blog/2024/what_factors_explain_the_nature_of_software.html">What Factors Explain the Nature of Software?</a></cite><a href="https://web.archive.org/web/3/https://tratt.net/laurie/blog/2024/what_factors_explain_the_nature_of_software.html" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“Programs that manipulate other programs are powerful, interesting and fun. I’ll take you on a tour of how interpreters and compilers work, and explain a surprising computer science result which allows compilers to be generated automatically.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://tomstu.art/compilers-for-free">Compilers for Free</a></cite><a href="https://web.archive.org/web/3/https://tomstu.art/compilers-for-free" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“References are like jumps, leading wildly from one part of a data structure to another. Their introduction into high-level languages has been a step backward from which we may never recover.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://without.boats/blog/references-are-like-jumps/">References Are like Jumps</a></cite><a href="https://web.archive.org/web/3/https://without.boats/blog/references-are-like-jumps/" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“Forsp kind of just appeared and then has continued to surprise me. In many ways it feels more fundamental than Lisp or Forth. It appears to be both simpler than Lisp and more powerful than Forth.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://xorvoid.com/forsp.html">Forsp: A Forth+Lisp Hybrid Lambda Calculus Language</a></cite><a href="https://web.archive.org/web/3/https://xorvoid.com/forsp.html" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“c4 is clever, tricky, fascinating, cool. It’s a compiler, it’s a VM, it’s an interpreter, it’s a parser, it’s art, it’s trickshot programming.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://registerspill.thorstenball.com/p/exploring-the-c4-compiler">Exploring the c4… Compiler?</a></cite><a href="https://web.archive.org/web/3/https://registerspill.thorstenball.com/p/exploring-the-c4-compiler" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“Lately I’ve been discovering new features in Python 3.12 around typing and pattern matching. Combined with dataclasses, they provide support for a style of programming that I’ve employed in Kotlin and Typescript.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://wickstrom.tech/2024-05-23-statically-typed-functional-programming-python-312.html">Statically Typed Functional Programming with Python 3.12</a></cite><a href="https://web.archive.org/web/3/https://wickstrom.tech/2024-05-23-statically-typed-functional-programming-python-312.html" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“Optics represent different relationships between types, such as ‘is a type of’, or ‘contains one or more’, similar to relationships in an old-timey UML class diagram. But unlike relationships in a UML diagram, optics can be used directly in real code.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://doscienceto.it/blog/posts/2019-12-19-optics.html">Lessons Learned Building a Van Laarhoven Lens Library</a></cite><a href="https://web.archive.org/web/3/https://doscienceto.it/blog/posts/2019-12-19-optics.html" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“Please don’t do this in production.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://astrid.tech/2024/05/01/0/ansible-is-a-lisp/">Ansible Is a Lisp</a></cite><a href="https://web.archive.org/web/3/https://astrid.tech/2024/05/01/0/ansible-is-a-lisp/" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“If Bob’s offering a perfect algorithm off the top of his head, call bullshit (unless he carefully frames it as a hypothesis to test in a simulator, thank you, Bob).”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://sirupsen.com/napkin/problem-16-simulation">When to Write a Simulator</a></cite><a href="https://web.archive.org/web/3/https://sirupsen.com/napkin/problem-16-simulation" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“I just don’t think it’s useful, most of the time, to worry about anything beyond: wake me up, or don’t.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://ntietz.com/blog/the-only-two-log-levels-you-need-are-info-and-error/">The Only Two Log Levels You Need Are INFO and ERROR</a></cite><a href="https://web.archive.org/web/3/https://ntietz.com/blog/the-only-two-log-levels-you-need-are-info-and-error/" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“The internet is awash with tutorials on how to implement dark mode that will get you to a rudimentary implementation. I found that they lacked the refinements necessary to get to a great implementation.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://brandur.org/fragments/dark-mode-notes">Notes on Implementing Dark Mode</a></cite><a href="https://web.archive.org/web/3/https://brandur.org/fragments/dark-mode-notes" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“Too often have I witnessed the improvising musician sweaty-handedly attempting to pinch-zoom an A4 pdf on a tiny mobile screen at the climax of a gig. We need fluid and responsive music rendering for the web!”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://cruncher.ch/blog/printing-music-with-css-grid/">Printing Music with CSS Grid</a></cite><a href="https://web.archive.org/web/3/https://cruncher.ch/blog/printing-music-with-css-grid/" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<p>Like, share, or comment on this post on <a href="https://fantastic.earth/@abnv/112615743566573724" class="mastodon-link">Mastodon</a>.</p>]]></summary>
        <author>
            <name>Posts on abhinavsarkar.net</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rolling your own fast matrix multiplication: loop order and vectorization]]></title>
        <id>https://lemire.me/blog/?p=21386</id>
        <link href="https://lemire.me/blog/2024/06/13/rolling-your-own-fast-matrix-multiplication-loop-order-and-vectorization/"/>
        <updated>2024-06-13T21:11:26.000Z</updated>
        <summary type="html"><![CDATA[If you must multiply matrices, you should use dedicated libraries. However, we sometimes need to roll our own code. In C++, you can quickly write your own Matrix template: template <typename T> struct Matrix { Matrix(size_t rows, size_t cols) : data(new T[rows * cols]), rows(rows), cols(cols) {} T &operator()(size_t i, size_t j) { return data.get()[i … Continue reading Rolling your own fast matrix multiplication: loop order and vectorization]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scan HTML faster with SIMD instructions: Chrome edition]]></title>
        <id>https://lemire.me/blog/?p=21382</id>
        <link href="https://lemire.me/blog/2024/06/08/scan-html-faster-with-simd-instructions-chrome-edition/"/>
        <updated>2024-06-08T04:55:42.000Z</updated>
        <summary type="html"><![CDATA[Modern processors have instructions to process several bytes at once. Effectively all processors have the capability of processing 16 bytes at once. These instructions are called SIMD, for single instruction, multiple data. It was once an open question whether these instructions could be useful to accelerate common tasks such as parsing HTML or JSON. However, … Continue reading Scan HTML faster with SIMD instructions: Chrome edition]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
</feed>