<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2024-03-17T00:55:04.995Z</id>
    <title>osmos::feed</title>
    <updated>2024-03-17T00:55:04.995Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[How to read files quickly in JavaScript]]></title>
        <id>https://lemire.me/blog/?p=21158</id>
        <link href="https://lemire.me/blog/2024/03/12/how-to-read-files-quickly-in-javascript/"/>
        <updated>2024-03-12T15:43:09.000Z</updated>
        <summary type="html"><![CDATA[Suppose you need to read several files on a server using JavaScript. There are many ways to read files in JavaScript with a runtime like Node.js. Which one is best? Let us consider the various approaches. Using fs.promises const fs = require('fs/promises'); const readFile = fs.readFile; readFile("lipsum.txt", { encoding: 'utf-8' }) .then((data) => {...}) .catch((err) … Continue reading How to read files quickly in JavaScript]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How many political parties rule Canada? Fun with statistics]]></title>
        <id>https://lemire.me/blog/?p=21150</id>
        <link href="https://lemire.me/blog/2024/03/08/how-many-political-parties-rule-canada-fun-with-statistics/"/>
        <updated>2024-03-08T15:59:04.000Z</updated>
        <summary type="html"><![CDATA[Canada has several political parties with elected member of parliament: the Liberals, the Conservatives, the Bloc Québecois, de NDP and the Green. But do they behave as distinct political parties when voting, or are they somehow aligned? Voting data for the member of parliament in Canada is easily accessible as JSON or XML. Thus I … Continue reading How many political parties rule Canada? Fun with statistics]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Supporting Diverse ML Systems at Netflix]]></title>
        <id>https://medium.com/p/2d2e6b6d205d</id>
        <link href="https://netflixtechblog.com/supporting-diverse-ml-systems-at-netflix-2d2e6b6d205d?source=rss----2615bd06b42e---4"/>
        <updated>2024-03-07T18:33:07.000Z</updated>
        <summary type="html"><![CDATA[David J. Berg, Romain Cledat, Kayla Seeley, Shashank Srikanth, Chaoying Wang, Darin Yu]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bending pause times to your will with Generational ZGC]]></title>
        <id>https://medium.com/p/256629c9386b</id>
        <link href="https://netflixtechblog.com/bending-pause-times-to-your-will-with-generational-zgc-256629c9386b?source=rss----2615bd06b42e---4"/>
        <updated>2024-03-06T01:35:08.000Z</updated>
        <summary type="html"><![CDATA[The surprising and not so surprising benefits of generations in the Z Garbage Collector.]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Protecting paths in macro expansions by extending UTF-8]]></title>
        <id>https://nullprogram.com/blog/2024/03/05/</id>
        <link href="https://nullprogram.com/blog/2024/03/05/"/>
        <updated>2024-03-05T03:15:12.000Z</updated>
        <summary type="html"><![CDATA[After a year I’ve finally came up with an elegant solution to a vexing
u-config problem. The pkg-config format uses macros to generate build
flags through recursive expansion. Some flags embed file system paths, but
to the macro system it’s all strings. The output is also ultimately just
one big string, which the receiving shell splits into fields. If
a path contains spaces, or shell metacharacters, u-config must escape them
so that shells treat them as part of a token. But how can u-config itself
distinguish incidental spaces in paths from deliberate spaces between
flags? What about other shell metacharacters in paths? My solution is to
extend UTF-8 to encode metadata that survives macro expansion.
As usual, it helps to begin with a concrete example of the problem. The
following is a conv…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Evolving from Rule-based Classifier: Machine Learning Powered Auto Remediation in Netflix Data…]]></title>
        <id>https://medium.com/p/039d5efd115b</id>
        <link href="https://netflixtechblog.com/evolving-from-rule-based-classifier-machine-learning-powered-auto-remediation-in-netflix-data-039d5efd115b?source=rss----2615bd06b42e---4"/>
        <updated>2024-03-04T18:01:55.000Z</updated>
        <summary type="html"><![CDATA[by Binbing Hou, Stephanie Vezich Tamayo, Xiao Chen, Liang Tian, Troy Ristow, Haoyuan Wang, Snehal Chennuru, Pawan Dixit]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kafka versus Nabokov]]></title>
        <id>https://matklad.github.io/2024/03/02/Kafka-vs-Nabokov.html</id>
        <link href="https://matklad.github.io/2024/03/02/Kafka-vs-Nabokov.html"/>
        <updated>2024-03-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Uplifting a lobste.rs comment to a stand-alone post.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing bpftop: Streamlining eBPF performance optimization]]></title>
        <id>https://medium.com/p/6a727c1ae2e5</id>
        <link href="https://netflixtechblog.com/announcing-bpftop-streamlining-ebpf-performance-optimization-6a727c1ae2e5?source=rss----2615bd06b42e---4"/>
        <updated>2024-02-26T16:43:30.000Z</updated>
        <summary type="html"><![CDATA[By Jose Fernandez]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Book review: Theft of Fire by Devon Eriksen]]></title>
        <id>https://lemire.me/blog/?p=21135</id>
        <link href="https://lemire.me/blog/2024/02/24/book-review-theft-of-fire-by-devon-eriksen/"/>
        <updated>2024-02-24T18:35:03.000Z</updated>
        <summary type="html"><![CDATA[When I was young, science fiction was the genre of choice for many engineers and scientists. But the genre declined significantly in recent years. Part of the problem is the rise dystopian fiction. In the imagined future, we are no longer conquering space or developing new fantastic technologies, but rather, increasingly, battling the consequences of … Continue reading Book review: Theft of Fire by Devon Eriksen]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Measuring energy usage: regular code vs. SIMD code]]></title>
        <id>https://lemire.me/blog/?p=21126</id>
        <link href="https://lemire.me/blog/2024/02/19/measuring-energy-usage-regular-code-vs-simd-code/"/>
        <updated>2024-02-19T21:39:32.000Z</updated>
        <summary type="html"><![CDATA[Modern processor have fancy instructions that can do many operations at one using wide registers: SIMD instructions. Intel and AMD have 512-bit registers and associated instructions under AVX-512. You expect these instructions to use more power, more energy. However, they get the job done faster. Do you save energy overall? You should expect so. Let … Continue reading Measuring energy usage: regular code vs. SIMD code]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bloom Filters]]></title>
        <id>https://samwho.dev/bloom-filters/</id>
        <link href="https://samwho.dev/bloom-filters/"/>
        <updated>2024-02-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[.bf {
  width: 100%;
  height: 150px;
}

@media only screen and (min-width: 320px) and (max-width: 479px) {
  .bf {
    height: 200px;
  }
}

@media only screen and (min-width: 480px) and (max-width: 676px) {
  .bf {
    height: 200px;
  }
 }

@media only screen and (min-width: 677px) and (max-width: 991px) {
  .bf {
    height: 150px;
  }
}

form {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: stretch;
}

input {
    border: 1px solid rgb(119, 119, 119);
    padding: 0.25rem;
    border-radius: 0.25rem;
    height: 2em;
    line-height: 2em;
}

.aside {
  padding: 2rem;
  width: 100vw;
  position: relative;
  margin-left: -50vw;
  left: 50%;
  background-color: #eeeeee;

  display: flex;
  align-items: center;
  flex-direction: column;
}

.aside > * …]]></summary>
        <author>
            <name>samwho.dev</name>
        </author>
    </entry>
</feed>