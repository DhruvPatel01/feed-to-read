<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2025-03-09T01:02:43.155Z</id>
    <title>osmos::feed</title>
    <updated>2025-03-09T01:02:43.155Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[A more robust raw OpenBSD syscall demo]]></title>
        <id>https://nullprogram.com/blog/2025/03/06/</id>
        <link href="https://nullprogram.com/blog/2025/03/06/"/>
        <updated>2025-03-06T02:43:20.000Z</updated>
        <summary type="html"><![CDATA[Ted Unangst published dude, where are your syscalls? on flak
yesterday, with a neat demonstration of OpenBSD’s pinsyscall
security feature, whereby only pre-registered addresses are allowed to
make system calls. Whether it strengthens or weakens security is up for
debate, but regardless it’s an interesting, low-level programming
challenge. The original demo is fragile for multiple reasons, and requires
manually locating and entering addresses for each build. In this article I
show how to fix it. To prove that it’s robust, I ported an entire, real
application to use raw system calls on OpenBSD.
The original program uses ARM64 assembly. I’m a lot more comfortable with
x86-64 assembly, plus that’s the hardware I have readily on hand. So the
assembly language will be different, but all the con…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Title Launch Observability at Netflix Scale]]></title>
        <id>https://medium.com/p/8efe69ebd653</id>
        <link href="https://netflixtechblog.com/title-launch-observability-at-netflix-scale-8efe69ebd653?source=rss----2615bd06b42e---4"/>
        <updated>2025-03-05T01:24:53.000Z</updated>
        <summary type="html"><![CDATA[Part 3: System Strategies and Architecture]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Robust Wavefront OBJ model parsing in C]]></title>
        <id>https://nullprogram.com/blog/2025/03/02/</id>
        <link href="https://nullprogram.com/blog/2025/03/02/"/>
        <updated>2025-03-02T23:22:58.000Z</updated>
        <summary type="html"><![CDATA[Wavefront OBJ is a line-oriented, text format for 3D geometry. It’s
widely supported by modeling software, easy to parse, and trivial to emit,
much like Netpbm for 2D image data. Poke around hobby 3D graphics
projects and you’re likely to find a bespoke OBJ parser. While typically
only loading their own model data, so robustness doesn’t much matter, they
usually have hard limitations and don’t stand up to fuzz testing.
This article presents a robust, partial OBJ parser in C with no hard-coded
limitations, written from scratch. Like similar articles, it’s not
really about OBJ but demonstrating some techniques you’ve probably never
seen before.
If you’d like to see the ready-to-run full source: objrender.c.
All images are screenshots of this program.
First let’s establish the requirements. B…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How fast can you open 1000 files?]]></title>
        <id>https://lemire.me/blog/?p=21905</id>
        <link href="https://lemire.me/blog/2025/03/01/how-fast-can-you-open-1000-files/"/>
        <updated>2025-03-01T22:41:04.000Z</updated>
        <summary type="html"><![CDATA[Jarred Sumner, the main author of the Bun JavaScript engine, commented a few days ago on X that opening many files on macOS could be slow due to thread contention: “your $5,000 computer is only capable of opening 1 file at a time”. I was curious and I decided to test it out. I wrote … Continue reading How fast can you open 1000 files?]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Near-optimal sampling schemes]]></title>
        <id>https://curiouscoding.nl/slides/minimizers/</id>
        <link href="https://curiouscoding.nl/slides/minimizers/"/>
        <updated>2025-02-26T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[1 Warming up: A cute prolblem
 
 
 


Given a string, choose one character.

CABAACBD
Given a rotation, choose one character.

ACBDCABA
Can we always choose the same character?
Yes: e.g. the smallest rotation (bd-anchor):

CAB​A​ACBD
ACBDCAB​A
1.1 This talk: what if one character is hidden?
 
 
 


Given a string (length \(w\)), choose one character.

CABAACBD​​X
Given a rotation (of the hidden \(w+1\) string), choose one character.

ACBDXCAB​A
Can we always choose the same character?
Maybe?

CAB​A​ACBD
ACBDXCAB 🤔
1.2 The answer is no!
 
 
 

C​ABAACBDX rotations:]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MacOS for KDE Users]]></title>
        <id>https://matklad.github.io/2025/02/23/macos-for-kde-users.html</id>
        <link href="https://matklad.github.io/2025/02/23/macos-for-kde-users.html"/>
        <updated>2025-02-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I've switched to MacOS after using Linux continuously since 2012 or thereabouts (first Arch, and
then, since 2015, NixOS). This post documents my experience.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[0. Optimal Throughput Bioinformatics]]></title>
        <id>https://curiouscoding.nl/posts/thesis/</id>
        <link href="https://curiouscoding.nl/posts/thesis/"/>
        <updated>2025-02-22T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
1 Abstract
2 Introduction

2.1 Objectives
2.2 Challenges
2.3 List of papers
2.4 Thesis structure and contributions
2.5 Personal note
3 Discussion and conclusion

3.1 Overview
3.2 Future directions
3.3 Concluding remarks
4 Bibliography
1 Abstract
 
 
 


 2 Introduction
 
 
 

Summary.
2.1 Objectives
 
 
 


 2.2 Challenges
 
 
 


 2.3 List of papers
 
 
 

Pairwise alignment.
A*PA, Bioinformatics 24.
Groot Koerkamp, Ragnar, and Pesho Ivanov. 2024. “Exact Global Alignment Using A* with Chaining Seed Heuristic and Match Pruning.” Edited by Tobias Marschall. Bioinformatics 40 (3). https://doi.org/10.1093/bioinformatics/btae032.]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[1. Pairwise Alignment]]></title>
        <id>https://curiouscoding.nl/posts/pairwise-alignment/</id>
        <link href="https://curiouscoding.nl/posts/pairwise-alignment/"/>
        <updated>2025-02-21T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
1 Introduction

1.1 Overview
2 A history of pairwise alignment
3 Problem statement
4 Variations on pairwise alignment

4.1 Alignment types
4.2 Cost Models
4.3 Minimizing Cost versus Maximizing Score
5 The classic quadratic DP algorithms
6 Linear Memory using Divide and Conquer
7 Dijkstra’s algorithm and A*
8 Computational volumes and band doubling
9 Diagonal transition
10 Subquadratic methods and lower bounds
11 Parallelism
12 LCS and Contours
13 Some tools
14 Summary
15 TODO

15.1 A*PA2

Summary/overview/contribs
Notation
Methods
Evaluation
Discussion
15.2 Semi-global alignment
Attribution
 
This chapter is based on two papers:]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2. Minimizers and More]]></title>
        <id>https://curiouscoding.nl/posts/minimizers/</id>
        <link href="https://curiouscoding.nl/posts/minimizers/"/>
        <updated>2025-02-20T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
1 Theory of sampling schemes

1.1 Introduction
1.2 Overview
1.3 Theory of sampling schemes
1.4 Notation
1.5 Types of sampling schemes
1.6 Computing the density
1.7 The density of random minimizers
1.8 Universal hitting sets
1.9 Asymptotic results
1.10 Variants
2 Lower bounds

2.1 Schleimer et al.’s bound
2.2 Marçais et al.’s bound
2.3 Improving and extending Marçais et al.’s bound
2.4 A near-tight lower bound on the density of forward sampling schemes
2.5 Discussion
3 Sampling schemes

3.1 Variants of lexicographic minimizers

Evaluation
3.2 UHS-inspired schemes
3.3 Syncmer-based schemes
3.4 Open-closed minimizer

Evaluation
3.5 Mod-minimizer

Theoretical density
Evaluation
3.6 Discussion
4 Selection schemes

4.1 Bidirectional anchors
4.2 Sus-anchors

Evaluation
4.3 Discussion
4.4 TODO Discussion
5 Checks
1 Theory of sampling schemes
 
 
 


 
Attribution
 
This chapter is based on three papers:]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[3. High Throughput Bioinformatics]]></title>
        <id>https://curiouscoding.nl/posts/throughput/</id>
        <link href="https://curiouscoding.nl/posts/throughput/"/>
        <updated>2025-02-19T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
1 Optimizing Compute Bound Code: Random Minimizers

1.1 Avoiding Branch Misses
1.2 SIMD: Processing In Parallel
1.3 Instruction Level Parallelism
1.4 Input Format
2 Optimizing Memory Bound Code: Minimal Perfect Hashing

2.1 Using Less Memory
2.2 Reducing Memory Accesses
2.3 Interleaving Memory Accesses
2.4 Batching, Streaming, and Prefetching
3 TODO Writing High Performance Code

3.1 TODO Benchmarking
3.2 Writing and Optimizing High Performance Code
3.3 DROP? Performance Metrics
Attribution
 
This part is based on two preprints:]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Meet the new xxd for w64devkit: rexxd]]></title>
        <id>https://nullprogram.com/blog/2025/02/17/</id>
        <link href="https://nullprogram.com/blog/2025/02/17/"/>
        <updated>2025-02-17T00:49:49.000Z</updated>
        <summary type="html"><![CDATA[xxd is a versatile hexdump utility with a “reverse” feature, originally
written between 1990–1996. The Vim project soon adopted it, and it’s lived
there ever since. If you have Vim, you also have xxd. Its primary use
cases are (1) the basis for a hex editor due to its -r reverse option
that can unhexdump its previous output, and (2) a data embedding tool
for C and C++ (-i). The former provides Vim’s rudimentary hex editor
functionality. The second case is of special interest to w64devkit:
xxd -i appears in many builds that embed arbitrary data. It’s
important that w64devkit has a compatible implementation, and a freshly
rewritten, improved xxd, rexxd, now replaces the original xxd (as
xxd).
For those unfamiliar with xxd, examples are in order. Its default hexdump
output looks like this:

$…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Minimizer papers]]></title>
        <id>https://curiouscoding.nl/posts/minimizer-papers/</id>
        <link href="https://curiouscoding.nl/posts/minimizer-papers/"/>
        <updated>2025-02-16T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
1 Overview
2 Introduction
- Previous reviews
3 Theory of sampling schemes

3.1 Questions
3.2 Types of schemes
3.3 Parameter regimes
3.4 Different perspectives
3.5 UHS vs minimizer scheme
3.6 (Asymptotic) bounds
3.7 Lower bounds
4 Minimizer schemes

4.1 Orders
4.2 UHS-based and search-based schemes
4.3 Pure schemes
4.4 Other variants

Selection schemes
Canonical minimizers
4.5 Non-overlapping string sets
This post is simply a list of brief comments on many papers related to
minimizers, and forms the basis of /posts/minimizers/.
1 Overview
 
 
 


 
Figure 1: An overview of the papers this post discusses, showing authors and categories of each paper.]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing Impressions at Netflix]]></title>
        <id>https://medium.com/p/e2b67c88c9fb</id>
        <link href="https://netflixtechblog.com/introducing-impressions-at-netflix-e2b67c88c9fb?source=rss----2615bd06b42e---4"/>
        <updated>2025-02-15T01:13:20.000Z</updated>
        <summary type="html"><![CDATA[Part 1: Creating the Source of Truth for Impressions]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AVX-512 gotcha: avoid compressing words to memory with AMD Zen 4 processors]]></title>
        <id>https://lemire.me/blog/?p=21895</id>
        <link href="https://lemire.me/blog/2025/02/14/avx-512-gotcha-avoid-compressing-words-to-memory-with-amd-zen-4-processors/"/>
        <updated>2025-02-14T21:27:29.000Z</updated>
        <summary type="html"><![CDATA[Convention computer instructions operate on a single piece of data at once (e.g., they can negate an integer or add two integers). For better performance, CPU vendors add support for SIMD instructions. SIMD stands for Single Instruction, Multiple Data. It is a type of parallel processing where a single operation is executed simultaneously on multiple … Continue reading AVX-512 gotcha: avoid compressing words to memory with AMD Zen 4 processors]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[WIP] Binary search variants and the effects of batching]]></title>
        <id>https://curiouscoding.nl/posts/binsearch/</id>
        <link href="https://curiouscoding.nl/posts/binsearch/"/>
        <updated>2025-02-11T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
1 Optimizing Binary Search And Interpolation Search

1.1 Problem statement
1.2 Inspiration and background
1.3 Benchmarking setup
2 Binary search

2.1 Branchless search
2.2 Explicit prefetching
2.3 Batching
2.4 A note on power-of-two array sizes
3 Eytzinger

3.1 Naive implementation
3.2 Prefetching
3.3 Branchless Eytzinger
3.4 Batched Eytzinger

3.4.1 Non-prefetched
3.4.2 Prefetched
4 Eytzinger or BinSearch?
5 Memory efficiency – parallel search and comparison to S-trees
6 Interpolation search
7 Conclusion and takeaways
1 Optimizing Binary Search And Interpolation Search
 
 
 

This blogpost is a preliminary of the
post on static
search trees. We will be looking into binary search and how it can be
optimized using different memory layouts (Eytzinger), branchless
techniques and careful use of prefetching. In addition, we will explore
batching. Our language of choice will be Rust.]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Thoughts on Consensus MPHF and tiny pointers]]></title>
        <id>https://curiouscoding.nl/posts/consensus/</id>
        <link href="https://curiouscoding.nl/posts/consensus/"/>
        <updated>2025-02-11T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
1 Consensus

1.1 Consensus-RecSplit
2 IDEA: Consensus-PtrHash
3 Tiny pointers and optimal open addressing hash tables
These are some thoughts on the Consensus-based MPHF presented in
Lehmann et al. (2025), and how this could be applied to PtrHash:
Lehmann, Hans-Peter, Peter Sanders, Stefan Walzer, and Jonatan Ziegler. 2025. “Combined Search and Encoding for Seeds, with an Application to Minimal Perfect Hashing.” arXiv. https://doi.org/10.48550/ARXIV.2502.05613.
Below are also some thoughts on the papers on tiny pointers, used to achieve
hash tables with load factors very close to 1: Bender et al. (2021), Farach-Colton, Krapivin, and Kuszmaul (2025).]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Thread-safe memory copy]]></title>
        <id>https://lemire.me/blog/?p=21864</id>
        <link href="https://lemire.me/blog/2025/02/07/thread-safe-memory-copy/"/>
        <updated>2025-02-07T23:12:34.000Z</updated>
        <summary type="html"><![CDATA[A common operation in software is the copy of a block of memory. In C/C++, we often call the function memcpy for this purpose. But what happens if, while you are copying the data, another thread is modifying either the source or the destination? The result is fundamentally unpredictable and almost surely a programming error. … Continue reading Thread-safe memory copy]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
</feed>