<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2024-03-03T00:54:10.665Z</id>
    <title>osmos::feed</title>
    <updated>2024-03-03T00:54:10.665Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Kafka versus Nabokov]]></title>
        <id>https://matklad.github.io/2024/03/02/Kafka-vs-Nabokov.html</id>
        <link href="https://matklad.github.io/2024/03/02/Kafka-vs-Nabokov.html"/>
        <updated>2024-03-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Uplifting a lobste.rs comment to a stand-alone post.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing bpftop: Streamlining eBPF performance optimization]]></title>
        <id>https://medium.com/p/6a727c1ae2e5</id>
        <link href="https://netflixtechblog.com/announcing-bpftop-streamlining-ebpf-performance-optimization-6a727c1ae2e5?source=rss----2615bd06b42e---4"/>
        <updated>2024-02-26T16:43:30.000Z</updated>
        <summary type="html"><![CDATA[By Jose Fernandez]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Book review: Theft of Fire by Devon Eriksen]]></title>
        <id>https://lemire.me/blog/?p=21135</id>
        <link href="https://lemire.me/blog/2024/02/24/book-review-theft-of-fire-by-devon-eriksen/"/>
        <updated>2024-02-24T18:35:03.000Z</updated>
        <summary type="html"><![CDATA[When I was young, science fiction was the genre of choice for many engineers and scientists. But the genre declined significantly in recent years. Part of the problem is the rise dystopian fiction. In the imagined future, we are no longer conquering space or developing new fantastic technologies, but rather, increasingly, battling the consequences of … Continue reading Book review: Theft of Fire by Devon Eriksen]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Measuring energy usage: regular code vs. SIMD code]]></title>
        <id>https://lemire.me/blog/?p=21126</id>
        <link href="https://lemire.me/blog/2024/02/19/measuring-energy-usage-regular-code-vs-simd-code/"/>
        <updated>2024-02-19T21:39:32.000Z</updated>
        <summary type="html"><![CDATA[Modern processor have fancy instructions that can do many operations at one using wide registers: SIMD instructions. Intel and AMD have 512-bit registers and associated instructions under AVX-512. You expect these instructions to use more power, more energy. However, they get the job done faster. Do you save energy overall? You should expect so. Let … Continue reading Measuring energy usage: regular code vs. SIMD code]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bloom Filters]]></title>
        <id>https://samwho.dev/bloom-filters/</id>
        <link href="https://samwho.dev/bloom-filters/"/>
        <updated>2024-02-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[.bf {
  width: 100%;
  height: 150px;
}

@media only screen and (min-width: 320px) and (max-width: 479px) {
  .bf {
    height: 200px;
  }
}

@media only screen and (min-width: 480px) and (max-width: 676px) {
  .bf {
    height: 200px;
  }
 }

@media only screen and (min-width: 677px) and (max-width: 991px) {
  .bf {
    height: 150px;
  }
}

form {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: stretch;
}

input {
    border: 1px solid rgb(119, 119, 119);
    padding: 0.25rem;
    border-radius: 0.25rem;
    height: 2em;
    line-height: 2em;
}

.aside {
  padding: 2rem;
  width: 100vw;
  position: relative;
  margin-left: -50vw;
  left: 50%;
  background-color: #eeeeee;

  display: flex;
  align-items: center;
  flex-direction: column;
}

.aside > * …]]></summary>
        <author>
            <name>samwho.dev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sequential A/B Testing Keeps the World Streaming Netflix
Part 1: Continuous Data]]></title>
        <id>https://medium.com/p/cba6c7ed49df</id>
        <link href="https://netflixtechblog.com/sequential-a-b-testing-keeps-the-world-streaming-netflix-part-1-continuous-data-cba6c7ed49df?source=rss----2615bd06b42e---4"/>
        <updated>2024-02-13T19:10:28.000Z</updated>
        <summary type="html"><![CDATA[Michael Lindon, Chris Sanden, Vache Shirikian, Yanjun Liu, Minal Mishra, Martin Tingley]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing SafeTest: A Novel Approach to Front End Testing]]></title>
        <id>https://medium.com/p/37f9f88c152d</id>
        <link href="https://netflixtechblog.com/introducing-safetest-a-novel-approach-to-front-end-testing-37f9f88c152d?source=rss----2615bd06b42e---4"/>
        <updated>2024-02-13T16:07:48.000Z</updated>
        <summary type="html"><![CDATA[by Moshe Kolodny]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Window: Live, Constant Time Grep]]></title>
        <id>https://matklad.github.io/2024/02/10/window-live-constant-time-grep.html</id>
        <link href="https://matklad.github.io/2024/02/10/window-live-constant-time-grep.html"/>
        <updated>2024-02-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this post, I describe the design of window --- a small
grep-like utility I implemented in 500 lines of Rust. The utility itself is likely not that
interesting --- I bet some greybeared can implement an equivalent in 5 lines of bash. But the
design principles behind it might be interesting --- this small utility manages to combine core
ideas of rust-analyzer and TigerBeetle!]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JSON Parsing: Intel Sapphire Rapids versus AMD Zen 4]]></title>
        <id>https://lemire.me/blog/?p=21112</id>
        <link href="https://lemire.me/blog/2024/02/09/json-parsing-intel-sapphire-rapids-versus-amd-zen-4/"/>
        <updated>2024-02-09T19:57:29.000Z</updated>
        <summary type="html"><![CDATA[Intel has release a new generation of server processors (Sapphire Rapids) while the latest AMD technology (Zen 4) is now broadly available. There are extensive comparisons available. Of particular interest is the open benchmark results which assess various aspects of processor speeds, including JSON parsing performance. In these benchmarks, AMD systems appear to dominate. I … Continue reading JSON Parsing: Intel Sapphire Rapids versus AMD Zen 4]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[An improved chkstk function on Windows]]></title>
        <id>https://nullprogram.com/blog/2024/02/05/</id>
        <link href="https://nullprogram.com/blog/2024/02/05/"/>
        <updated>2024-02-05T17:56:05.000Z</updated>
        <summary type="html"><![CDATA[If you’ve spent much time developing with Mingw-w64 you’ve likely seen the
symbol ___chkstk_ms, perhaps in an error message. It’s a little piece of
runtime provided by GCC via libgcc which ensures enough of the stack is
committed for the caller’s stack frame. The “function” uses a custom ABI
and is implemented in assembly. So is the subject of this article, a
slightly improved implementation soon to be included in w64devkit as
libchkstk (-lchkstk).
The MSVC toolchain has an identical (x64) or similar (x86) function named
__chkstk. We’ll discuss that as well, and w64devkit will include x86 and
x64 implementations, useful when linking with MSVC object files. The new
x86 __chkstk in particular is also better than the MSVC definition.
A note on spelling: ___chkstk_ms is spelled with three unde…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How fast is rolling Karp-Rabin hashing?]]></title>
        <id>https://lemire.me/blog/?p=21109</id>
        <link href="https://lemire.me/blog/2024/02/04/how-fast-is-rolling-karp-rabin-hashing/"/>
        <updated>2024-02-04T20:29:59.000Z</updated>
        <summary type="html"><![CDATA[A hash function maps values (e.g., strings) into a fixed number of strings, typically smaller than the original. It is useful to compare quickly two long strings, for example. Instead of comparing the strings, you may compare the hash values. A simple hash function consists in repeatedly multiplying the hash value by some constant B … Continue reading How fast is rolling Karp-Rabin hashing?]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Computing] The Bootstrapping Exam: Escaping from “Trusting Trust”]]></title>
        <id>https://www.devever.net/~hl/bootstrapping-exam</id>
        <link href="https://www.devever.net/~hl/bootstrapping-exam"/>
        <updated>2024-02-04T11:37:00.000Z</updated>
        <summary type="html"><![CDATA[<div type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p xmlns="http://www.w3.org/1999/xhtml">The following is an “exam”. To my knowledge, nobody has ever passed it, as it
is an  difficult challenge. But I am firmly convinced it is
possible, and it makes for an interesting discussion.<em>extremely</em></p></div></div>]]></summary>
        <author>
            <name>devever.net/~hl</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Hμblog] 37C3 talk recording: Adventures in Reverse Engineering Broadcom NIC Firmware]]></title>
        <id>https://www.devever.net/~hl/u/202402#03a</id>
        <link href="https://www.devever.net/~hl/u/202402#03a"/>
        <updated>2024-02-03T07:31:16.000Z</updated>
        <summary type="html"><![CDATA[<div type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><ul><li><a href="https://media.ccc.de/v/37c3-11781-adventures_in_reverse_engineering_broadcom_nic_firmware">37C3 talk recording: Adventures in Reverse Engineering Broadcom NIC Firmware</a></li></ul><p xmlns="http://www.w3.org/1999/xhtml">For those that missed it, a recording of my talk at 37C3 can be found here.</p></div></div>]]></summary>
        <author>
            <name>devever.net/~hl</name>
        </author>
    </entry>
</feed>