<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2025-01-26T01:09:45.010Z</id>
    <title>osmos::feed</title>
    <updated>2025-01-26T01:09:45.010Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Regular expressions can blow up!]]></title>
        <id>https://lemire.me/blog/?p=21848</id>
        <link href="https://lemire.me/blog/2025/01/25/regular-expressions-can-blow-up/"/>
        <updated>2025-01-25T03:53:36.000Z</updated>
        <summary type="html"><![CDATA[Regular expressions, often abbreviated as regex, are a powerful tool for pattern matching within text. For example, the expression \d*\.?\d+ would match a positive number such as 1.1 or 12. If designed and tested with care, regular expressions may be used in mission-critical software. However, their power comes with a risk: it is possible to … Continue reading Regular expressions can blow up!]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nim Community Survey 2024 Results]]></title>
        <id>https://nim-lang.org//blog/2025/01/23/community-survey-results-2024.html</id>
        <link href="https://nim-lang.org//blog/2025/01/23/community-survey-results-2024.html"/>
        <updated>2025-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Nim community survey 2024 has been open for two months, and we have received 367 responses – less than in previous years, but we’ll still try to draw conclusions about our users and their habits.
Before we go into details, we would like to thank all the people who took the time to respond.
We really appreciate the feedback!
The goal of this survey was primarily to determine how our community is using Nim, in order to better understand how we should be improving it.
Do you use Nim?
Based on the answer to this question, the respondents were divided into two groups that each received a separate set of questions.

Approximately three quarters of the respondents use Nim (40% frequently, 36% occasionally), while the remaining quarter is divided between people who never used Nim (7%) and peop…]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Checking whether an ARM NEON register is zero]]></title>
        <id>https://lemire.me/blog/?p=21836</id>
        <link href="https://lemire.me/blog/2025/01/20/checking-whether-an-arm-neon-register-is-zero/"/>
        <updated>2025-01-20T01:05:51.000Z</updated>
        <summary type="html"><![CDATA[Your phone probably runs on 64-bit ARM processors. These processors are ubiquitous: they power the Nintendo Switch, they power cloud servers at both Amazon AWS and Microsoft Azure, they power fast laptops, and so forth. ARM processors have special powerful instructions called ARM NEON. They provide a specific type of parallelism called Single instruction, multiple … Continue reading Checking whether an ARM NEON register is zero]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Examples of quick hash tables and dynamic arrays in C]]></title>
        <id>https://nullprogram.com/blog/2025/01/19/</id>
        <link href="https://nullprogram.com/blog/2025/01/19/"/>
        <updated>2025-01-19T04:10:33.000Z</updated>
        <summary type="html"><![CDATA[This article durably captures my reddit comment showing techniques
for std::unordered_map and std::vector equivalents in C programs. The
core, important features of these data structures require only a dozen or
so lines of code apiece. They compile quickly, and tend to run faster in
debug builds than release builds of their C++ equivalents. What they
lack in genericity they compensate in simplicity. Nothing here will be
new. Everything has been covered in greater detail previously, which I
will reference when appropriate.
For a concrete goal, we will build a data structure representing an
process environment, along with related functionality to make it more
interesting. That is, we’ll build a string-to-string map.
Allocator
The foundation is our allocator, a simple bump allocator, so
we’ll…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Interpreting Brainfuck in Haskell]]></title>
        <id>https://abhinavsarkar.net/posts/brainfuck-interpreter/?mtm_campaign=feed</id>
        <link href="https://abhinavsarkar.net/posts/brainfuck-interpreter/?mtm_campaign=feed"/>
        <updated>2025-01-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Writing an interpreter for Brainfuck is almost a rite of passage for any programming language implementer,
and it’s my turn now. In this post, we’ll write not one but four Brainfuck interpreters in Haskell. Let’s go!</p>]]></summary>
        <author>
            <name>Posts on abhinavsarkar.net</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The ivory tower’s drift: how academia’s preference for theory over empiricism fuels scientific stagnation]]></title>
        <id>https://lemire.me/blog/?p=21831</id>
        <link href="https://lemire.me/blog/2025/01/15/the-ivory-towers-drift-how-academias-preference-for-theory-over-empiricism-fuels-scientific-stagnation/"/>
        <updated>2025-01-15T20:30:06.000Z</updated>
        <summary type="html"><![CDATA[Almost all of academic science has moved away from actual (empirical) science. It is higher status to work on theories and models. I believe that it is closely related to well documented scientific stagnation as theory is often ultimately sterile. This tendency is quite natural in academia if there is no outside pressure… And is … Continue reading The ivory tower’s drift: how academia’s preference for theory over empiricism fuels scientific stagnation]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript hashing speed comparison: MD5 versus SHA-256]]></title>
        <id>https://lemire.me/blog/?p=21825</id>
        <link href="https://lemire.me/blog/2025/01/11/javascript-hashing-speed-comparison-md5-versus-sha-256/"/>
        <updated>2025-01-11T16:21:18.000Z</updated>
        <summary type="html"><![CDATA[Hashing algorithms convert input data into a fixed-size string of characters, known as a hash value or digest. These algorithms are one-way functions, meaning the original data cannot be feasibly retrieved from the hash, which makes them useful for data integrity, password storage, and digital signatures. MD5 and SHA-256 are two such hashing algorithms with … Continue reading JavaScript hashing speed comparison: MD5 versus SHA-256]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Counting the digits of 64-bit integers]]></title>
        <id>https://lemire.me/blog/?p=21816</id>
        <link href="https://lemire.me/blog/2025/01/07/counting-the-digits-of-64-bit-integers/"/>
        <updated>2025-01-07T21:41:57.000Z</updated>
        <summary type="html"><![CDATA[Given an integer in software, you may want to know how many decimal digits it needs. For example, the integer 100 requires 3 digits, the integer 9999 requires 4 digits. It would be an easy problem if we could compute the logarithm in base 10 of an integer quickly. Unfortunately, our computers work in base … Continue reading Counting the digits of 64-bit integers]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Title Launch Observability at Netflix Scale]]></title>
        <id>https://medium.com/p/19ea916be1ed</id>
        <link href="https://netflixtechblog.com/title-launch-observability-at-netflix-scale-19ea916be1ed?source=rss----2615bd06b42e---4"/>
        <updated>2025-01-07T01:25:58.000Z</updated>
        <summary type="html"><![CDATA[Part 2: Navigating Ambiguity]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Part 3: A Survey of Analytics Engineering Work at Netflix]]></title>
        <id>https://medium.com/p/e67f0aa82183</id>
        <link href="https://netflixtechblog.com/part-3-a-survey-of-analytics-engineering-work-at-netflix-e67f0aa82183?source=rss----2615bd06b42e---4"/>
        <updated>2025-01-06T19:27:38.000Z</updated>
        <summary type="html"><![CDATA[This article is the last in a multi-part series sharing a breadth of Analytics Engineering work at Netflix, recently presented as part of…]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Solving Advent of Code “Seating System” with Comonads and Stencils]]></title>
        <id>https://abhinavsarkar.net/posts/solving-aoc20-seating-system/?mtm_campaign=feed</id>
        <link href="https://abhinavsarkar.net/posts/solving-aoc20-seating-system/?mtm_campaign=feed"/>
        <updated>2025-01-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>In this post, we solve the Advent of Code 2020 <a href="https://adventofcode.com/2020/day/11" target="_blank" rel="noopener">“Seating System”</a> challenge in Haskell using comonads and stencils.</p>]]></summary>
        <author>
            <name>Posts on abhinavsarkar.net</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Artificial Intelligence as the Expert’s Lever: Elevating Human Expertise in the Age of AI]]></title>
        <id>https://lemire.me/blog/?p=21813</id>
        <link href="https://lemire.me/blog/2025/01/04/artificial-intelligence-as-the-experts-lever-elevating-human-expertise-in-the-age-of-ai/"/>
        <updated>2025-01-04T17:37:14.000Z</updated>
        <summary type="html"><![CDATA[The more likely outcome of the rise of generative artificial intelligence is higher value for the best experts… where ‘expert’ means ‘someone with experience solving real problems’. “While one may worry that AI will simply render expertise redundant and experts superfluous, history and economic logic suggest otherwise. AI is a tool, like a calculator or … Continue reading Artificial Intelligence as the Expert’s Lever: Elevating Human Expertise in the Age of AI]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Setting up traffic monitoring using GoAccess]]></title>
        <id>https://curiouscoding.nl/posts/goaccess-setup/</id>
        <link href="https://curiouscoding.nl/posts/goaccess-setup/"/>
        <updated>2025-01-03T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
1 Nginx setup
2 GoAccess configuration
3 Systemd setup
4 Serving the static file
5 Serving live statistics
6 GeoIP database
GoAccess (goaccess.io, github) is a tool that analyses server logs and gives real-time
statistics on network traffic.
It took me some time to figure out exactly how to get the real-time websocket
server working through Nginx, so I’m just sharing my configuration here.
Install via your package manager, e.g. sudo pacman -S goaccess on Arch.]]></summary>
        <author>
            <name>home on CuriousCoding</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Part 2: A Survey of Analytics Engineering Work at Netflix]]></title>
        <id>https://medium.com/p/4f1f53b4ab0f</id>
        <link href="https://netflixtechblog.com/part-2-a-survey-of-analytics-engineering-work-at-netflix-4f1f53b4ab0f?source=rss----2615bd06b42e---4"/>
        <updated>2025-01-02T21:07:11.000Z</updated>
        <summary type="html"><![CDATA[This article is the second in a multi-part series sharing a breadth of Analytics Engineering work at Netflix, recently presented as part of…]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How does your URL parser handle Unicode?]]></title>
        <id>https://lemire.me/blog/?p=21809</id>
        <link href="https://lemire.me/blog/2025/01/02/how-does-your-url-parser-handle-unicode/"/>
        <updated>2025-01-02T16:07:31.000Z</updated>
        <summary type="html"><![CDATA[Most strings today in software are Unicode strings. It means that you can include mathematical symbols, emojis and so forth. There are many different versions of the letter ‘M’, for example: the Roman letter M (U+004D) is semantically different from the Roman numeral Ⅿ (U+216F) while they both often have the same visual representation. John … Continue reading How does your URL parser handle Unicode?]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Interesting Links for December 2024]]></title>
        <id>https://notes.abhinavsarkar.net/2024/links-12</id>
        <link href="https://notes.abhinavsarkar.net/2024/links-12"/>
        <updated>2024-12-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>A special <em>Haskell</em> edition of some interesting articles I recently read on the internet, starting
with some Haskell-in-practice articles:</p>

<ul>
  <li>
    <p>I like this new trend of making scripting dialects of full-fledged programming languages. Joining the
likes of <a href="https://babashka.org/">Babashka</a> and <a href="https://horstmann.com/unblog/2024-12-11/index.html">Small Java</a>
is <a href="https://chrisdone.com/posts/hell/">Hell, a Shell scripting Haskell dialect</a> by Chris Done.
I usually write my scripts in Python, but I sorely miss static typing and functional programming, so naturally, I’m excited for Hell.
It is in a nascent stage now, but hopefully, it will grow into something nice and usable.</p>
  </li>
  <li>
    <p>Many think that Haskell is too complex for real-world projects. I really like this solid
advice by Patrick Thomson for putting Haskell in real-world use:
<a href="https://blog.sumtypeofway.com/posts/fast-iteration-with-haskell.html">Towards Faster Iteration in Industrial Haskell</a>,
where he writes about Haskell editors and tooling, GHC extensions, type system, building, and deployment.</p>
  </li>
  <li>
    <p>Haskell is one of the few programming languages that are lazy by default, and often this is a source of
a lot of headaches for programmers, causing space leaks, slow computation, or hard to debug stack traces. But
sometimes laziness can be harnessed for writing better programs, like Jasper Van der Jeugt does
to create an efficient and elegant layout algorithm for creating photo collages in
<a href="https://jaspervdj.be/posts/2023-07-22-lazy-layout.html">Lazy Layout</a>.</p>
  </li>
  <li>
    <p>I love it when people use advanced programming techniques to solve their day-to-day problems! In
<a href="https://alt-romes.github.io/posts/2024-08-14-planning-a-workout-week-with-100-lines-of-haskell.html">Planning Weekly Workouts in 100 Lines of Haskell</a>,
Rodrigo Mesquita uses <a href="https://en.wikipedia.org/wiki/Logic_programming">Logic Programming</a> in Haskell
to create a custom workout plan for themselves.</p>
  </li>
  <li>
    <p>For some unknown reasons, functional programming and music seem to mesh well together. Maybe it is
because both have combinatorial and compositional natures. In <a href="https://blog.fmap.fr/posts/karplus-strong-sound-synthesis.html">Cheap Guitars and Drums in Haskell</a>,
Alp Mestanogullari uses Haskell to do digital audio synthesis by implementing the
<a href="https://en.wikipedia.org/wiki/Karplus%E2%80%93Strong_string_synthesis">Karplus-Strong algorithm</a>.</p>
  </li>
  <li>
    <p>Another interesting use of Haskell to solve problems in clean and interesting way: Vehbi Sinan Tunalioglu
uses the Diagrams library to generate dynamic <a href="https://ogp.me/">OpenGraph</a> preview image for their website pages as detailed in
<a href="https://thenegation.com/posts/haskell-diagrams-dynamic-og/">More Haskell Diagrams: Dynamic OpenGraph Images</a>.
Currently I do this for my website in the crudest way possible: open the page in a browser manually
and save a screenshot. Naturally, I end up doing it only once per page and the previews are not dynamic.
I plan to switch to using Vehbi’s technique in future.</p>
  </li>
</ul>

<p>Moving on to some Haskell-for-fun articles:</p>

<ul>
  <li>
    <p>Water Sort is a puzzle game where you have to sort coloured water into bottles. In <a href="https://nicaudinet.github.io/2024/10/14/watersort-haskell/">Water Sort in Haskell</a>
Nicolas Audinet de Pieuchon creates the game as a terminal UI in Haskell using <a href="https://guide.elm-lang.org/architecture/">the Elm architecture</a>.
I like how Haskell and functional programming make writing and understanding such software easy by
cleanly separating the game logic and the rendering logic.</p>
  </li>
  <li>
    <p>I’ve done <a href="https://adventofcode.com">Avdent of Code</a> in Haskell for a couple of years now, and that has made me quite interested
in efficient and convenient data structures in Haskell. Brent Yorgey has written about a bunch of them in
their <a href="https://byorgey.github.io/blog/tag/challenge.html">Competitive Programming in Haskell</a> series, and the latest article is about efficiently
calculating a measure for sliding windows of lists: <a href="https://byorgey.github.io/blog/posts/2024/11/27/stacks-queues.html">Stacks, Queues, and Monoidal Sliding Windows</a>.</p>
  </li>
</ul>

<p>Next, some Haskell concepts articles:</p>

<ul>
  <li>
    <p>Haskell is notorious as a hard to learn language and I think some of that ill fame in deserved. Because
of a powerful and flexible type-system, Haskell lets users solve their problems in many different ways,
some of which could be too obtuse for many to understand.
<a href="https://blog.jle.im/entry/levels-of-type-safety-haskell-lists.html">Seven Levels of Type Safety in Haskell: Lists</a>
by Justin Le shows seven different ways of working with lists in Haskell, only one of which is
what we know as List (<code class="language-plaintext highlighter-rouge">[a]</code>) in usual Haskell. It’s still fun to learn about these, and who knows,
some of them may come handy some day.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">fix</code> is one of those clever Haskell things that are very cool and terse but take a while to understand.
In <a href="https://gilmi.me/blog/post/2021/03/11/fix-by-example"><code class="language-plaintext highlighter-rouge">fix</code> by Example</a> Gil Mizrahi explains how it
works by providing motivating examples. But to be honest, I took me quite some tries to <strong>get</strong> it even
after reading a bunch about it.</p>
  </li>
  <li>Arrows are a part of Haskell that I don’t much understand, or use. Haskell even has <a href="https://www.haskell.org/arrows/syntax.html">special syntax</a> for
them. In <a href="https://langdev.stackexchange.com/revisions/2372/2">Why Arrows?</a> <a href="https://lexi-lambda.github.io/">Alexis King</a>
explains why we need arrows at all. Instead of commenting on it, I’m gonna quote a part:
    <blockquote>
      <p>The key insight behind arrows comes from the following observation: it’s impossible to analyze the
structure of a monadic function <code class="language-plaintext highlighter-rouge">a -&gt; m b</code> without applying it because functions are opaque—the only
thing we can do with one is apply it. Instead, we need to build our computation out of “function-like values”
that are not opaque—we must be able to do more than just apply them.</p>
    </blockquote>
  </li>
  <li>
    <p>Here is an interesting use of a rather complicated concept from Category Theory: MangoIV shows in
<a href="https://mangoiv.com/posts/2024-11-23-codensity.html">Codensity for Resource Management</a> a way to
use the <a href="https://en.wikipedia.org/wiki/Codensity_monad">Codensity monad</a> for conveniently managing
resources in Haskell code.</p>
  </li>
  <li>
    <p>If you have read any Haskell code, you’d know that Haskellers love writing terse code (myself included).
That includes using a lot of single-letter variable names, which may make the code very unreadable for an
unacquainted eye. But there is a method to this madness, and Jack Kelly captures a comprehensive knowledge
about such names in <a href="http://jackkelly.name/blog/archives/2024/10/12/a_dictionary_of_single-letter_variable_names/index.html">A Dictionary of Single-Letter Variable Names</a>.</p>
  </li>
  <li>Stephen Diehl writes a thorough tutorial about how to generate X86 assembly from scratch for <a href="https://en.wikipedia.org/wiki/Just-in-time_compilation">JIT compilation</a>,
and how to make it easy by exploiting a monadic interface
in <a href="https://www.stephendiehl.com/posts/monads_machine_code/">Monads to Machine Code</a>.</li>
</ul>

<p>Finally, some Haskell philosophy to finish it off:</p>

<ul>
  <li>Adam Dueck muses “<a href="https://adueck.github.io/blog/on-haskell-jazz-and-pure-math/">Why Does Everyone Hate Haskell, Jazz, and Pure Math?</a>”,
and posits that exploring interesting things that may not be immediately useful may actually cause
more practical advances in the long term.</li>
</ul>

<p>That’s it for this year. Have a happy and prosperous 2025!</p>

<p>Like, share, or comment on this post on <a href="https://fantastic.earth/@abnv/113748806936137827" class="mastodon-link">Mastodon</a>.</p>]]></summary>
        <author>
            <name>Posts on abhinavsarkar.net</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[What Is a dependency?]]></title>
        <id>https://matklad.github.io/2024/12/30/what-is-dependency.html</id>
        <link href="https://matklad.github.io/2024/12/30/what-is-dependency.html"/>
        <updated>2024-12-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[For whatever reason, I've been thinking about dependencies lately:]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Efficient In-Place UTF-16 Unicode Correction with ARM NEON]]></title>
        <id>https://lemire.me/blog/?p=21795</id>
        <link href="https://lemire.me/blog/2024/12/29/efficient-in-place-utf-16-unicode-correction-with-arm-neon/"/>
        <updated>2024-12-29T18:24:33.000Z</updated>
        <summary type="html"><![CDATA[Modern-day text in software can be expected to be Unicode. Unicode is stored in two formats: UTF-8 and UTF-16. UTF-16 is an encoding system used by several platforms and applications to represent Unicode characters. Notably, Microsoft Windows employs UTF-16 for internal operations, file names, and registry keys, while Java and JavaScript use it for string … Continue reading Efficient In-Place UTF-16 Unicode Correction with ARM NEON]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
</feed>