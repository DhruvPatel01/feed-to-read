<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2023-06-18T01:14:28.490Z</id>
    <title>osmos::feed</title>
    <updated>2023-06-18T01:14:28.490Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Migrating Netflix to GraphQL Safely]]></title>
        <id>https://medium.com/p/8e1e4d4f1e72</id>
        <link href="https://netflixtechblog.com/migrating-netflix-to-graphql-safely-8e1e4d4f1e72?source=rss----2615bd06b42e---4"/>
        <updated>2023-06-14T17:59:46.000Z</updated>
        <summary type="html"><![CDATA[By Jennifer Shin, Tejas Shikhare, Will Emmanuel]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Citogenesis in science and the importance of real problems]]></title>
        <id>http://lemire.me/blog/?p=3931</id>
        <link href="https://lemire.me/blog/2023/06/14/citogenesis-in-science-and-the-importance-of-real-problems/"/>
        <updated>2023-06-14T10:05:44.000Z</updated>
        <summary type="html"><![CDATA[Scientists publish papers in refereed journals and conferences: they write up their results and we ask anonymous referees to assess it. If the work is published, presumably because the anonymous referees found nothing objectionable, the published paper joins the “literature”. It is not a strict requirement: you can do excellent research without publishing in refereed … Continue reading Citogenesis in science and the importance of real problems]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Migrating Critical Traffic At Scale with No Downtime — Part 2]]></title>
        <id>https://medium.com/p/4b1c8c7155c1</id>
        <link href="https://netflixtechblog.com/migrating-critical-traffic-at-scale-with-no-downtime-part-2-4b1c8c7155c1?source=rss----2615bd06b42e---4"/>
        <updated>2023-06-13T17:23:17.000Z</updated>
        <summary type="html"><![CDATA[Shyam Gala, Javier Fernandez-Ivern, Anup Rokkam Pratap, Devang Shah]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Escrow Buddy: An open-source tool from Netflix for remediation of missing FileVault keys in MDM]]></title>
        <id>https://medium.com/p/815aef5107cd</id>
        <link href="https://netflixtechblog.com/escrow-buddy-an-open-source-tool-from-netflix-for-remediation-of-missing-filevault-keys-in-mdm-815aef5107cd?source=rss----2615bd06b42e---4"/>
        <updated>2023-06-12T16:36:25.000Z</updated>
        <summary type="html"><![CDATA[Netflix has open-sourced Escrow Buddy, which helps Security and IT teams ensure they have valid FileVault recovery keys for all their Macs…]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Science and Technology links (June 11 2023)]]></title>
        <id>https://lemire.me/blog/?p=20619</id>
        <link href="https://lemire.me/blog/2023/06/11/science-and-technology-links-june-11-2023/"/>
        <updated>2023-06-11T19:45:32.000Z</updated>
        <summary type="html"><![CDATA[Similar species can have vastly different lifespan. Researchers have been looking for the limiting factors that explain these differences. As we age, our genes are expressed differently through methylation. Different species vary their methylation at different speeds. There is some evidence that it could be that the methylation rate that determines the lifespan. If that … Continue reading Science and Technology links (June 11 2023)]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Parsing IP addresses crazily fast]]></title>
        <id>https://lemire.me/blog/?p=20611</id>
        <link href="https://lemire.me/blog/2023/06/08/parsing-ip-addresses-crazily-fast/"/>
        <updated>2023-06-08T20:47:56.000Z</updated>
        <summary type="html"><![CDATA[Most of us are familiar with IP addresses: they are strings typically of the form “ddd.ddd.ddd.ddd” where ddd is a decimal number of up to three digits in the range 0 to 255. For example, 127.0.0.1 or 192.168.0.2. Each of the four number is a byte value, and the address is an IPv4 network address … Continue reading Parsing IP addresses crazily fast]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Native Frame Rate Playback]]></title>
        <id>https://medium.com/p/6c87836a948</id>
        <link href="https://netflixtechblog.com/native-frame-rate-playback-6c87836a948?source=rss----2615bd06b42e---4"/>
        <updated>2023-06-05T16:31:44.000Z</updated>
        <summary type="html"><![CDATA[This article talks about a novel HDMI technology and how it is used within the Netflix Application to improve a user’s experience.]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Science and Technogy links (June 3 2023)]]></title>
        <id>https://lemire.me/blog/?p=20599</id>
        <link href="https://lemire.me/blog/2023/06/03/science-and-technogy-links-june-3-2023/"/>
        <updated>2023-06-03T20:41:56.000Z</updated>
        <summary type="html"><![CDATA[There are fewer serial killers these days. Some suggests it is due to better forensic techniques: we catch the killers faster and more efficiently. Between the beginnings of the Web (1996) and today, the household Internet connection bandwidth got over 5000 times faster. Thus what took nearly two hours of download time back then can … Continue reading Science and Technogy links (June 3 2023)]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Implementing Co, a Small Language With Coroutines #4: Adding Channels]]></title>
        <id>https://abhinavsarkar.net/posts/implementing-co-4/?mtm_campaign=feed</id>
        <link href="https://abhinavsarkar.net/posts/implementing-co-4/?mtm_campaign=feed"/>
        <updated>2023-06-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>In the <a href="https://abhinavsarkar.net/posts/implementing-co-3/">previous post</a>, we added coroutines to <span class="fancy">Co</span>, the small language we are implementing in this series of posts. In this post, we add channels to it to be able to communicate between coroutines.</p>
<ol type="1">
<li><a href="https://abhinavsarkar.net/posts/implementing-co-1/">Implementing Co #1: The Parser</a></li>
<li><a href="https://abhinavsarkar.net/posts/implementing-co-2/">Implementing Co #2: The Interpreter</a></li>
<li><a href="https://abhinavsarkar.net/posts/implementing-co-3/">Implementing Co #3: Adding Coroutines</a></li>
<li>Implementing Co #4: Adding Channels</li>
<li>Implementing Co #5: Adding Sleep</li>
</ol>]]></summary>
        <author>
            <name>Posts on abhinavsarkar.net</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[This Month with Nim: April and May 2023]]></title>
        <id>https://nim-lang.org//blog/2023/06/02/this-month-with-nim.html</id>
        <link href="https://nim-lang.org//blog/2023/06/02/this-month-with-nim.html"/>
        <updated>2023-06-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Nuance
Author: metagn
nuance is a library that provides:
Runtime-compatible types to represent Nim (untyped) AST including filename, line and column information.
Serialization of these types into an S-expression format that can be directly inserted inside a Nim triple-quoted string.
Deserialization to these types that works in the compile-time VM.
Conversion from these types into the compile-time NimNode type that can be used in macros.
This allows complex systems that generate Nim code to do it in a much faster and easier way than the current alternatives (making all code run only in the compile-time VM, generating it as raw text, interfacing with the compiler codebase etc.).
Examples of use cases may be templating engines, alternative parsers etc.
As a demonstration of what we can do, li…]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Worst Zig Version Manager]]></title>
        <id>https://matklad.github.io/2023/06/02/the-worst-zig-version-manager.html</id>
        <link href="https://matklad.github.io/2023/06/02/the-worst-zig-version-manager.html"/>
        <updated>2023-06-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[https://github.com/matklad/hello-getzig]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ensuring the Successful Launch of Ads on Netflix]]></title>
        <id>https://medium.com/p/f99490fdf1ba</id>
        <link href="https://netflixtechblog.com/ensuring-the-successful-launch-of-ads-on-netflix-f99490fdf1ba?source=rss----2615bd06b42e---4"/>
        <updated>2023-06-01T19:22:48.000Z</updated>
        <summary type="html"><![CDATA[By Jose Fernandez, Ed Barker, Hank Jacobs]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Peak credentialism]]></title>
        <id>https://lemire.me/blog/?p=20602</id>
        <link href="https://lemire.me/blog/2023/06/01/peak-credentialism/"/>
        <updated>2023-06-01T16:40:15.000Z</updated>
        <summary type="html"><![CDATA[How much is a degree from a prestigious university worth? The answer is a bit difficult to answer because there are many cofounding factors: people from the connected class  (folks that ‘know people’) tend to attend the most prestigious universities, and they also tend to do well professionally. It is likely that highly connected people … Continue reading Peak credentialism]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hand-written Windows API prototypes: fast, flexible, and tedious]]></title>
        <id>https://nullprogram.com/blog/2023/05/31/</id>
        <link href="https://nullprogram.com/blog/2023/05/31/"/>
        <updated>2023-05-31T01:38:31.000Z</updated>
        <summary type="html"><![CDATA[I love fast builds, and for years I’ve been bothered by the build penalty
for translation units including windows.h. This header has an enormous
number of definitions and declarations and so, for C programs, it tends to
dominate the build time of those translation units. Most programs,
especially systems software, only needs a tiny portion of it. For example,
when compiling u-config with GCC, two thirds of the debug build was
spent processing windows.h just for 4 types, 16 definitions, and 16
prototypes.
To give a sense of the numbers, here’s empty.c, which does nothing but
include windows.h.

#include <windows.h>


With the current Mingw-w64 headers, that’s ~82kLOC (non-blank):

$ gcc -E empty.c | grep -vc '^$'
82041


With w64devkit this takes my system ~450ms to compile with GCC:

$ tim…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Expected performance of a Bloom filter]]></title>
        <id>https://lemire.me/blog/?p=20589</id>
        <link href="https://lemire.me/blog/2023/05/26/expected-performance-of-a-bloom-filter/"/>
        <updated>2023-05-26T20:36:04.000Z</updated>
        <summary type="html"><![CDATA[A hash function is a function that maps a value (such as a string) to an integer value. Typically, we want random-looking values. A Bloom filter is a standard data structure in computer science to approximate a set. Basically, you start with a large array of bits, all initialized at zero. Each time you want … Continue reading Expected performance of a Bloom filter]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Resilient LL Parsing Tutorial]]></title>
        <id>https://matklad.github.io/2023/05/21/resilient-ll-parsing-tutorial.html</id>
        <link href="https://matklad.github.io/2023/05/21/resilient-ll-parsing-tutorial.html"/>
        <updated>2023-05-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this tutorial, I will explain a particular approach to parsing, which gracefully handles syntax errors and is thus suitable for language servers, which, by their nature, have to handle incomplete and invalid code.
Explaining the problem and the solution requires somewhat less than a trivial worked example, and I want to share a couple of tricks not directly related to resilience, so the tutorial builds a full, self-contained parser, instead of explaining abstractly just the resilience.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Debugging a FUSE deadlock in the Linux kernel]]></title>
        <id>https://medium.com/p/c75cd7989b6d</id>
        <link href="https://netflixtechblog.com/debugging-a-fuse-deadlock-in-the-linux-kernel-c75cd7989b6d?source=rss----2615bd06b42e---4"/>
        <updated>2023-05-19T19:21:03.000Z</updated>
        <summary type="html"><![CDATA[Tycho Andersen]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The absurd cost of finalizers in Go]]></title>
        <id>https://lemire.me/blog/?p=20559</id>
        <link href="https://lemire.me/blog/2023/05/19/the-absurd-cost-of-finalizers-in-go/"/>
        <updated>2023-05-19T14:57:14.000Z</updated>
        <summary type="html"><![CDATA[The Go programming language makes it easy to call C code. Suppose you have the following C functions: char* allocate() { return (char*)malloc(100); } void free_allocated(char *c) { free(c); } Then you can call them from Go as follows: c := C.allocate() C.free_allocated(c) It works well. You might argue that my functions are useless, but … Continue reading The absurd cost of finalizers in Go]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
</feed>