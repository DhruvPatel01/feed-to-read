<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2024-03-31T00:57:09.265Z</id>
    <title>osmos::feed</title>
    <updated>2024-03-31T00:57:09.265Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Passing recursive C++ lambdas as function pointers]]></title>
        <id>https://lemire.me/blog/?p=21179</id>
        <link href="https://lemire.me/blog/2024/03/22/passing-recursive-c-lambdas-as-function-pointers/"/>
        <updated>2024-03-22T15:14:36.000Z</updated>
        <summary type="html"><![CDATA[In modern C++, as in many popular languages, you can create ‘lambdas’. Effectively, they are potentially anonymous function instances that you can create on the fly as you are programming, possibly inside another function. The following is a simple example. auto return1 = [](int n) -> int { return 1; }; What about recursive functions? … Continue reading Passing recursive C++ lambdas as function pointers]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Basic Things]]></title>
        <id>https://matklad.github.io/2024/03/22/basic-things.html</id>
        <link href="https://matklad.github.io/2024/03/22/basic-things.html"/>
        <updated>2024-03-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[After working on the initial stages of several largish projects, I accumulated a list of things that
share the following three properties:]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zig defer Patterns]]></title>
        <id>https://matklad.github.io/2024/03/21/defer-patterns.html</id>
        <link href="https://matklad.github.io/2024/03/21/defer-patterns.html"/>
        <updated>2024-03-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A short note about some unexpected usages of Zig's defer statement.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sequential Testing Keeps the World Streaming Netflix Part 2: Counting Processes]]></title>
        <id>https://medium.com/p/da6805341642</id>
        <link href="https://netflixtechblog.com/sequential-testing-keeps-the-world-streaming-netflix-part-2-counting-processes-da6805341642?source=rss----2615bd06b42e---4"/>
        <updated>2024-03-18T12:46:46.000Z</updated>
        <summary type="html"><![CDATA[Michael Lindon, Chris Sanden, Vache Shirikian, Yanjun Liu, Minal Mishra, Martin Tingley]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Measuring your system’s performance using software  (Go edition)]]></title>
        <id>https://lemire.me/blog/?p=21167</id>
        <link href="https://lemire.me/blog/2024/03/17/measuring-your-systems-performance-using-software-go-edition/"/>
        <updated>2024-03-17T21:24:01.000Z</updated>
        <summary type="html"><![CDATA[When programming software, we are working over an abstraction over a system. The computer hardware may not know about your functions, your variables, and your data. It may only see bits and instructions. Yet to write efficient software, the programmer needs to be aware of the characteristics of the underlying system. Thankfully, we can also … Continue reading Measuring your system’s performance using software  (Go edition)]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to read files quickly in JavaScript]]></title>
        <id>https://lemire.me/blog/?p=21158</id>
        <link href="https://lemire.me/blog/2024/03/12/how-to-read-files-quickly-in-javascript/"/>
        <updated>2024-03-12T15:43:09.000Z</updated>
        <summary type="html"><![CDATA[Suppose you need to read several files on a server using JavaScript. There are many ways to read files in JavaScript with a runtime like Node.js. Which one is best? Let us consider the various approaches. Using fs.promises const fs = require('fs/promises'); const readFile = fs.readFile; readFile("lipsum.txt", { encoding: 'utf-8' }) .then((data) => {...}) .catch((err) … Continue reading How to read files quickly in JavaScript]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How many political parties rule Canada? Fun with statistics]]></title>
        <id>https://lemire.me/blog/?p=21150</id>
        <link href="https://lemire.me/blog/2024/03/08/how-many-political-parties-rule-canada-fun-with-statistics/"/>
        <updated>2024-03-08T15:59:04.000Z</updated>
        <summary type="html"><![CDATA[Canada has several political parties with elected member of parliament: the Liberals, the Conservatives, the Bloc Québecois, de NDP and the Green. But do they behave as distinct political parties when voting, or are they somehow aligned? Voting data for the member of parliament in Canada is easily accessible as JSON or XML. Thus I … Continue reading How many political parties rule Canada? Fun with statistics]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Supporting Diverse ML Systems at Netflix]]></title>
        <id>https://medium.com/p/2d2e6b6d205d</id>
        <link href="https://netflixtechblog.com/supporting-diverse-ml-systems-at-netflix-2d2e6b6d205d?source=rss----2615bd06b42e---4"/>
        <updated>2024-03-07T18:33:07.000Z</updated>
        <summary type="html"><![CDATA[David J. Berg, Romain Cledat, Kayla Seeley, Shashank Srikanth, Chaoying Wang, Darin Yu]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bending pause times to your will with Generational ZGC]]></title>
        <id>https://medium.com/p/256629c9386b</id>
        <link href="https://netflixtechblog.com/bending-pause-times-to-your-will-with-generational-zgc-256629c9386b?source=rss----2615bd06b42e---4"/>
        <updated>2024-03-06T01:35:08.000Z</updated>
        <summary type="html"><![CDATA[The surprising and not so surprising benefits of generations in the Z Garbage Collector.]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Protecting paths in macro expansions by extending UTF-8]]></title>
        <id>https://nullprogram.com/blog/2024/03/05/</id>
        <link href="https://nullprogram.com/blog/2024/03/05/"/>
        <updated>2024-03-05T03:15:12.000Z</updated>
        <summary type="html"><![CDATA[After a year I’ve finally came up with an elegant solution to a vexing
u-config problem. The pkg-config format uses macros to generate build
flags through recursive expansion. Some flags embed file system paths, but
to the macro system it’s all strings. The output is also ultimately just
one big string, which the receiving shell splits into fields. If
a path contains spaces, or shell metacharacters, u-config must escape them
so that shells treat them as part of a token. But how can u-config itself
distinguish incidental spaces in paths from deliberate spaces between
flags? What about other shell metacharacters in paths? My solution is to
extend UTF-8 to encode metadata that survives macro expansion.
As usual, it helps to begin with a concrete example of the problem. The
following is a conv…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Evolving from Rule-based Classifier: Machine Learning Powered Auto Remediation in Netflix Data…]]></title>
        <id>https://medium.com/p/039d5efd115b</id>
        <link href="https://netflixtechblog.com/evolving-from-rule-based-classifier-machine-learning-powered-auto-remediation-in-netflix-data-039d5efd115b?source=rss----2615bd06b42e---4"/>
        <updated>2024-03-04T18:01:55.000Z</updated>
        <summary type="html"><![CDATA[by Binbing Hou, Stephanie Vezich Tamayo, Xiao Chen, Liang Tian, Troy Ristow, Haoyuan Wang, Snehal Chennuru, Pawan Dixit]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kafka versus Nabokov]]></title>
        <id>https://matklad.github.io/2024/03/02/Kafka-vs-Nabokov.html</id>
        <link href="https://matklad.github.io/2024/03/02/Kafka-vs-Nabokov.html"/>
        <updated>2024-03-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Uplifting a lobste.rs comment to a stand-alone post.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
</feed>