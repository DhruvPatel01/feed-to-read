<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2023-02-12T01:08:34.677Z</id>
    <title>osmos::feed</title>
    <updated>2023-02-12T01:08:34.677Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[My review of the C standard library in practice]]></title>
        <id>https://nullprogram.com/blog/2023/02/11/</id>
        <link href="https://nullprogram.com/blog/2023/02/11/"/>
        <updated>2023-02-11T03:04:11.000Z</updated>
        <summary type="html"><![CDATA[In general, when working in C I avoid the standard library, libc, as much
as possible. If possible I won’t even link it. For people not used to
working and thinking this way, the typical response is confusion. Isn’t
that like re-inventing the wheel? For me, libc is a wheel barely worth
using — too many deficiencies in both interface and implementation.
Fortunately, it’s easy to build a better, simpler wheel when you know the
terrain ahead of time. In this article I’ll review the functions and
function-like macros of the C standard library and discuss practical
issues I’ve faced with them.
Fortunately the flexibility of C-in-practice makes up for the standard
library. I already have all the tools at hand to do what I need — not
beholden to any runtime.
How does one write portable software w…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How a Zig IDE Could Work]]></title>
        <id>https://matklad.github.io/2023/02/10/how-a-zig-ide-could-work.html</id>
        <link href="https://matklad.github.io/2023/02/10/how-a-zig-ide-could-work.html"/>
        <updated>2023-02-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Zig is a very interesting language from an IDE point of view.
Some aspects of it are friendly to IDEs, like a very minimal and simple-to-parse syntax
(Zig can even be correctly lexed line-by-line, very cool!),
the absence of syntactic macros, and ability to do a great deal of semantic analysis on a file-by-file basis, in parallel.
On the other hand, comptime.
I accidentally spent some time yesterday thinking about how to build an IDE for that, this post is a result.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Discovering Creative Insights in Promotional Artwork]]></title>
        <id>https://medium.com/p/295e4d788db5</id>
        <link href="https://netflixtechblog.com/discovering-creative-insights-in-promotional-artwork-295e4d788db5?source=rss----2615bd06b42e---4"/>
        <updated>2023-01-30T16:16:03.000Z</updated>
        <summary type="html"><![CDATA[By Grace Tang, Aneesh Vartakavi, Julija Bagdonaite, Cristina Segalin, and Vi Iyengar]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python][C][C++][For noobs] What is 'continue']]></title>
        <id>https://yurichev.org/py_continue/</id>
        <link href="https://yurichev.org/py_continue/"/>
        <updated>2023-01-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Python][C][C++][For noobs] What is 'continue']]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python] Simplest possible serialization/marshalling]]></title>
        <id>https://yurichev.org/py_serial/</id>
        <link href="https://yurichev.org/py_serial/"/>
        <updated>2023-01-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Python] Simplest possible serialization/marshalling]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Public transport glitch. Dedicated to all fans of John Conway's Game of Life. Seen in Kiev.]]></title>
        <id>https://yurichev.org/glitch/</id>
        <link href="https://yurichev.org/glitch/"/>
        <updated>2023-01-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Public transport glitch. Dedicated to all fans of John Conway's Game of Life. Seen in Kiev.]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scalable Annotation Service — Marken]]></title>
        <id>https://medium.com/p/f5ba9266d428</id>
        <link href="https://netflixtechblog.com/scalable-annotation-service-marken-f5ba9266d428?source=rss----2615bd06b42e---4"/>
        <updated>2023-01-26T03:07:29.000Z</updated>
        <summary type="html"><![CDATA[In Marken (Scalable Annotation Service at Netflix), an annotation is a piece of metadata which can be attached to an object from any domain.]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weak data typing in MySQL]]></title>
        <id>https://yurichev.org/mysql/</id>
        <link href="https://yurichev.org/mysql/"/>
        <updated>2023-01-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Weak data typing in MySQL]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Russian][Crypto] Что такое side-channel attack / timing attack]]></title>
        <id>https://yurichev.org/side/</id>
        <link href="https://yurichev.org/side/"/>
        <updated>2023-01-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Russian][Crypto] Что такое side-channel attack / timing attack]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rust's Ugly Syntax]]></title>
        <id>https://matklad.github.io/2023/01/26/rusts-ugly-syntax.html</id>
        <link href="https://matklad.github.io/2023/01/26/rusts-ugly-syntax.html"/>
        <updated>2023-01-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[People complain about Rust syntax.
I think that most of the time when people think they have an issue with Rust's syntax, they actually object to Rust's semantics.
In this slightly whimsical post, I'll try to disentangle the two.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next Rust Compiler]]></title>
        <id>https://matklad.github.io/2023/01/25/next-rust-compiler.html</id>
        <link href="https://matklad.github.io/2023/01/25/next-rust-compiler.html"/>
        <updated>2023-01-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In Rust in 2023, @nrc floated an idea of a Rust compiler rewrite.
As my hobby is writing Rust compiler frontends (1, 2), I have some (but not very many) thoughts here!
The post consists of two parts, covering organizational and technical aspects.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part IV]]></title>
        <id>https://yurichev.org/Bleich4/</id>
        <link href="https://yurichev.org/Bleich4/"/>
        <updated>2023-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part IV]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part III]]></title>
        <id>https://yurichev.org/Bleich3/</id>
        <link href="https://yurichev.org/Bleich3/"/>
        <updated>2023-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part III]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part II]]></title>
        <id>https://yurichev.org/Bleich2/</id>
        <link href="https://yurichev.org/Bleich2/"/>
        <updated>2023-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part II]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part I]]></title>
        <id>https://yurichev.org/Bleich1/</id>
        <link href="https://yurichev.org/Bleich1/"/>
        <updated>2023-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part I]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Crypto] RSA blinding]]></title>
        <id>https://yurichev.org/RSA_blind/</id>
        <link href="https://yurichev.org/RSA_blind/"/>
        <updated>2023-01-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[[Crypto] RSA blinding]]></summary>
        <author>
            <name>Dennis Yurichev's blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[u-config: a new, lean pkg-config clone]]></title>
        <id>https://nullprogram.com/blog/2023/01/18/</id>
        <link href="https://nullprogram.com/blog/2023/01/18/"/>
        <updated>2023-01-18T06:39:51.000Z</updated>
        <summary type="html"><![CDATA[This article was discussed on Hacker News.
In my common SDL2 mistakes listing, the first was about winging it
instead of using the sdl2-config script. It’s just one of three official
options for portably configuring SDL2, but I had dismissed the others from
consideration. One is the pkg-config facility common to unix-like
systems. However, the SDL maintainers recently announced SDL3, which will
not have a sdl3-config. The concept has been deprecated in favor of the
existing pkg-config option. I’d like to support this on w64devkit, except
that it lacks pkg-config — not the first time this has come up. So last
weekend I wrote a new pkg-config from scratch with first-class Windows
support: u-config (“micro-config”). It will serve as pkg-config
in w64devkit starting in the next release.
Ultima…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++ vs Rust: which is faster?]]></title>
        <id>https://fasterthanli.me/videos/cpp-vs-rust-which-is-faster</id>
        <link href="https://fasterthanli.me/videos/cpp-vs-rust-which-is-faster"/>
        <updated>2023-01-17T08:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>I ported some Advent of Code solutions from C/C++ to Rust, and used the
opportunity to compare performance. When I couldn't explain why they performed
differently, I had no choice but to disassemble both and look at what the
codegen was like!</p>]]></summary>
        <author>
            <name>fasterthanli.me</name>
        </author>
    </entry>
</feed>