<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2024-06-02T01:00:39.306Z</id>
    <title>osmos::feed</title>
    <updated>2024-06-02T01:00:39.306Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[This Month with Nim: October 2023 to June 2024 (It is a long month)]]></title>
        <id>https://nim-lang.org//blog/2024/06/01/this-month-with-nim.html</id>
        <link href="https://nim-lang.org//blog/2024/06/01/this-month-with-nim.html"/>
        <updated>2024-06-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Oolib Upgrade
Author: Neo
New super cool features here!
Multiple constructor
class Gun:
  var
    offence: int
    capacity = 6
    price: int

  proc `new`(offence: int) =
    self.offence = offence
    self.capacity = 8
    self.price = 300

  proc `new`(capacity: int) =
    self.offence = 14
    self.capacity = capacity
    self.price = 200

# This `new()` is made from the type definition
let _ = Gun.new(offence = 5, price = 6)

# 2nd one
let _ = Gun.new(offence = 12)

# 3rd one
let _ = Gun.new(capacity = 10)

class Sword:
  var
    offence: int
    price {.initial.} = 100

# made from the type definition
let _ = Sword.new(8)

{.construct.}
a type definition with {.construct.} are made into a class. Now that we can define a class without using class!
type Shield {.construct.} = ref obje…]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Commitment to Art and Dogs]]></title>
        <id>https://samwho.dev/dogs/</id>
        <link href="https://samwho.dev/dogs/"/>
        <updated>2024-06-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[.dog-line {
  display: flex;
  flex-wrap: nowrap;
  flex-direction: row;
  width: 100%;
  height: 10rem;
  margin-top: 2rem;
  margin-bottom: 2rem;
}

.dog-line img {
  flex-grow: 1;
  height: auto;
  margin: 0;
  padding: 0;
  object-fit: contain;
}

.dog-grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-gap: 1rem;
  margin-top: 2rem;
  margin-bottom: 2rem;
}

Back in Memory Allocation, I introduced Haskie.
The idea behind Haskie was to create a character that could ask questions the
reader might have, and to "soften" the posts to make them feel less
intimidating. I got some feedback from people that Haskie was a bit too
childish, and didn't feel like he belonged in posts about serious topics.
This feedback was in the minority, though, and most people liked him. So I…]]></summary>
        <author>
            <name>samwho.dev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Quickly checking whether a string needs escaping]]></title>
        <id>https://lemire.me/blog/?p=21364</id>
        <link href="https://lemire.me/blog/2024/05/31/quickly-checking-whether-a-string-needs-escaping/"/>
        <updated>2024-05-31T03:48:21.000Z</updated>
        <summary type="html"><![CDATA[In software, we often represent strings by surrounding them with quotes ("). What happens if the string itself contains quotes? We then need to escape the string. For example, the quote character (") or the backlash character (\) should be replaced by \" or \\. Most programmers are familiar with this process. Most strings do … Continue reading Quickly checking whether a string needs escaping]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Never reason from the results of a sampling profiler]]></title>
        <id>https://lemire.me/blog/?p=21360</id>
        <link href="https://lemire.me/blog/2024/05/30/never-reason-from-the-results-of-a-sampling-profiler/"/>
        <updated>2024-05-30T19:33:28.000Z</updated>
        <summary type="html"><![CDATA[In the quest for software optimization, a trusty companion is the sampling profiler, a tool available in most programming languages. These profilers work unobtrusively, taking snapshots of the program’s state and recording the currently executing function or instruction. While profilers sound like a silver bullet for identifying performance bottlenecks, their usefulness has limitations. They excel … Continue reading Never reason from the results of a sampling profiler]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Science and Technology links (May 25 2024)]]></title>
        <id>https://lemire.me/blog/?p=21351</id>
        <link href="https://lemire.me/blog/2024/05/26/science-and-technology-links-may-25-2024/"/>
        <updated>2024-05-26T01:09:54.000Z</updated>
        <summary type="html"><![CDATA[Artificial intelligence is far more efficient at producing content than human beings, as far as carbon emissions go. Human brains got larger by over 5% between 1930 and 1970. Replacing plastics by ‘environment friendly’ alternatives typically results in greater greenhouse gas emissions. Prostate-specific antigen screening has only a small effect on men’s risk of dying … Continue reading Science and Technology links (May 25 2024)]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Arenas and the almighty concatenation operator]]></title>
        <id>https://nullprogram.com/blog/2024/05/25/</id>
        <link href="https://nullprogram.com/blog/2024/05/25/"/>
        <updated>2024-05-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I continue to streamline an arena-based paradigm, and stumbled
upon a concise technique for dynamic growth — an efficient, generic
“concatenate anything to anything” within an arena built atop a core of
9-ish lines of code. The key insight originated from a reader suggestion
about dynamic arrays. The subject of concatenation can be a string,
dynamic array, or even something else. The “system” is extensible, and
especially useful for path handling.
Continuing from last time, the examples are in light, C-style C++.
I chose it because templates and function overloading express the concepts
succinctly. It uses no standard library functionality, so converting to C,
or similar, should be straightforward. The core concatenation “operator”:

template<typename T>
T concat(arena *a, T head, T tail)
…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Guidelines for computing sizes and subscripts]]></title>
        <id>https://nullprogram.com/blog/2024/05/24/</id>
        <link href="https://nullprogram.com/blog/2024/05/24/"/>
        <updated>2024-05-24T22:25:10.000Z</updated>
        <summary type="html"><![CDATA[Occasionally we need to compute the size of an object that does not yet
exist, or a subscript that may fall out of bounds. It’s easy to miss
the edge cases where results overflow, creating a nasty, subtle bug, even
in the presence of type safety. Ideally such computations happen in
specialized code, such as inside an allocator (calloc, reallocarray)
and not outside by the allocatee (i.e. malloc). Mitigations exist with
different trade-offs: arbitrary precision, or using a wider fixed integer
— i.e. 128-bit integers on 64-bit hosts. In the typical case, working only
with fixed size-type integers, I’ve come up with a set of guidelines to
avoid overflows in the edge cases.
Range check before computing a result. No exceptions.
Do not cast unless you know a priori the operand is in range.
Never…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Interesting Links for May 2024]]></title>
        <id>https://notes.abhinavsarkar.net/2024/links-05</id>
        <link href="https://notes.abhinavsarkar.net/2024/links-05"/>
        <updated>2024-05-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Here are some interesting things I recently read on the internet:</p>

<ul>
  <li>
    <p><a href="https://web.archive.org/web/3/https://adam.nels.onl/blog/an-oo-languge-for-the-20s/">An Object-Oriented Language for the ’20s</a> <br />
Adam Nelson remixes the good ideas from various modern programming languages and proposes what an object-oriented language designed for the present-time should be.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://quuxplusone.github.io/blog/2024/03/31/ed-catmurs-triliteral/">Ed Catmur’s Triliteral esolang</a> <br />
Arthur O’Dwyer describes Triliteral, an esoteric programming language invented by prolific C++ contributor Ed Catmur, which is inspired by how words are created in Semitic languages by weaving vowels through triconsonantal roots.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://ntietz.com/blog/researching-why-we-use-semicolons-as-statement-terminators/">The origin and virtues of semicolons in programming languages</a> <br />
Nicole Tietz-Sokolskaya wades through computer science history trying to find the when and why of the wide use of the humble semicolon in many programming languages.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/20240517073857/https://old.reddit.com/r/ProgrammingLanguages/comments/1cm8m9o/is_there_a_minimum_viable_language_within/">Is there a minimum viable language within imperative languages like C++ or Rust from which the rest of language can be built?</a> <br />
Some wise Redditors discuss the minimal viable programming language that can serve as a core language for bigger imperative languages like C++. Lisp and Assembly are mentioned many times.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://kubyshkin.name/posts/type-checking-as-evaluation/">Type Checking as Evaluation</a> <br />
Dmitriy Kubyshkin explains are how type checking in statically typed programming languages is like evaluation of a secondary program in dynamically typed languages.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://www.scattered-thoughts.net/writing/unexplanations-sql-declarative/">Unexplanations: query optimization works because sql is declarative</a> <br />
Jamie Brandon explains the true reason why SQL queries are more amenable to optimizations compared to other programming languages.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://www.lesleylai.info/en/ast-in-cpp-part-1-variant">Representing an Abstract Syntax Tree in C++: Part 1 - Variants</a> <br />
Lesley Lai explores the different ways of representing Abstract Syntax Trees in C++.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://pointersgonewild.com/2024/04/20/the-alternative-implementation-problem/">The Alternative Implementation Problem</a> <br />
Maxime Chevalier-Boisvert posits that most of the alternative implementations of programming languages are unsuccessful because they are incompatible with the vast amount of code written for the original implementations.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://mcyoung.xyz/2021/06/01/linker-script/">Everything You Never Wanted To Know About Linker Script</a> <br />
In this comprehensive guide, Miguel Young tells us everything there is to know about the art and science of linking to create executables.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://bitbashing.io/gc-for-systems-programmers.html">Garbage Collection for Systems Programmers</a> <br />
Matt Kline argues that it is okay to use garbage collection with system programming languages because modern garbage collectors have amazing throughput.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://vaibhavsagar.com/blog/2019/09/08/popcount/">You Won’t Believe This One Weird CPU Instruction!</a> <br />
Vaibhav Sagar explored the history and use of the <code class="language-plaintext highlighter-rouge">popcount</code> CPU instruction.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://coredumped.dev/2021/04/07/when-pure-function-lie/">When pure function lie</a> <br />
Troy Hinckley puzzles over how it is possible for pure functions to return different values in Common Lisp.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/20240522104922/https://henko.net/blog/why-write-unit-tests/">Why write unit tests?</a> <br />
Henrik Jernevad lists some good reasons to unit test your programs.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/3/https://vfoley.xyz/reasonable-use/">Making Reasonable Use of Computer Resources</a> <br />
Vincent Foley argues that me must think about the performance of our software at the outset, not as an afterthought.</p>
  </li>
  <li>
    <p><a href="https://web.archive.org/web/20240522105655/https://yangdanny97.github.io/blog/2024/04/26/dubois-challenge">Recreating Historical Data Viz in 2024 using D3.js</a> <br />
Danny Yang recreates W.E.B Du Bois’s famous historical data visualizations using D3.js.</p>
  </li>
</ul>

<p>Like, share, or comment on this post on <a href="https://fantastic.earth/@abnv/112485258469122899" class="mastodon-link">Mastodon</a>.</p>]]></summary>
        <author>
            <name>Posts on abhinavsarkar.net</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Learning from the object-oriented mania]]></title>
        <id>https://lemire.me/blog/?p=21333</id>
        <link href="https://lemire.me/blog/2024/05/14/learning-from-the-object-oriented-mania/"/>
        <updated>2024-05-14T14:17:42.000Z</updated>
        <summary type="html"><![CDATA[Back when I started programming professionally, every expert and every software engineering professor would swear by object-oriented programming. Resistance was futile. History had spoken: the future was object-oriented. It is hard to understate how strong the mania was. In education, we started calling textbooks and videos ‘learning objects‘. Educators would soon ‘combine learning objects and reuse them‘. A competitor … Continue reading Learning from the object-oriented mania]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Forwarding references in C++]]></title>
        <id>https://lemire.me/blog/?p=21331</id>
        <link href="https://lemire.me/blog/2024/05/13/forwarding-references-in-c/"/>
        <updated>2024-05-13T15:51:51.000Z</updated>
        <summary type="html"><![CDATA[In C++, there are different ways to pass a value to a function. Typically, at any given time, an object in C++ ‘belongs’ to a single function. The various ways to call a function differ in who owns the object, the caller or the callee (the function being called). The simplest one is that we … Continue reading Forwarding references in C++]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Peer review is not the gold standard in science]]></title>
        <id>https://lemire.me/blog/?p=21322</id>
        <link href="https://lemire.me/blog/2024/05/11/peer-review-is-not-the-gold-standard-in-science/"/>
        <updated>2024-05-11T22:47:16.000Z</updated>
        <summary type="html"><![CDATA[Peer review as we know it today was introduced very late, over a century after the scientific revolution. It happened after Einstein’s time… arguably the most productive era in science. Current scientists often equate a success with the publication in a selective peer-reviewed venue. But that was never the scientific paradigm. In fact, it is … Continue reading Peer review is not the gold standard in science]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How fast can you construct a small list of strings in C for Python?]]></title>
        <id>https://lemire.me/blog/?p=21316</id>
        <link href="https://lemire.me/blog/2024/05/09/how-fast-can-construct-small-list-of-strings-in-c-for-python/"/>
        <updated>2024-05-09T03:55:45.000Z</updated>
        <summary type="html"><![CDATA[Python is probably the most popular programming language in the world right now. Python is easy to extend using C code. You may want to return from Python a small data structure. When crossing from C to Python, there is an overhead. Thus, if performance is a concern, you do not want to return lots … Continue reading How fast can you construct a small list of strings in C for Python?]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
</feed>