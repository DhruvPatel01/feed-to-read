<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2023-04-23T01:04:14.598Z</id>
    <title>osmos::feed</title>
    <updated>2023-04-23T01:04:14.598Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Reasonable Bootstrap]]></title>
        <id>https://matklad.github.io/2023/04/13/reasonable-bootstrap.html</id>
        <link href="https://matklad.github.io/2023/04/13/reasonable-bootstrap.html"/>
        <updated>2023-04-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Compilers for systems programming languages (C, C++, Rust, Zig) tend to be implemented in the languages themselves.
The idea being that the current version of the compiler is built using some previous version.
But how can you get a working compiler if you start out from nothing?]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Can You Trust a Compiler to Optimize Your Code?]]></title>
        <id>https://matklad.github.io/2023/04/09/can-you-trust-a-compiler-to-optimize-your-code.html</id>
        <link href="https://matklad.github.io/2023/04/09/can-you-trust-a-compiler-to-optimize-your-code.html"/>
        <updated>2023-04-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[More or less the title this time, but first, a story about SIMD. There are three
levels of understanding how SIMD works (well, at least I am level 3 at the moment):]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[UB Might Be a Wrong Term for Newer Languages]]></title>
        <id>https://matklad.github.io/2023/04/02/ub-might-be-the-wrong-term-for-newer-languages.html</id>
        <link href="https://matklad.github.io/2023/04/02/ub-might-be-the-wrong-term-for-newer-languages.html"/>
        <updated>2023-04-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A short note on undefined behavior, which assumes familiarity with the subject (see this article for the introduction).
The TL;DR is that I think that carrying the wording from the C standard into newer languages, like Zig and Rust, might be a mistake.
This is strictly the word choice, the lexical syntax of the comments argument.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[This Month with Nim: March 2023]]></title>
        <id>https://nim-lang.org//blog/2023/04/01/this-month-with-nim.html</id>
        <link href="https://nim-lang.org//blog/2023/04/01/this-month-with-nim.html"/>
        <updated>2023-04-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Binance
Author: Juan Carlos
Trade Bitcoin, USD and Gold using Nim!
Includes examples, API documentation, giftcards maker, futures maker,
leveraged perpetual futures automated trading bots with TSL/SL/TP/PNL,
make your own strategy, code Nim and make some money.
Lichess BOT Annie
Author: Tsoj
I want to introduce you to Annie, a chess bot for Lichess.
She’s excited about exploring the more intricate sides of chess.
Her favorite openings are the cloud variations and she is a very enthusiastic fan of en passant in every imaginable form.
Annie’s handcrafted, large-table powered evaluation was trained on no fewer than six million, four hundred and thirty-four positions from games played on Lichess.
Not just the games of grandmasters, but the games of noobs and sub-800 Elo players too. On top of …]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Interesting Links for March 2023]]></title>
        <id>https://notes.abhinavsarkar.net/2023/links-23-03</id>
        <link href="https://notes.abhinavsarkar.net/2023/links-23-03"/>
        <updated>2023-04-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Here are some interesting things I read on the internet in March 2023:</p>

<h2 id="haskell">Haskell</h2>

<ul>
  <li><a href="https://web.archive.org/web/3/https://mihai.page/evolving-is-digit/">Evolving <code class="language-plaintext highlighter-rouge">isDigit</code></a> <br />
Using Genetic algorithms to evolve a Haskell program that determines if a character is a digit.</li>
  <li><a href="https://web.archive.org/web/3/https://typeclasses.substack.com/p/memfd-an-example-of-haskell-and-c">memfd: An example of Haskell and C</a> <br />
A simple example of how to call C code from Haskell.</li>
  <li><a href="https://web.archive.org/web/3/https://sriramsami.com/haskell-optimization/">Optimizing Haskell Programs</a> <br />
A guide to optimizing Haskell programs.</li>
  <li><a href="https://web.archive.org/web/3/https://www.lambdabytes.io/articles/defectprocess/">The Source Code of Defect Process</a> <br />
An analysis of the source code of the Defect Process video game written in Haskell.</li>
  <li><a href="https://web.archive.org/web/3/https://typeclasses.substack.com/p/whats-new-in-ghc-2021">What’s new in GHC 2021</a> <br />
A summary of the new features in GHC 2021 language.</li>
</ul>

<h2 id="nix">Nix</h2>

<ul>
  <li><a href="https://web.archive.org/web/3/https://typeclasses.substack.com/p/flakes-nixos-desktop">7.5 years of NixOS on the desktop, cleaned up with Flakes</a> <br />
A guide to using NixOS on the desktop.</li>
  <li><a href="https://web.archive.org/web/3/https://bmcgee.ie/posts/2022/11/getting-nixos-to-keep-a-secret/">Getting NixOS to keep a secret</a> <br />
A guide on how to use secrets in NixOS.</li>
  <li><a href="https://web.archive.org/web/3/https://jvns.ca/blog/2023/03/03/how-do-nix-builds-work-/">How do Nix builds work?</a> <br />
An exploration of how Nix builds work.</li>
  <li><a href="https://web.archive.org/web/3/https://jvns.ca/blog/2023/02/28/some-notes-on-using-nix/">Some notes on using Nix</a> <br />
Some notes on using Nix as a beginner.</li>
</ul>

<h2 id="zig">Zig</h2>

<ul>
  <li><a href="https://web.archive.org/web/3/https://www.scattered-thoughts.net/writing/assorted-thoughts-on-zig-and-rust/">Assorted thoughts on Zig (and Rust)</a> <br />
A comparison of Zig and Rust.</li>
  <li><a href="https://web.archive.org/web/3/https://matklad.github.io/2023/03/26/zig-and-rust.html">Zig and Rust</a> <br />
Another comparison of Zig and Rust, from the point of view of writing reliable software.</li>
  <li><a href="https://web.archive.org/web/3/https://www.openmymind.net/Zig-Quirks/">Zig Quirks</a> <br />
Some quirks of the Zig programming language.</li>
</ul>

<h2 id="programming-languages-theory">Programming Languages Theory</h2>

<ul>
  <li><a href="https://web.archive.org/web/3/https://yangdanny97.github.io/blog/2020/05/29/chocopy-typechecker">Chocopy Hacking Part 1: Building a compiler frontend in Python</a> <br />
Building a compiler frontend in Python for the Chocopy programming language.</li>
  <li><a href="https://web.archive.org/web/3/https://yangdanny97.github.io/blog/2021/08/26/chocopy-jvm-backend">Chocopy Hacking Part 2: Compiling to JVM</a> <br />
Compiling Chocopy to JVM bytecode.</li>
  <li><a href="https://web.archive.org/web/3/https://yangdanny97.github.io/blog/2022/10/11/chocopy-wasm-backend">Chocopy Hacking Part 4: Compiling to WASM</a> <br />
Compiling Chocopy to WASM.</li>
  <li><a href="https://web.archive.org/web/3/http://www.iro.umontreal.ca/~felipe/IFT2030-Automne2002/Complements/tinyc.c">Compiler for the Tiny-C language</a> <br />
A bytecode compiler and virtual machine for a tiny C-like programming language written in C.</li>
  <li><a href="https://web.archive.org/web/3/https://pubby.games/codegen.html">Explaining my fast 6502 code generator</a> <br />
Somewhat unconventional 6502 code generation that is fast.</li>
  <li><a href="https://web.archive.org/web/3/https://tweedegolf.nl/en/blog/88/data-oriented-design">Optimizing a parser/compiler with data-oriented design: a case study</a> <br />
A case study of optimizing a parser/compiler with data-oriented design.</li>
  <li><a href="https://web.archive.org/web/3/https://yangdanny97.github.io/blog/2022/09/03/scratching-the-pl-itch">Scratching the PL Itch</a> <br />
Various ways in which programming language theory can be applied to real-world problems other than compilers.</li>
</ul>

<h2 id="miscellaneous">Miscellaneous</h2>

<ul>
  <li><a href="https://web.archive.org/web/3/https://sandymaguire.me/blog/book-mechanics/">The Mechanics of Writing a Book</a> <br />
How to write a book.</li>
  <li><a href="https://web.archive.org/web/3/https://www.richard-towers.com/2023/03/11/typescripting-the-technical-interview.html">Typescripting the technical interview</a> <br />
A homage to Aphyr’s “Typing the Technical Interview”.</li>
  <li><a href="https://web.archive.org/web/3/http://rtpg.co/2023/03/02/quines-for-dummies.html">Writing The World’s Most Boring Quine</a> <br />
How to write quines from first principles.</li>
</ul>

<p>Like, repost, or comment on this post on <a href="https://fantastic.earth/@abnv/110122311237335886">Mastodon</a>.</p>]]></summary>
        <author>
            <name>Posts on abhinavsarkar.net</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Version 2.0.0 RC2]]></title>
        <id>https://nim-lang.org//blog/2023/03/31/version-20-rc2.html</id>
        <link href="https://nim-lang.org//blog/2023/03/31/version-20-rc2.html"/>
        <updated>2023-03-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The second release candidate (RC2) for Nim version 2.0 is ready for testing.
Don’t panic! One of our design goals was to make it easy to write code that works with Nim version 1 and 2.
Many important packages already work with version 2 and as usual many innovations are behind switches
that can be enabled or disabled on a per module level thanks to the .experimental pragma.
Version 2 is based on the same codebase as version 1, it’s an evolution, not a revolution.
Compared to the RC1, we have many ORC-related bugfixes,
but the most crucial difference for ordinary users
are the vastly improved error messages:
proc foo(s: string) = discard
proc foo(x, y: int) = discard
proc foo(c: char) = discard

foo 4

produces:
temp3.nim(11, 1) Error: type mismatch
Expression: foo 4
  [1] 4: int literal(4)…]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rust Is a Scalable Language]]></title>
        <id>https://matklad.github.io/2023/03/28/rust-is-a-scalable-language.html</id>
        <link href="https://matklad.github.io/2023/03/28/rust-is-a-scalable-language.html"/>
        <updated>2023-03-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In my last post about Zig and Rust, I mentioned that Rust is a scalable language.
Let me expand on this a bit.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zig And Rust]]></title>
        <id>https://matklad.github.io/2023/03/26/zig-and-rust.html</id>
        <link href="https://matklad.github.io/2023/03/26/zig-and-rust.html"/>
        <updated>2023-03-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This post will be a bit all over the place.
Several months ago, I wrote Hard Mode Rust, exploring an allocation-conscious style of programming.
In the ensuing discussion, @jamii name-dropped TigerBeetle, a reliable, distributed, fast, and small database written in Zig in a similar style, and, well, I now find myself writing Zig full-time, after more than seven years of Rust.
This post is a hand-wavy answer to the why? question.
It is emphatically not a balanced and thorough comparison of the two languages.
I haven't yet written my 100k lines of Zig to do that.
(if you are looking for a more general what the heck is Zig, I can recommend @jamii's post).
In fact, this post is going to be less about languages, and more about styles of writing software (but pre-existing knowledge of Rust and Zig would be very helpful).
Without further caveats, let's get started.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
</feed>