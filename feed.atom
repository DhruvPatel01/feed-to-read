<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2024-06-16T01:02:36.849Z</id>
    <title>osmos::feed</title>
    <updated>2024-06-16T01:02:36.849Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Interesting Links for June 2024]]></title>
        <id>https://notes.abhinavsarkar.net/2024/links-06</id>
        <link href="https://notes.abhinavsarkar.net/2024/links-06"/>
        <updated>2024-06-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Here are some interesting things I recently read on the internet:</p>

<figure>
  <blockquote>
    <p>“As I walk around Philadelphia I often converse with Benjamin Franklin, to see what he thinks about how things have changed since 1790.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://blog.plover.com/tech/its-an-age-of-marvels.html">It’s an Age of Marvels</a></cite><a href="https://web.archive.org/web/3/https://blog.plover.com/tech/its-an-age-of-marvels.html" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“The difficulty with music is that half of it is arbitrary and half of it is actually based on something, but you can’t tell the difference just by looking at it.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://eev.ee/blog/2016/09/15/music-theory-for-nerds/">Music Theory for Nerds</a></cite><a href="https://web.archive.org/web/3/https://eev.ee/blog/2016/09/15/music-theory-for-nerds/" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“Defining the original paths for those letters was a very manual process of writing their positions into the code and then nudging the points back and forth until the letters looked right. When it came to coding cursive, I streamlined the process.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://www.amygoodchild.com/blog/cursive-handwriting-in-javascript">Coding My Handwriting</a></cite><a href="https://web.archive.org/web/3/https://www.amygoodchild.com/blog/cursive-handwriting-in-javascript" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“Are there deeper, more fundamental aspects of software that can help us think beyond surface-level matters? I’ve come to think that a triad of interacting factors best explains what software is and, by extension, why software is difficult.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://tratt.net/laurie/blog/2024/what_factors_explain_the_nature_of_software.html">What Factors Explain the Nature of Software?</a></cite><a href="https://web.archive.org/web/3/https://tratt.net/laurie/blog/2024/what_factors_explain_the_nature_of_software.html" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“Programs that manipulate other programs are powerful, interesting and fun. I’ll take you on a tour of how interpreters and compilers work, and explain a surprising computer science result which allows compilers to be generated automatically.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://tomstu.art/compilers-for-free">Compilers for Free</a></cite><a href="https://web.archive.org/web/3/https://tomstu.art/compilers-for-free" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“References are like jumps, leading wildly from one part of a data structure to another. Their introduction into high-level languages has been a step backward from which we may never recover.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://without.boats/blog/references-are-like-jumps/">References Are like Jumps</a></cite><a href="https://web.archive.org/web/3/https://without.boats/blog/references-are-like-jumps/" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“Forsp kind of just appeared and then has continued to surprise me. In many ways it feels more fundamental than Lisp or Forth. It appears to be both simpler than Lisp and more powerful than Forth.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://xorvoid.com/forsp.html">Forsp: A Forth+Lisp Hybrid Lambda Calculus Language</a></cite><a href="https://web.archive.org/web/3/https://xorvoid.com/forsp.html" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“c4 is clever, tricky, fascinating, cool. It’s a compiler, it’s a VM, it’s an interpreter, it’s a parser, it’s art, it’s trickshot programming.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://registerspill.thorstenball.com/p/exploring-the-c4-compiler">Exploring the c4… Compiler?</a></cite><a href="https://web.archive.org/web/3/https://registerspill.thorstenball.com/p/exploring-the-c4-compiler" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“Lately I’ve been discovering new features in Python 3.12 around typing and pattern matching. Combined with dataclasses, they provide support for a style of programming that I’ve employed in Kotlin and Typescript.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://wickstrom.tech/2024-05-23-statically-typed-functional-programming-python-312.html">Statically Typed Functional Programming with Python 3.12</a></cite><a href="https://web.archive.org/web/3/https://wickstrom.tech/2024-05-23-statically-typed-functional-programming-python-312.html" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“Optics represent different relationships between types, such as ‘is a type of’, or ‘contains one or more’, similar to relationships in an old-timey UML class diagram. But unlike relationships in a UML diagram, optics can be used directly in real code.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://doscienceto.it/blog/posts/2019-12-19-optics.html">Lessons Learned Building a Van Laarhoven Lens Library</a></cite><a href="https://web.archive.org/web/3/https://doscienceto.it/blog/posts/2019-12-19-optics.html" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“Please don’t do this in production.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://astrid.tech/2024/05/01/0/ansible-is-a-lisp/">Ansible Is a Lisp</a></cite><a href="https://web.archive.org/web/3/https://astrid.tech/2024/05/01/0/ansible-is-a-lisp/" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“If Bob’s offering a perfect algorithm off the top of his head, call bullshit (unless he carefully frames it as a hypothesis to test in a simulator, thank you, Bob).”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://sirupsen.com/napkin/problem-16-simulation">When to Write a Simulator</a></cite><a href="https://web.archive.org/web/3/https://sirupsen.com/napkin/problem-16-simulation" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“I just don’t think it’s useful, most of the time, to worry about anything beyond: wake me up, or don’t.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://ntietz.com/blog/the-only-two-log-levels-you-need-are-info-and-error/">The Only Two Log Levels You Need Are INFO and ERROR</a></cite><a href="https://web.archive.org/web/3/https://ntietz.com/blog/the-only-two-log-levels-you-need-are-info-and-error/" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“The internet is awash with tutorials on how to implement dark mode that will get you to a rudimentary implementation. I found that they lacked the refinements necessary to get to a great implementation.”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://brandur.org/fragments/dark-mode-notes">Notes on Implementing Dark Mode</a></cite><a href="https://web.archive.org/web/3/https://brandur.org/fragments/dark-mode-notes" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<figure>
  <blockquote>
    <p>“Too often have I witnessed the improvising musician sweaty-handedly attempting to pinch-zoom an A4 pdf on a tiny mobile screen at the climax of a gig. We need fluid and responsive music rendering for the web!”</p>
  </blockquote>
  <figcaption>
    <p><cite><a href="https://cruncher.ch/blog/printing-music-with-css-grid/">Printing Music with CSS Grid</a></cite><a href="https://web.archive.org/web/3/https://cruncher.ch/blog/printing-music-with-css-grid/" title="Archived link">🏛️</a></p>
  </figcaption>
</figure>

<p>Like, share, or comment on this post on <a href="https://fantastic.earth/@abnv/112615743566573724" class="mastodon-link">Mastodon</a>.</p>]]></summary>
        <author>
            <name>Posts on abhinavsarkar.net</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rolling your own fast matrix multiplication: loop order and vectorization]]></title>
        <id>https://lemire.me/blog/?p=21386</id>
        <link href="https://lemire.me/blog/2024/06/13/rolling-your-own-fast-matrix-multiplication-loop-order-and-vectorization/"/>
        <updated>2024-06-13T21:11:26.000Z</updated>
        <summary type="html"><![CDATA[If you must multiply matrices, you should use dedicated libraries. However, we sometimes need to roll our own code. In C++, you can quickly write your own Matrix template: template <typename T> struct Matrix { Matrix(size_t rows, size_t cols) : data(new T[rows * cols]), rows(rows), cols(cols) {} T &operator()(size_t i, size_t j) { return data.get()[i … Continue reading Rolling your own fast matrix multiplication: loop order and vectorization]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scan HTML faster with SIMD instructions: Chrome edition]]></title>
        <id>https://lemire.me/blog/?p=21382</id>
        <link href="https://lemire.me/blog/2024/06/08/scan-html-faster-with-simd-instructions-chrome-edition/"/>
        <updated>2024-06-08T04:55:42.000Z</updated>
        <summary type="html"><![CDATA[Modern processors have instructions to process several bytes at once. Effectively all processors have the capability of processing 16 bytes at once. These instructions are called SIMD, for single instruction, multiple data. It was once an open question whether these instructions could be useful to accelerate common tasks such as parsing HTML or JSON. However, … Continue reading Scan HTML faster with SIMD instructions: Chrome edition]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Round 2: A Survey of Causal Inference Applications at Netflix]]></title>
        <id>https://medium.com/p/fd78328ee0bb</id>
        <link href="https://netflixtechblog.com/round-2-a-survey-of-causal-inference-applications-at-netflix-fd78328ee0bb?source=rss----2615bd06b42e---4"/>
        <updated>2024-06-06T20:10:54.000Z</updated>
        <summary type="html"><![CDATA[At Netflix, we want to ensure that every current and future member finds content that thrills them today and excites them to come back for…]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Regular, Recursive, Restricted]]></title>
        <id>https://matklad.github.io/2024/06/04/regular-recursive-restricted.html</id>
        <link href="https://matklad.github.io/2024/06/04/regular-recursive-restricted.html"/>
        <updated>2024-06-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A post/question about formal grammars, wherein I search for a good formalism for describing infix
expressions.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[This Month with Nim: October 2023 to June 2024 (It is a long month)]]></title>
        <id>https://nim-lang.org//blog/2024/06/01/this-month-with-nim.html</id>
        <link href="https://nim-lang.org//blog/2024/06/01/this-month-with-nim.html"/>
        <updated>2024-06-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Oolib Upgrade
Author: Neo
New super cool features here!
Multiple constructor
class Gun:
  var
    offence: int
    capacity = 6
    price: int

  proc `new`(offence: int) =
    self.offence = offence
    self.capacity = 8
    self.price = 300

  proc `new`(capacity: int) =
    self.offence = 14
    self.capacity = capacity
    self.price = 200

# This `new()` is made from the type definition
let _ = Gun.new(offence = 5, price = 6)

# 2nd one
let _ = Gun.new(offence = 12)

# 3rd one
let _ = Gun.new(capacity = 10)

class Sword:
  var
    offence: int
    price {.initial.} = 100

# made from the type definition
let _ = Sword.new(8)

{.construct.}
a type definition with {.construct.} are made into a class. Now that we can define a class without using class!
type Shield {.construct.} = ref obje…]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Commitment to Art and Dogs]]></title>
        <id>https://samwho.dev/dogs/</id>
        <link href="https://samwho.dev/dogs/"/>
        <updated>2024-06-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[.dog-line {
  display: flex;
  flex-wrap: nowrap;
  flex-direction: row;
  width: 100%;
  height: 10rem;
  margin-top: 2rem;
  margin-bottom: 2rem;
}

.dog-line img {
  flex-grow: 1;
  height: auto;
  margin: 0;
  padding: 0;
  object-fit: contain;
}

.dog-grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-gap: 1rem;
  margin-top: 2rem;
  margin-bottom: 2rem;
}

Back in Memory Allocation, I introduced Haskie.
The idea behind Haskie was to create a character that could ask questions the
reader might have, and to "soften" the posts to make them feel less
intimidating. I got some feedback from people that Haskie was a bit too
childish, and didn't feel like he belonged in posts about serious topics.
This feedback was in the minority, though, and most people liked him. So I…]]></summary>
        <author>
            <name>samwho.dev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Quickly checking whether a string needs escaping]]></title>
        <id>https://lemire.me/blog/?p=21364</id>
        <link href="https://lemire.me/blog/2024/05/31/quickly-checking-whether-a-string-needs-escaping/"/>
        <updated>2024-05-31T03:48:21.000Z</updated>
        <summary type="html"><![CDATA[In software, we often represent strings by surrounding them with quotes ("). What happens if the string itself contains quotes? We then need to escape the string. For example, the quote character (") or the backslash character (\) should be replaced by \" or \\. Most programmers are familiar with this process. Most strings do … Continue reading Quickly checking whether a string needs escaping]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Never reason from the results of a sampling profiler]]></title>
        <id>https://lemire.me/blog/?p=21360</id>
        <link href="https://lemire.me/blog/2024/05/30/never-reason-from-the-results-of-a-sampling-profiler/"/>
        <updated>2024-05-30T19:33:28.000Z</updated>
        <summary type="html"><![CDATA[In the quest for software optimization, a trusty companion is the sampling profiler, a tool available in most programming languages. These profilers work unobtrusively, taking snapshots of the program’s state and recording the currently executing function or instruction. While profilers sound like a silver bullet for identifying performance bottlenecks, their usefulness has limitations. They excel … Continue reading Never reason from the results of a sampling profiler]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Science and Technology links (May 25 2024)]]></title>
        <id>https://lemire.me/blog/?p=21351</id>
        <link href="https://lemire.me/blog/2024/05/26/science-and-technology-links-may-25-2024/"/>
        <updated>2024-05-26T01:09:54.000Z</updated>
        <summary type="html"><![CDATA[Artificial intelligence is far more efficient at producing content than human beings, as far as carbon emissions go. Human brains got larger by over 5% between 1930 and 1970. Replacing plastics by ‘environment friendly’ alternatives typically results in greater greenhouse gas emissions. Prostate-specific antigen screening has only a small effect on men’s risk of dying … Continue reading Science and Technology links (May 25 2024)]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Arenas and the almighty concatenation operator]]></title>
        <id>https://nullprogram.com/blog/2024/05/25/</id>
        <link href="https://nullprogram.com/blog/2024/05/25/"/>
        <updated>2024-05-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I continue to streamline an arena-based paradigm, and stumbled
upon a concise technique for dynamic growth — an efficient, generic
“concatenate anything to anything” within an arena built atop a core of
9-ish lines of code. The key insight originated from a reader suggestion
about dynamic arrays. The subject of concatenation can be a string,
dynamic array, or even something else. The “system” is extensible, and
especially useful for path handling.
Continuing from last time, the examples are in light, C-style C++.
I chose it because templates and function overloading express the concepts
succinctly. It uses no standard library functionality, so converting to C,
or similar, should be straightforward. The core concatenation “operator”:

template<typename T>
T concat(arena *a, T head, T tail)
…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Guidelines for computing sizes and subscripts]]></title>
        <id>https://nullprogram.com/blog/2024/05/24/</id>
        <link href="https://nullprogram.com/blog/2024/05/24/"/>
        <updated>2024-05-24T22:25:10.000Z</updated>
        <summary type="html"><![CDATA[Occasionally we need to compute the size of an object that does not yet
exist, or a subscript that may fall out of bounds. It’s easy to miss
the edge cases where results overflow, creating a nasty, subtle bug, even
in the presence of type safety. Ideally such computations happen in
specialized code, such as inside an allocator (calloc, reallocarray)
and not outside by the allocatee (i.e. malloc). Mitigations exist with
different trade-offs: arbitrary precision, or using a wider fixed integer
— i.e. 128-bit integers on 64-bit hosts. In the typical case, working only
with fixed size-type integers, I’ve come up with a set of guidelines to
avoid overflows in the edge cases.
Range check before computing a result. No exceptions.
Do not cast unless you know a priori the operand is in range.
Never…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Interesting Links for May 2024]]></title>
        <id>https://notes.abhinavsarkar.net/2024/links-05</id>
        <link href="https://notes.abhinavsarkar.net/2024/links-05"/>
        <updated>2024-05-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>Here are some interesting things I recently read on the internet:</p>

<ul>
  <li>
    <p><a href="https://adam.nels.onl/blog/an-oo-languge-for-the-20s/">An Object-Oriented Language for the ’20s</a><a href="https://web.archive.org/web/3/https://adam.nels.onl/blog/an-oo-languge-for-the-20s/" title="Archived link">🏛️</a> <br />
Adam Nelson remixes the good ideas from various modern programming languages and proposes what an object-oriented language designed for the present-time should be.</p>
  </li>
  <li>
    <p><a href="https://quuxplusone.github.io/blog/2024/03/31/ed-catmurs-triliteral/">Ed Catmur’s Triliteral esolang</a><a href="https://web.archive.org/web/3/https://quuxplusone.github.io/blog/2024/03/31/ed-catmurs-triliteral/" title="Archived link">🏛️</a> <br />
Arthur O’Dwyer describes Triliteral, an esoteric programming language invented by prolific C++ contributor Ed Catmur, which is inspired by how words are created in Semitic languages by weaving vowels through triconsonantal roots.</p>
  </li>
  <li>
    <p><a href="https://ntietz.com/blog/researching-why-we-use-semicolons-as-statement-terminators/">The origin and virtues of semicolons in programming languages</a><a href="https://web.archive.org/web/3/https://ntietz.com/blog/researching-why-we-use-semicolons-as-statement-terminators/" title="Archived link">🏛️</a> <br />
Nicole Tietz-Sokolskaya wades through computer science history trying to find the when and why of the wide use of the humble semicolon in many programming languages.</p>
  </li>
  <li>
    <p><a href="https://old.reddit.com/r/ProgrammingLanguages/comments/1cm8m9o/is_there_a_minimum_viable_language_within/">Is there a minimum viable language within imperative languages like C++ or Rust from which the rest of language can be built?</a><a href="https://web.archive.org/web/20240517073857/https://old.reddit.com/r/ProgrammingLanguages/comments/1cm8m9o/is_there_a_minimum_viable_language_within/" title="Archived link">🏛️</a> <br />
Some wise Redditors discuss the minimal viable programming language that can serve as a core language for bigger imperative languages like C++. Lisp and Assembly are mentioned many times.</p>
  </li>
  <li>
    <p><a href="https://kubyshkin.name/posts/type-checking-as-evaluation/">Type Checking as Evaluation</a><a href="https://web.archive.org/web/3/https://kubyshkin.name/posts/type-checking-as-evaluation/" title="Archived link">🏛️</a> <br />
Dmitriy Kubyshkin explains are how type checking in statically typed programming languages is like evaluation of a secondary program in dynamically typed languages.</p>
  </li>
  <li>
    <p><a href="https://www.scattered-thoughts.net/writing/unexplanations-sql-declarative/">Unexplanations: query optimization works because sql is declarative</a><a href="https://web.archive.org/web/3/https://www.scattered-thoughts.net/writing/unexplanations-sql-declarative/" title="Archived link">🏛️</a> <br />
Jamie Brandon explains the true reason why SQL queries are more amenable to optimizations compared to other programming languages.</p>
  </li>
  <li>
    <p><a href="https://www.lesleylai.info/en/ast-in-cpp-part-1-variant">Representing an Abstract Syntax Tree in C++: Part 1 - Variants</a><a href="https://web.archive.org/web/3/https://www.lesleylai.info/en/ast-in-cpp-part-1-variant" title="Archived link">🏛️</a> <br />
Lesley Lai explores the different ways of representing Abstract Syntax Trees in C++.</p>
  </li>
  <li>
    <p><a href="https://pointersgonewild.com/2024/04/20/the-alternative-implementation-problem/">The Alternative Implementation Problem</a><a href="https://web.archive.org/web/3/https://pointersgonewild.com/2024/04/20/the-alternative-implementation-problem/" title="Archived link">🏛️</a> <br />
Maxime Chevalier-Boisvert posits that most of the alternative implementations of programming languages are unsuccessful because they are incompatible with the vast amount of code written for the original implementations.</p>
  </li>
  <li>
    <p><a href="https://mcyoung.xyz/2021/06/01/linker-script/">Everything You Never Wanted To Know About Linker Script</a><a href="https://web.archive.org/web/3/https://mcyoung.xyz/2021/06/01/linker-script/" title="Archived link">🏛️</a> <br />
In this comprehensive guide, Miguel Young tells us everything there is to know about the art and science of linking to create executables.</p>
  </li>
  <li>
    <p><a href="https://bitbashing.io/gc-for-systems-programmers.html">Garbage Collection for Systems Programmers</a><a href="https://web.archive.org/web/3/https://bitbashing.io/gc-for-systems-programmers.html" title="Archived link">🏛️</a> <br />
Matt Kline argues that it is okay to use garbage collection with system programming languages because modern garbage collectors have amazing throughput.</p>
  </li>
  <li>
    <p><a href="https://vaibhavsagar.com/blog/2019/09/08/popcount/">You Won’t Believe This One Weird CPU Instruction!</a><a href="https://web.archive.org/web/3/https://vaibhavsagar.com/blog/2019/09/08/popcount/" title="Archived link">🏛️</a> <br />
Vaibhav Sagar explored the history and use of the <code class="language-plaintext highlighter-rouge">popcount</code> CPU instruction.</p>
  </li>
  <li>
    <p><a href="https://coredumped.dev/2021/04/07/when-pure-function-lie/">When pure function lie</a><a href="https://web.archive.org/web/3/https://coredumped.dev/2021/04/07/when-pure-function-lie/" title="Archived link">🏛️</a> <br />
Troy Hinckley puzzles over how it is possible for pure functions to return different values in Common Lisp.</p>
  </li>
  <li>
    <p><a href="https://henko.net/blog/why-write-unit-tests/">Why write unit tests?</a><a href="https://web.archive.org/web/20240522104922/https://henko.net/blog/why-write-unit-tests/" title="Archived link">🏛️</a> <br />
Henrik Jernevad lists some good reasons to unit test your programs.</p>
  </li>
  <li>
    <p><a href="https://vfoley.xyz/reasonable-use/">Making Reasonable Use of Computer Resources</a><a href="https://web.archive.org/web/3/https://vfoley.xyz/reasonable-use/" title="Archived link">🏛️</a> <br />
Vincent Foley argues that me must think about the performance of our software at the outset, not as an afterthought.</p>
  </li>
  <li>
    <p><a href="https://yangdanny97.github.io/blog/2024/04/26/dubois-challenge">Recreating Historical Data Viz in 2024 using D3.js</a><a href="https://web.archive.org/web/20240522105655/https://yangdanny97.github.io/blog/2024/04/26/dubois-challenge" title="Archived link">🏛️</a> <br />
Danny Yang recreates W.E.B Du Bois’s famous historical data visualizations using D3.js.</p>
  </li>
</ul>

<p>Like, share, or comment on this post on <a href="https://fantastic.earth/@abnv/112485258469122899" class="mastodon-link">Mastodon</a>.</p>]]></summary>
        <author>
            <name>Posts on abhinavsarkar.net</name>
        </author>
    </entry>
</feed>