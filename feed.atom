<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2023-10-29T00:54:50.965Z</id>
    <title>osmos::feed</title>
    <updated>2023-10-29T00:54:50.965Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[[Computing] Expect-CT Lite: A humble proposal for minimal CT enforcement in TLS certificates]]></title>
        <id>https://www.devever.net/~hl/expect-ct-lite</id>
        <link href="https://www.devever.net/~hl/expect-ct-lite"/>
        <updated>2023-10-28T14:07:00.000Z</updated>
        <summary type="html"><![CDATA[<div type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p xmlns="http://www.w3.org/1999/xhtml">Last week we witnessed the , most likely by a Western nation-state. While it's  to any
attack which was carried out in this incident, one thing that has been brought
to my attention in the aftermath of this is that Certificate Transparency
logging remains optional for CAs.<a href="xmpp-incident">discovery of the compromise of an XMPP
service</a><a href="xmpp-incident-2#context-of-certificate-transparency">not
directly related</a></p></div></div>]]></summary>
        <author>
            <name>devever.net/~hl</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Computing] Mitigating the Hetzner/Linode XMPP.ru MitM interception incident, part 2: XMPP-specific mitigations]]></title>
        <id>https://www.devever.net/~hl/xmpp-incident-2</id>
        <link href="https://www.devever.net/~hl/xmpp-incident-2"/>
        <updated>2023-10-28T14:06:00.000Z</updated>
        <summary type="html"><![CDATA[<div type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p xmlns="http://www.w3.org/1999/xhtml">I've had a few comments in response to my previous article,  which have provided
XMPP-specific suggestions for how this could have been mitigated.<a href="https://www.devever.net/~hl/xmpp-incident">Mitigating the
Hetzner/Linode XMPP.ru MitM interception
incident</a></p></div></div>]]></summary>
        <author>
            <name>devever.net/~hl</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kubernetes And Kernel Panics]]></title>
        <id>https://medium.com/p/ed620b9c6225</id>
        <link href="https://netflixtechblog.com/kubernetes-and-kernel-panics-ed620b9c6225?source=rss----2615bd06b42e---4"/>
        <updated>2023-10-27T16:05:58.000Z</updated>
        <summary type="html"><![CDATA[How Netflix’s Container Platform Connects Linux Kernel Panics to Pods]]></summary>
        <author>
            <name>Netflix Technology Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Appending to an std::string character-by-character: how does the capacity grow?]]></title>
        <id>https://lemire.me/blog/?p=20907</id>
        <link href="https://lemire.me/blog/2023/10/23/appending-to-an-stdstring-character-by-character-how-does-the-capacity-grow/"/>
        <updated>2023-10-23T13:33:37.000Z</updated>
        <summary type="html"><![CDATA[In C++, suppose that you append to a string one character at a time: while(my_string.size() <= 10'000'000) { my_string += "a"; } In theory, it might be possible for the C++ runtime library to implement this routine as the creation of a new string with each append: it could allocate a new memory region that … Continue reading Appending to an std::string character-by-character: how does the capacity grow?]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unified Versus Split Diff]]></title>
        <id>https://matklad.github.io/2023/10/23/unified-vs-split-diff.html</id>
        <link href="https://matklad.github.io/2023/10/23/unified-vs-split-diff.html"/>
        <updated>2023-10-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Which is better for code reviews, a unified diff or a split diff?]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Computing] Mitigating the Hetzner/Linode XMPP.ru MitM interception incident]]></title>
        <id>https://www.devever.net/~hl/xmpp-incident</id>
        <link href="https://www.devever.net/~hl/xmpp-incident"/>
        <updated>2023-10-20T20:30:00.000Z</updated>
        <summary type="html"><![CDATA[<div type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p xmlns="http://www.w3.org/1999/xhtml">(If you just want some recommendations for what to do, .)<a href="#recommendations">skip down to the Recommendations section below</a></p></div></div>]]></summary>
        <author>
            <name>devever.net/~hl</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[For processing strings, streams in C++ can be slow]]></title>
        <id>https://lemire.me/blog/?p=20899</id>
        <link href="https://lemire.me/blog/2023/10/19/for-processing-strings-streams-in-c-can-be-slow/"/>
        <updated>2023-10-19T01:55:34.000Z</updated>
        <summary type="html"><![CDATA[The C++ library has long been organized around stream classes, at least when it comes to reading and parsing strings. But streams can be surprisingly slow. For example, if you want to parse numbers, then this C++ routine is close to being the worst possible choice for performance: std::stringstream in(mystring); while(in >> x) { sum … Continue reading For processing strings, streams in C++ can be slow]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How many billions of transistors in your iPhone processor?]]></title>
        <id>https://lemire.me/blog/?p=20892</id>
        <link href="https://lemire.me/blog/2023/10/18/how-many-billions-of-transistors-in-your-iphone-processor/"/>
        <updated>2023-10-18T13:51:28.000Z</updated>
        <summary type="html"><![CDATA[In about 10 years, Apple has multiplied by 19 the number of transistors in its mobile processors. It corresponds roughly to a steady rate of improvement of 34% per year on the number of transistors, or a doubling every 2.5 years. In real dollars, an iPhone has roughly a constant price: the price tag of … Continue reading How many billions of transistors in your iPhone processor?]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unless Explicitly Specified Otherwise, Open Source Software With Users Carries Moral Obligations]]></title>
        <id>https://matklad.github.io/2023/10/18/obligations.html</id>
        <link href="https://matklad.github.io/2023/10/18/obligations.html"/>
        <updated>2023-10-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[My thoughts on the topic of whether maintainers owe you anything. Speaking as an author, a maintainer,
a user of, and a contributor to open-source software.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Randomness in programming (with Go code)]]></title>
        <id>https://lemire.me/blog/?p=20886</id>
        <link href="https://lemire.me/blog/2023/10/17/randomness-in-programming-with-go-code/"/>
        <updated>2023-10-17T00:15:32.000Z</updated>
        <summary type="html"><![CDATA[Computer software is typically deterministic on paper: if you run twice the same program with the same inputs, you should get the same outputs. In practice, the complexity of modern computing makes it unlikely that you could ever run twice the same program and get exactly the same result, down to the exact same execution … Continue reading Randomness in programming (with Go code)]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LSP could have been better]]></title>
        <id>https://matklad.github.io/2023/10/12/lsp-could-have-been-better.html</id>
        <link href="https://matklad.github.io/2023/10/12/lsp-could-have-been-better.html"/>
        <updated>2023-10-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We talk about programming like it is about writing code, but the code ends up being less important
than the architecture, and the architecture ends up being less important than social issues.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Version 1.6.16 released]]></title>
        <id>https://nim-lang.org//blog/2023/10/11/version-1616-released.html</id>
        <link href="https://nim-lang.org//blog/2023/10/11/version-1616-released.html"/>
        <updated>2023-10-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Nim team is happy to announce version 1.6.16, our eight patch release for
Nim 1.6.
Version 1.6.16 is a result of three months of hard work, and it contains
84 commits,
bringing lots of general improvements over 1.6.14.
This release is aimed at our users who haven’t switched to Nim v2.0 yet.
Installing Nim 1.6
New users
Check out if the package manager of your OS already ships version 1.6.16 or
install it as described here.
Existing users
If you have installed a previous version of Nim using choosenim,
getting Nim 1.6.16 is as easy as:
$ choosenim 1.6.16

Alternatively, you can download Nim 1.6.16 from
our nightlies builds.
Donating to Nim
We would like to encourage you to donate to Nim.
The donated money will be used to further improve Nim by creating bounties
for the most important bu…]]></summary>
        <author>
            <name>Nim Programming Language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[UNIX Structured Concurrency]]></title>
        <id>https://matklad.github.io/2023/10/11/unix-structured-concurrency.html</id>
        <link href="https://matklad.github.io/2023/10/11/unix-structured-concurrency.html"/>
        <updated>2023-10-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A short note on a particular structured concurrency pattern for UNIX systems programming.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[My personal C coding style as of late 2023]]></title>
        <id>https://nullprogram.com/blog/2023/10/08/</id>
        <link href="https://nullprogram.com/blog/2023/10/08/"/>
        <updated>2023-10-08T23:30:57.000Z</updated>
        <summary type="html"><![CDATA[This article was discussed on Hacker News and on reddit.
This has been a ground-breaking year for my C skills, and paradigm shifts
in my technique has provoked me to reconsider my habits and coding style.
It’s been my largest personal style change in years, so I’ve decided to
take a snapshot of its current state and my reasoning. These changes have
produced significant productive and organizational benefits, so while most
is certainly subjective, it likely includes a few objective improvements.
I’m not saying everyone should write C this way, and when I contribute
code to a project I follow their local style. This is about what works
well for me.
Primitive types
Starting with the fundamentals, I’ve been using short names for primitive
types. The resulting clarity was more than I had expect…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Web server ‘hello world’ benchmark : Go vs Node.js vs Nim vs Bun]]></title>
        <id>https://lemire.me/blog/?p=20845</id>
        <link href="https://lemire.me/blog/2023/10/07/web-server-hello-world-benchmark-go-vs-node-js-vs-nim-vs-bun/"/>
        <updated>2023-10-07T05:43:25.000Z</updated>
        <summary type="html"><![CDATA[The Web is a convenient interface to your software. Many times, if you have an existing application, you may want to allow Web access to it using HTTP. Or you may want to build a small specialized Web application. In such instances, you do not want to use an actual Web server (e.g., Apache or … Continue reading Web server ‘hello world’ benchmark : Go vs Node.js vs Nim vs Bun]]></summary>
        <author>
            <name>Daniel Lemire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Interesting]]></title>
        <id>https://apenwarr.ca/log/20231006</id>
        <link href="https://apenwarr.ca/log/20231006"/>
        <updated>2023-10-06T20:59:31.000Z</updated>
        <summary type="html"><![CDATA[A few conversations last week made me realize I use the word “interesting” in an unusual way.
I rely heavily on mental models. Of course, everyone relies on mental models. But I do it intentionally and I push it extra hard.
What I mean by that is, when I’m making predictions about what will happen next, I mostly don’t look around me and make a judgement based on my immediate surroundings. Instead, I look at what I see, try to match it to something inside my mental model, and then let the mental model extrapolate what “should” happen from there.
If this sounds predictably error prone: yes. It is.
But it’s also powerful, when used the right way, which I try to do. Here’s my system.
Confirmation bias
First of all, let’s acknowledge the problem with mental models: confirmation bias. Confirmati…]]></summary>
        <author>
            <name>apenwarr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[What is an Invariant?]]></title>
        <id>https://matklad.github.io/2023/10/06/what-is-an-invariant.html</id>
        <link href="https://matklad.github.io/2023/10/06/what-is-an-invariant.html"/>
        <updated>2023-10-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I extolled the benefits of programming with invariants in a couple of recent posts.
Naturally, I didn't explain what I think when I write invariant. This post fixes that.]]></summary>
        <author>
            <name>matklad</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A simple, arena-backed, generic dynamic array for C]]></title>
        <id>https://nullprogram.com/blog/2023/10/05/</id>
        <link href="https://nullprogram.com/blog/2023/10/05/"/>
        <updated>2023-10-05T23:05:57.000Z</updated>
        <summary type="html"><![CDATA[Previously I presented an arena-friendly hash map applicable to any
programming language where one might use arena allocation. In this third
article I present a generic, arena-backed dynamic array. The details are
specific to C, as the most appropriate mechanism depends on the language
(e.g. templates, generics). Just as in the previous two articles, the goal
is to demonstrate an idea so simple that a full implementation fits on one
terminal pager screen — a concept rather than a library.
Unlike a hash map or linked list, a dynamic array — a data buffer with a
size that varies during run time — is more difficult to square with arena
allocation. They’re contiguous by definition, and we cannot resize objects
in the middle of an arena, i.e. realloc. So while convenient, they come
with trade-o…]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[An easy-to-implement, arena-friendly hash map]]></title>
        <id>https://nullprogram.com/blog/2023/09/30/</id>
        <link href="https://nullprogram.com/blog/2023/09/30/"/>
        <updated>2023-09-30T23:18:40.000Z</updated>
        <summary type="html"><![CDATA[My last article had tips for for arena allocation. This next
article demonstrates a technique for building bespoke hash maps that
compose nicely with arena allocation. In addition, they’re fast, simple,
and automatically scale to any problem that could reasonably be solved
with an in-memory hash map. To avoid resizing — both to better support
arenas and to simplify implementation — they have slightly above average
memory requirements. The design, which we’re calling a hash-trie, is the
result of fruitful collaboration with NRK, whose sibling article
includes benchmarks. It’s my new favorite data structure, and has proven
incredibly useful. With a couple well-placed acquire/release atomics, we
can even turn it into a lock-free concurrent hash map.
I’ve written before about MSI hash tables, …]]></summary>
        <author>
            <name>null program</name>
        </author>
    </entry>
</feed>