{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2024/10/07/",
          "author": null,
          "description": "Windows paths have been WTF-16-encoded for decades, but module names\nin the import tables of Portable Executable are octets.\nIf a name contains values beyond ASCII — technically out of spec — then\nthe dynamic linker must somehow decode those octets into Unicode in order\nto construct a lookup path. There are multiple ways this could be done,\nand the most obvious is the process’s active code page (ACP), which is\nexactly what happens. As a consequence, the specific DLL loaded by the\nlinker may depend on the system code page. In this article I’ll contrive\nsuch a situation.\nLoadLibraryA is a similar situation, and potentially applies the code\npage to a longer portion of the module path. LoadLibraryW is\nunaffected, at least for the directly-named module, because it’s Unicode\nall the way through.…",
          "link": "https://nullprogram.com/blog/2024/10/07/",
          "publishedOn": "2024-10-07T19:50:17.000Z",
          "wordCount": 786,
          "title": "Windows dynamic linking depends on the active code page",
          "imageUrl": null
        },
        {
          "id": "https://nullprogram.com/blog/2024/10/03/",
          "author": null,
          "description": "I’m 18 years late, but Slim Reader/Writer Locks have a fantastic\ninterface: pointer-sized (“slim”), zero-initialized, and non-allocating.\nLacking cleanup, they compose naturally with arena allocation.\nSounds like a futex? That’s because they’re built on futexes introduced at\nthe same time. They’re also complemented by condition variables\nwith the same desirable properties. My only quibble is that slim locks\ncould easily have been 32-bit objects, but it hardly matters. This\narticle, while treating Win32 as a foreign interface, discusses a\npaper-thin C++ wrapper interface around lock and condition variables, in\nmy own style.\nIf you’d like to see/try a complete, working demonstration before diving\ninto the details: demo.cpp. We’re going to build this from the\nground up, so let’s establish a f…",
          "link": "https://nullprogram.com/blog/2024/10/03/",
          "publishedOn": "2024-10-03T22:40:13.000Z",
          "wordCount": 738,
          "title": "Slim Reader/Writer Locks are neato",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/faa017b4653d",
          "author": "Netflix Technology Blog",
          "description": "By: Hechao Li and Marcelo Mayworm",
          "link": "https://netflixtechblog.com/investigation-of-a-workbench-ui-latency-issue-faa017b4653d?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-10-14T20:02:47.000Z",
          "wordCount": 6121,
          "title": "Investigation of a Workbench UI Latency Issue",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*ltV3CYtNjLCzolXD"
        },
        {
          "id": "https://medium.com/p/31552f6326f8",
          "author": "Netflix Technology Blog",
          "description": "By Rajiv Shringi, Vinay Chella, Kaidan Fullerton, Oleksii Tkachuk, Joey Lynch",
          "link": "https://netflixtechblog.com/introducing-netflix-timeseries-data-abstraction-layer-31552f6326f8?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-10-08T17:05:36.000Z",
          "wordCount": 9042,
          "title": "Introducing Netflix’s TimeSeries Data Abstraction Layer",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*jl30Jl559Fnd29in"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": [
        {
          "id": "https://nim-lang.org//blog/2024/10/02/nim-220-2010.html",
          "author": null,
          "description": "The Nim Team is happy to announce two releases:\nversion 2.2.0, our new stable release\nversion 2.0.10, a patch release for Nim 2.0\nNim v2.2.0 is a continuation of our efforts to improve Nim 2: it contains almost 1000 new commits, bringing improvements to the ORC memory management and to the language and the compiler overall.\nNim v2.0.10 is a patch release aimed at our enterprise users who cannot immediately switch to Nim 2.2, containing 80 commits with bugfixes.\nNim 2.2.0\nRelease highlights\nMany long-standing compiler bugs with generics, typedesc and static types have been fixed in this release, effectively making these features stable.\nIn particular, arbitrary expressions for types and values in generic types are now largely functional when they only worked in specific cases before.\nThe re…",
          "link": "https://nim-lang.org//blog/2024/10/02/nim-220-2010.html",
          "publishedOn": "2024-10-02T00:00:00.000Z",
          "wordCount": 3868,
          "title": "Nim versions 2.2.0 and 2.0.10 released",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        }
      ]
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2024/10/14/missing-ide-feature.html",
          "author": null,
          "description": "Slightly unusual genre --- with this article, I want to try to enact a change in the world. I\nbelieve that there is a missing IDE feature which is:",
          "link": "https://matklad.github.io/2024/10/14/missing-ide-feature.html",
          "publishedOn": "2024-10-14T00:00:00.000Z",
          "wordCount": 1341,
          "title": "A Missing IDE Feature",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2024/10/08/two-tips.html",
          "author": null,
          "description": "An article about a couple of relatively recent additions to my workflow which I wish I knew about\nyears ago.",
          "link": "https://matklad.github.io/2024/10/08/two-tips.html",
          "publishedOn": "2024-10-08T00:00:00.000Z",
          "wordCount": 1146,
          "title": "Two Workflow Tips",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2024/10/06/ousterhouts-dichotomy.html",
          "author": null,
          "description": "Why are there so many programming languages? One of the driving reasons for this is that some\nlanguages tend to produce fast code, but are a bit of a pain to use (C++), while others are a breeze\nto write, but run somewhat slow (Python). Depending on the ratio of CPUs to programmers, one or the\nother might be relatively more important.",
          "link": "https://matklad.github.io/2024/10/06/ousterhouts-dichotomy.html",
          "publishedOn": "2024-10-06T00:00:00.000Z",
          "wordCount": 896,
          "title": "On Ousterhout's Dichotomy",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2024/09/24/watermelon-operator.html",
          "author": null,
          "description": "In these two most excellent articles,\nhttps://without.boats/blog/let-futures-be-futures\nand\nhttps://without.boats/blog/futures-unordered, \nwithoutboats introduces the concepts of multi-task and intra-task concurrency.\nI want to revisit this distinction --- while I agree that there are different classes\nof patterns of concurrency here, I am not quite satisfied with this specific partitioning of the\ndesign space. I will use Rust-like syntax for most of the examples, but I am more interested in the\nlanguage-agnostic patterns, rather than in Rust's specific implementation of async.",
          "link": "https://matklad.github.io/2024/09/24/watermelon-operator.html",
          "publishedOn": "2024-09-24T00:00:00.000Z",
          "wordCount": 4013,
          "title": "The Watermelon Operator",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2024/09/23/what-is-io-uring.html",
          "author": null,
          "description": "An attempt at concise explanation of what io_uring is.",
          "link": "https://matklad.github.io/2024/09/23/what-is-io-uring.html",
          "publishedOn": "2024-09-23T00:00:00.000Z",
          "wordCount": 418,
          "title": "What is io_uring?",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    },
    {
      "title": "samwho.dev",
      "feedUrl": "https://samwho.dev/rss.xml",
      "siteUrl": "https://samwho.dev/rss.xml",
      "articles": []
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net/feed.atom",
      "articles": []
    },
    {
      "title": "Daniel Lemire's blog",
      "feedUrl": "https://lemire.me/blog/feed/",
      "siteUrl": "https://lemire.me/blog",
      "articles": [
        {
          "id": "https://lemire.me/blog/?p=21726",
          "author": "Daniel Lemire",
          "description": "We often store large datasets using comma-separated-value (CSV) files. The format is simple enough, each line of a text file is made of several values separated by commas, like so: \"Willett, Walter C.\",Harvard T.H. Chan School of Public Health,usa Given an excel spreadsheet, you can easily get a CSV file, and vice versa. CSV files … Continue reading How fast can you parse a CSV file in C#?",
          "link": "https://lemire.me/blog/2024/10/17/how-fast-can-you-parse-a-csv-file-in-c/",
          "publishedOn": "2024-10-17T23:03:05.000Z",
          "wordCount": 3557,
          "title": "How fast can you parse a CSV file in C#?",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21718",
          "author": "Daniel Lemire",
          "description": "When optimizing small functions, I often rely on a table lookup: I replace the actual computation with table of precomputed values. It is often surprisingly efficient. Let us consider an example. Suppose that you are given an array of characters and you want to replace all instances of the character ‘\\’ with the two-character string … Continue reading Table lookups are efficient",
          "link": "https://lemire.me/blog/2024/10/14/table-lookups-are-efficient/",
          "publishedOn": "2024-10-14T22:15:42.000Z",
          "wordCount": 3419,
          "title": "Table lookups are efficient",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21713",
          "author": "Daniel Lemire",
          "description": "Both the Physics and Chemistry Nobel prizes were awarded to computer scientists in 2024. Computer scientists are emerging as leading figures in the natural sciences. In turn, these sciences are increasingly dominated by theorists and modelers. There has a noticeable shift in some scientific fields where theoretical models and simulations often not only precede experimental … Continue reading From software to reality?",
          "link": "https://lemire.me/blog/2024/10/09/from-software-to-reality/",
          "publishedOn": "2024-10-09T13:21:37.000Z",
          "wordCount": 3003,
          "title": "From software to reality?",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21710",
          "author": "Daniel Lemire",
          "description": "So… in 2024, the Physics Nobel prize was awarded to a Computer Scientist. Is Physics out of ideas? The Nobel Committee just gave a Physics award to a COMPUTER SCIENTIST! What does this say about the state of modern Physics?  Though the first half of the XXth century was filled with breakthrough in Physics, it … Continue reading Geoffrey Hinton, the Godfather of Deep Learning, wins Nobel Prize in Physics!",
          "link": "https://lemire.me/blog/2024/10/08/geoffrey-hinton-the-godfather-of-deep-learning-wins-nobel-prize-in-physics/",
          "publishedOn": "2024-10-08T13:29:44.000Z",
          "wordCount": 2711,
          "title": "Geoffrey Hinton, the Godfather of Deep Learning, wins Nobel Prize in Physics!",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21702",
          "author": "Daniel Lemire",
          "description": "Consider the following problem. You want to iterate through the characters of a strings and find only those matching some criteria. For example, you might want scan an HTML string looking for the characters ‘<‘, ‘&’, ‘\\0’, ‘\\n’. We might do it in C++ using the find_first_of function. It is a generic function that is … Continue reading Iterating through matched characters in modern C++",
          "link": "https://lemire.me/blog/2024/10/06/iterating-through-matched-characters-in-modern-c-viewsfilter-and-coroutine/",
          "publishedOn": "2024-10-06T21:52:13.000Z",
          "wordCount": 3348,
          "title": "Iterating through matched characters in modern C++",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21694",
          "author": "Daniel Lemire",
          "description": "Recently, I received an email from an engineer at a prominent company who shared how he managed to save his employer tens of thousands of dollars annually by developing a custom command-line utility in C++. Without delving into specifics (which remain confidential), the company’s servers were tasked with querying a JSON file for a specific … Continue reading It is never too late to write your own C/C++ command-line utilities",
          "link": "https://lemire.me/blog/2024/09/28/it-is-never-too-later-to-write-your-own-c-c-command-line-utilities/",
          "publishedOn": "2024-09-28T04:06:18.000Z",
          "wordCount": 3953,
          "title": "It is never too late to write your own C/C++ command-line utilities",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "devever.net/~hl",
      "feedUrl": "https://www.devever.net/~hl/index.feed",
      "siteUrl": "https://www.devever.net/~hl/",
      "articles": []
    },
    {
      "title": "apenwarr",
      "feedUrl": "https://apenwarr.ca/log/rss.php",
      "siteUrl": "https://apenwarr.ca/log/",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}