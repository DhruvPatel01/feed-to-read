{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2025/01/19/",
          "author": null,
          "description": "This article durably captures my reddit comment showing techniques\nfor std::unordered_map and std::vector equivalents in C programs. The\ncore, important features of these data structures require only a dozen or\nso lines of code apiece. They compile quickly, and tend to run faster in\ndebug builds than release builds of their C++ equivalents. What they\nlack in genericity they compensate in simplicity. Nothing here will be\nnew. Everything has been covered in greater detail previously, which I\nwill reference when appropriate.\nFor a concrete goal, we will build a data structure representing an\nprocess environment, along with related functionality to make it more\ninteresting. That is, we’ll build a string-to-string map.\nAllocator\nThe foundation is our allocator, a simple bump allocator, so\nwe’ll…",
          "link": "https://nullprogram.com/blog/2025/01/19/",
          "publishedOn": "2025-01-19T04:10:33.000Z",
          "wordCount": 2985,
          "title": "Examples of quick hash tables and dynamic arrays in C",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/19ea916be1ed",
          "author": "Netflix Technology Blog",
          "description": "Part 2: Navigating Ambiguity",
          "link": "https://netflixtechblog.com/title-launch-observability-at-netflix-scale-19ea916be1ed?source=rss----2615bd06b42e---4",
          "publishedOn": "2025-01-07T01:25:58.000Z",
          "wordCount": 3249,
          "title": "Title Launch Observability at Netflix Scale",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*YyCLwVKiGE_L6fWb"
        },
        {
          "id": "https://medium.com/p/e67f0aa82183",
          "author": "Netflix Technology Blog",
          "description": "This article is the last in a multi-part series sharing a breadth of Analytics Engineering work at Netflix, recently presented as part of…",
          "link": "https://netflixtechblog.com/part-3-a-survey-of-analytics-engineering-work-at-netflix-e67f0aa82183?source=rss----2615bd06b42e---4",
          "publishedOn": "2025-01-06T19:27:38.000Z",
          "wordCount": 4463,
          "title": "Part 3: A Survey of Analytics Engineering Work at Netflix",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*ar0t2-zF5YVuXnUe"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": [
        {
          "id": "https://nim-lang.org//blog/2025/01/23/community-survey-results-2024.html",
          "author": null,
          "description": "The Nim community survey 2024 has been open for two months, and we have received 367 responses – less than in previous years, but we’ll still try to draw conclusions about our users and their habits.\nBefore we go into details, we would like to thank all the people who took the time to respond.\nWe really appreciate the feedback!\nThe goal of this survey was primarily to determine how our community is using Nim, in order to better understand how we should be improving it.\nDo you use Nim?\nBased on the answer to this question, the respondents were divided into two groups that each received a separate set of questions.\n\nApproximately three quarters of the respondents use Nim (40% frequently, 36% occasionally), while the remaining quarter is divided between people who never used Nim (7%) and peop…",
          "link": "https://nim-lang.org//blog/2025/01/23/community-survey-results-2024.html",
          "publishedOn": "2025-01-23T00:00:00.000Z",
          "wordCount": 1078,
          "title": "Nim Community Survey 2024 Results",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        }
      ]
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": []
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    },
    {
      "title": "samwho.dev",
      "feedUrl": "https://samwho.dev/rss.xml",
      "siteUrl": "https://samwho.dev/rss.xml",
      "articles": []
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net",
      "articles": [
        {
          "id": "https://abhinavsarkar.net/posts/brainfuck-interpreter/?mtm_campaign=feed",
          "author": null,
          "description": "<p>Writing an interpreter for Brainfuck is almost a rite of passage for any programming language implementer,\nand it’s my turn now. In this post, we’ll write not one but four Brainfuck interpreters in Haskell. Let’s go!</p>",
          "link": "https://abhinavsarkar.net/posts/brainfuck-interpreter/?mtm_campaign=feed",
          "publishedOn": "2025-01-19T00:00:00.000Z",
          "wordCount": 5739,
          "title": "Interpreting Brainfuck in Haskell",
          "imageUrl": "https://abhinavsarkar.net/images/brainfuck-interpreter/preview.png"
        },
        {
          "id": "https://abhinavsarkar.net/posts/solving-aoc20-seating-system/?mtm_campaign=feed",
          "author": null,
          "description": "<p>In this post, we solve the Advent of Code 2020 <a href=\"https://adventofcode.com/2020/day/11\" target=\"_blank\" rel=\"noopener\">“Seating System”</a> challenge in Haskell using comonads and stencils.</p>",
          "link": "https://abhinavsarkar.net/posts/solving-aoc20-seating-system/?mtm_campaign=feed",
          "publishedOn": "2025-01-05T00:00:00.000Z",
          "wordCount": 4976,
          "title": "Solving Advent of Code “Seating System” with Comonads and Stencils",
          "imageUrl": "https://abhinavsarkar.net/images/solving-aoc20-seating-system/preview.png"
        }
      ]
    },
    {
      "title": "Daniel Lemire's blog",
      "feedUrl": "https://lemire.me/blog/feed/",
      "siteUrl": "https://lemire.me/blog",
      "articles": [
        {
          "id": "https://lemire.me/blog/?p=21850",
          "author": "Daniel Lemire",
          "description": "Programmer time is precious. This realization should shape our approach to software development, focusing our efforts on tasks that genuinely contribute to the improvement of our code and the software ecosystem.   What does matter?   Hunting for bugs. I like to add tests, and then even more tests. The time spent building tests should … Continue reading Programmer time and the pitfalls of wasteful work",
          "link": "https://lemire.me/blog/2025/01/30/programmer-time-and-the-pitfalls-of-false-positives/",
          "publishedOn": "2025-01-30T03:02:36.000Z",
          "wordCount": 3235,
          "title": "Programmer time and the pitfalls of wasteful work",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21848",
          "author": "Daniel Lemire",
          "description": "Regular expressions, often abbreviated as regex, are a powerful tool for pattern matching within text. For example, the expression \\d*\\.?\\d+ would match a positive number such as 1.1 or 12. If designed and tested with care, regular expressions may be used in mission-critical software. However, their power comes with a risk: it is possible to … Continue reading Regular expressions can blow up!",
          "link": "https://lemire.me/blog/2025/01/25/regular-expressions-can-blow-up/",
          "publishedOn": "2025-01-25T03:53:36.000Z",
          "wordCount": 3144,
          "title": "Regular expressions can blow up!",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21836",
          "author": "Daniel Lemire",
          "description": "Your phone probably runs on 64-bit ARM processors. These processors are ubiquitous: they power the Nintendo Switch, they power cloud servers at both Amazon AWS and Microsoft Azure, they power fast laptops, and so forth. ARM processors have special powerful instructions called ARM NEON. They provide a specific type of parallelism called Single instruction, multiple … Continue reading Checking whether an ARM NEON register is zero",
          "link": "https://lemire.me/blog/2025/01/20/checking-whether-an-arm-neon-register-is-zero/",
          "publishedOn": "2025-01-20T01:05:51.000Z",
          "wordCount": 4004,
          "title": "Checking whether an ARM NEON register is zero",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21831",
          "author": "Daniel Lemire",
          "description": "Almost all of academic science has moved away from actual (empirical) science. It is higher status to work on theories and models. I believe that it is closely related to well documented scientific stagnation as theory is often ultimately sterile. This tendency is quite natural in academia if there is no outside pressure… And is … Continue reading The ivory tower’s drift: how academia’s preference for theory over empiricism fuels scientific stagnation",
          "link": "https://lemire.me/blog/2025/01/15/the-ivory-towers-drift-how-academias-preference-for-theory-over-empiricism-fuels-scientific-stagnation/",
          "publishedOn": "2025-01-15T20:30:06.000Z",
          "wordCount": 3613,
          "title": "The ivory tower’s drift: how academia’s preference for theory over empiricism fuels scientific stagnation",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21825",
          "author": "Daniel Lemire",
          "description": "Hashing algorithms convert input data into a fixed-size string of characters, known as a hash value or digest. These algorithms are one-way functions, meaning the original data cannot be feasibly retrieved from the hash, which makes them useful for data integrity, password storage, and digital signatures. MD5 and SHA-256 are two such hashing algorithms with … Continue reading JavaScript hashing speed comparison: MD5 versus SHA-256",
          "link": "https://lemire.me/blog/2025/01/11/javascript-hashing-speed-comparison-md5-versus-sha-256/",
          "publishedOn": "2025-01-11T16:21:18.000Z",
          "wordCount": 3318,
          "title": "JavaScript hashing speed comparison: MD5 versus SHA-256",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21816",
          "author": "Daniel Lemire",
          "description": "Given an integer in software, you may want to know how many decimal digits it needs. For example, the integer 100 requires 3 digits, the integer 9999 requires 4 digits. It would be an easy problem if we could compute the logarithm in base 10 of an integer quickly. Unfortunately, our computers work in base … Continue reading Counting the digits of 64-bit integers",
          "link": "https://lemire.me/blog/2025/01/07/counting-the-digits-of-64-bit-integers/",
          "publishedOn": "2025-01-07T21:41:57.000Z",
          "wordCount": 7285,
          "title": "Counting the digits of 64-bit integers",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21813",
          "author": "Daniel Lemire",
          "description": "The more likely outcome of the rise of generative artificial intelligence is higher value for the best experts… where ‘expert’ means ‘someone with experience solving real problems’. “While one may worry that AI will simply render expertise redundant and experts superfluous, history and economic logic suggest otherwise. AI is a tool, like a calculator or … Continue reading Artificial Intelligence as the Expert’s Lever: Elevating Human Expertise in the Age of AI",
          "link": "https://lemire.me/blog/2025/01/04/artificial-intelligence-as-the-experts-lever-elevating-human-expertise-in-the-age-of-ai/",
          "publishedOn": "2025-01-04T17:37:14.000Z",
          "wordCount": 3102,
          "title": "Artificial Intelligence as the Expert’s Lever: Elevating Human Expertise in the Age of AI",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "devever.net/~hl",
      "feedUrl": "https://www.devever.net/~hl/index.feed",
      "siteUrl": "https://www.devever.net/~hl/",
      "articles": []
    },
    {
      "title": "apenwarr",
      "feedUrl": "https://apenwarr.ca/log/rss.php",
      "siteUrl": "https://apenwarr.ca/log/",
      "articles": []
    },
    {
      "title": "home on CuriousCoding",
      "feedUrl": "https://curiouscoding.nl/index.xml",
      "siteUrl": "https://curiouscoding.nl/",
      "articles": [
        {
          "id": "https://curiouscoding.nl/posts/goaccess-setup/",
          "author": null,
          "description": "Table of Contents\n1 Nginx setup\n2 GoAccess configuration\n3 Systemd setup\n4 Serving the static file\n5 Serving live statistics\n6 GeoIP database\nGoAccess (goaccess.io, github) is a tool that analyses server logs and gives real-time\nstatistics on network traffic.\nIt took me some time to figure out exactly how to get the real-time websocket\nserver working through Nginx, so I’m just sharing my configuration here.\nInstall via your package manager, e.g. sudo pacman -S goaccess on Arch.",
          "link": "https://curiouscoding.nl/posts/goaccess-setup/",
          "publishedOn": "2025-01-03T23:00:00.000Z",
          "wordCount": 1011,
          "title": "Setting up traffic monitoring using GoAccess",
          "imageUrl": null
        }
      ]
    }
  ],
  "cliVersion": "1.15.1"
}