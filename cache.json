{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2023/01/18/",
          "author": null,
          "description": "This article was discussed on Hacker News.\nIn my common SDL2 mistakes listing, the first was about winging it\ninstead of using the sdl2-config script. It’s just one of three official\noptions for portably configuring SDL2, but I had dismissed the others from\nconsideration. One is the pkg-config facility common to unix-like\nsystems. However, the SDL maintainers recently announced SDL3, which will\nnot have a sdl3-config. The concept has been deprecated in favor of the\nexisting pkg-config option. I’d like to support this on w64devkit, except\nthat it lacks pkg-config — not the first time this has come up. So last\nweekend I wrote a new pkg-config from scratch with first-class Windows\nsupport: u-config (“micro-config”). It will serve as pkg-config\nin w64devkit starting in the next release.\nUltima…",
          "link": "https://nullprogram.com/blog/2023/01/18/",
          "publishedOn": "2023-01-18T06:39:51.000Z",
          "wordCount": 3000,
          "title": "u-config: a new, lean pkg-config clone",
          "imageUrl": null
        },
        {
          "id": "https://nullprogram.com/blog/2023/01/08/",
          "author": null,
          "description": "This article was discussed on reddit.\nSDL has grown on me over the past year. I didn’t understand its value\nuntil viewing it in the right lens: as a complete platform and runtime\nreplacing the host’s runtime, possibly including libc. Ideally an SDL\napplication links exclusively against SDL and otherwise not directly\nagainst host libraries, though in practice it’s somewhat porous. With care\n— particularly in avoiding mistakes covered in this article — that ideal\nis quite achievable for C applications that fit within SDL’s feature set.\nSDL applications are always interesting one way or another, so I like to\ndig in when I come across them. The items in this article are mistakes\nI’ve either made myself or observed across many such passion projects in\nthe wild.\nMistake 1: Not using sdl2-config\n…",
          "link": "https://nullprogram.com/blog/2023/01/08/",
          "publishedOn": "2023-01-08T02:09:26.000Z",
          "wordCount": 2158,
          "title": "SDL2 common mistakes and how to avoid them",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Max Slater",
      "feedUrl": "https://thenumb.at/feed.xml",
      "siteUrl": "https://thenumbat.github.io/",
      "articles": [
        {
          "id": "https://thenumbat.github.io/Spherical-Integration/",
          "author": null,
          "description": "Or, where does that \\(\\sin\\theta\\) come from? Integrating functions over spheres is a ubiquitous task in graphics—and a common source of confusion for beginners. In particular, understanding why integration in spherical coordinates requires multiplying by \\(\\sin\\theta\\) takes some thought. The Confusion So, we want to integrate a function \\(f\\) over the unit sphere. For simplicity, let’s assume \\(f = 1\\). Integrating \\(1\\) over any surface computes the area of that surface: for a unit sphere, we should end up with \\(4\\pi\\). Integrating over spheres is much easier in the eponymous spherical coordinates, so let’s define \\(f\\) in terms of \\(\\theta, \\phi\\): \\(\\theta\\) ranges from \\(0\\) to \\(\\pi\\), representing latitude, and \\(\\phi\\) ranges from \\(0\\) to \\(2\\pi\\), representing longitude. Naively, we might try to integrate \\(f\\) by ranging over the two parameters: \\[\\begin{align*} \\int_{0}^{2\\pi}\\int_0^\\pi 1\\, d\\theta d\\phi &amp;= \\int_0^{2\\pi} \\theta\\Big|_0^\\pi\\, d\\phi\\\\ &amp;= \\int_0^{2\\pi} \\pi\\, d\\phi \\\\ &amp;= \\pi \\left(\\phi\\Big|_0^{2\\pi}\\right) \\\\ &amp;= 2\\pi^2 \\end{align*}\\] That’s not \\(4\\pi\\)—we didn’t integrate over the sphere! All we did was integrate over a flat rectangle of height \\(\\pi\\) and width \\(2\\pi\\). One way to conceptualize this integral is by adding up the differential area \\(dA\\) of many small rectangular patches of the domain. Each patch has area \\(dA = d\\theta d\\phi\\), so adding them up results in the area of the rectangle. What we actually want is to add up the areas of patches on the sphere, where they are smaller. In the limit (small \\(d\\theta,d\\phi\\)), the spherical patch \\(d\\mathcal{S}\\) is a factor of \\(\\sin\\theta\\) smaller than the rectangular patch \\(dA\\)1. Intuitively, the closer to the poles the patch is, the smaller its area. When integrating over the sphere \\(\\mathcal{S}\\), we call the area differential \\(d\\mathcal{S} = \\sin\\theta\\, d\\theta d\\phi\\)2. Let’s try using it: \\[\\begin{align*} \\iint_\\mathcal{S} 1\\,d\\mathcal{S} &amp;= \\int_{0}^{2\\pi}\\int_0^\\pi \\sin\\theta\\, d\\theta d\\phi\\\\ &amp;= \\int_0^{2\\pi} (-\\cos\\theta)\\Big|_0^\\pi\\, d\\phi\\\\ &amp;= \\int_0^{2\\pi} 2\\, d\\phi \\\\ &amp;= 2 \\left(\\phi\\Big|_0^{2\\pi}\\right) \\\\ &amp;= 4\\pi \\end{align*}\\] It works! If you just wanted the intuition, you can stop reading here. But why \\(\\sin\\theta\\)? It’s illustrative to analyze how \\(\\sin\\theta\\) arises from parameterizing the cartesian (\\(x,y,z\\)) sphere using spherical coordinates. In cartesian coordinates, a unit sphere is defined by \\(x^2 + y^2 + z^2 = 1\\). It’s possible to formulate a cartesian surface integral based on this definition, but it would be ugly. \\[\\iint_{x^2+y^2+z^2=1} f dA = \\text{?}\\] Instead, we can perform a change of coordinates from cartesian to spherical coordinates. To do so, we will define \\(\\Phi : \\theta,\\phi \\mapsto x,y,z\\): $$ \\begin{align*} \\Phi(\\theta,\\phi) = \\begin{bmatrix}\\sin\\theta\\cos\\phi\\\\ \\sin\\theta\\sin\\phi\\\\ \\cos\\theta\\end{bmatrix} \\end{align*} $$ The function \\(\\Phi\\) is a parameterization of the unit sphere \\(\\mathcal{S}\\). We can check that it satisfies \\(x^2+y^2+z^2=1\\) regardless of \\(\\theta\\) and \\(\\phi\\): \\[\\begin{align*} |\\Phi(\\theta,\\phi)|^2 &amp;= (\\sin\\theta\\cos\\phi)^2 + (\\sin\\theta\\sin\\phi)^2 + \\cos^2\\theta\\\\ &amp;= \\sin^2\\theta(\\cos^2\\phi+\\sin^2\\phi) + \\cos^2\\theta \\\\ &amp;= \\sin^2\\theta + \\cos^2\\theta\\\\ &amp;= 1 \\end{align*}\\] Applying \\(\\Phi\\) to the rectangular domain \\(\\theta\\in[0,\\pi],\\phi\\in[0,2\\pi]\\) in fact describes all of \\(\\mathcal{S}\\), giving us a much simpler parameterization of the integral. To integrate over \\(d\\theta\\) and \\(d\\phi\\), we also need to compute how they relate to \\(d\\mathcal{S}\\). Luckily, there’s a formula that holds for any parametric surface \\(\\mathbf{r}(u,v)\\) describing a three-dimensional domain \\(\\mathcal{R}\\)3: \\[d\\mathcal{R} = \\left\\lVert \\frac{\\partial \\mathbf{r}}{\\partial u} \\times \\frac{\\partial \\mathbf{r}}{\\partial v} \\right\\rVert du dv\\] The two partial derivatives represent tangent vectors on \\(\\mathcal{R}\\) along the \\(u\\) and \\(v\\) axes, respectively. Intuitively, each tangent vector describes how a \\(u,v\\) patch is stretched along the corresponding axis when mapped onto \\(\\mathcal{R}\\). The magnitude of their cross product then computes the area of the resulting parallelogram. Finally, we can actually apply the change of coordinates: \\[\\begin{align*} \\iint_\\mathcal{S} f\\, d\\mathcal{S} &amp;= \\int_0^{2\\pi}\\int_0^\\pi f(\\Phi(\\theta,\\phi)) \\left\\lVert \\frac{\\partial\\Phi}{\\partial\\theta} \\times \\frac{\\partial\\Phi}{\\partial\\phi} \\right\\rVert d\\theta d\\phi \\end{align*}\\] We just need to compute the area term: \\[\\begin{align*} \\frac{\\partial\\Phi}{\\partial\\theta} &amp;= \\begin{bmatrix}\\cos\\phi\\cos\\theta &amp; \\sin\\phi\\cos\\theta &amp; -\\sin\\theta\\end{bmatrix}\\\\ \\frac{\\partial\\Phi}{\\partial\\phi} &amp;= \\begin{bmatrix}-\\sin\\phi\\sin\\theta &amp; \\cos\\phi\\sin\\theta &amp; 0\\end{bmatrix}\\\\ \\frac{\\partial\\Phi}{\\partial\\theta} \\times \\frac{\\partial\\Phi}{\\partial\\phi} &amp;= \\begin{bmatrix}\\sin^2\\theta\\cos\\phi &amp; \\sin^2\\theta\\sin\\phi &amp; \\cos^2\\phi\\cos\\theta\\sin\\theta + \\sin^2\\phi\\cos\\theta\\sin\\theta\\end{bmatrix}\\\\ &amp;= \\begin{bmatrix}\\sin^2\\theta\\cos\\phi &amp; \\sin^2\\theta\\sin\\phi &amp; \\cos\\theta\\sin\\theta \\end{bmatrix}\\\\ \\left\\lVert\\frac{\\partial\\Phi}{\\partial\\theta} \\times \\frac{\\partial\\Phi}{\\partial\\phi}\\right\\rVert &amp;= \\sqrt{\\sin^4\\theta(\\cos^2\\phi+\\sin^2\\phi) + \\cos^2\\theta\\sin^2\\theta}\\\\ &amp;= \\sqrt{\\sin^2\\theta(\\sin^2\\theta + \\cos^2\\theta)}\\\\ &amp;= \\lvert\\sin\\theta\\rvert \\end{align*}\\] Since \\(\\theta\\in[0,\\pi]\\), we can say \\(\\lvert\\sin\\theta\\rvert = \\sin\\theta\\). That means \\(d\\mathcal{S} = \\sin\\theta\\, d\\theta d\\phi\\)! Our final result is the familiar spherical integral: \\[\\iint_\\mathcal{S} f dS = \\int_0^{2\\pi}\\int_0^\\pi f(\\theta,\\phi) \\sin\\theta\\, d\\theta d\\phi\\] Footnotes Interestingly, if we knew the formula for the area of a spherical patch, we could do some slightly illegal math to derive the area form: \\[\\begin{align*} dA &amp;= (\\phi_1-\\phi_0)(\\cos\\theta_0-\\cos\\theta_1)\\\\ &amp;= ((\\phi + d\\phi) - \\phi)(\\cos(\\theta)-\\cos(\\theta+d\\theta))\\\\ &amp;= d\\phi d\\theta \\frac{(\\cos(\\theta)-\\cos(\\theta+d\\theta))}{d\\theta}\\\\ &amp;= d\\phi d\\theta \\sin\\theta \\tag{Def. derivative} \\end{align*}\\] &#8617; In graphics, also known as differential solid angle, \\(d\\mathbf{\\omega} = \\sin\\theta\\, d\\theta d\\phi\\). &#8617; Even more generally, the scale is related to the inner product on the tangent space of the surface. This inner product is defined by the first fundamental form \\(\\mathrm{I}\\) of the surface, and the scale factor is \\(\\sqrt{\\det\\mathrm{I}}\\), regardless of dimension. For surfaces immersed in 3D, this simplifies to the cross product mentioned above. Changes of coordinates that don’t change dimensionality have a more straightforward scale factor: it’s the determinant of their Jacobian.4 &#8617; These topics are often more easily understood using the language of exterior calculus, where integrals can be uniformly expressed regardless of dimension. I will write about it at some point. &#8617;",
          "link": "https://thenumbat.github.io/Spherical-Integration/",
          "publishedOn": "2023-01-08T00:00:00.000Z",
          "wordCount": 906,
          "title": "Spherical Integration",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Dennis Yurichev's blog",
      "feedUrl": "https://yurichev.com/blog/rss.xml",
      "siteUrl": "https://yurichev.org/",
      "articles": [
        {
          "id": "https://yurichev.org/py_continue/",
          "author": null,
          "description": "[Python][C][C++][For noobs] What is 'continue'",
          "link": "https://yurichev.org/py_continue/",
          "publishedOn": "2023-01-29T00:00:00.000Z",
          "wordCount": 386,
          "title": "[Python][C][C++][For noobs] What is 'continue'",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/py_serial/",
          "author": null,
          "description": "[Python] Simplest possible serialization/marshalling",
          "link": "https://yurichev.org/py_serial/",
          "publishedOn": "2023-01-28T00:00:00.000Z",
          "wordCount": 212,
          "title": "[Python] Simplest possible serialization/marshalling",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/glitch/",
          "author": null,
          "description": "Public transport glitch. Dedicated to all fans of John Conway's Game of Life. Seen in Kiev.",
          "link": "https://yurichev.org/glitch/",
          "publishedOn": "2023-01-27T00:00:00.000Z",
          "wordCount": 176,
          "title": "Public transport glitch. Dedicated to all fans of John Conway's Game of Life. Seen in Kiev.",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/mysql/",
          "author": null,
          "description": "Weak data typing in MySQL",
          "link": "https://yurichev.org/mysql/",
          "publishedOn": "2023-01-26T00:00:00.000Z",
          "wordCount": 244,
          "title": "Weak data typing in MySQL",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/side/",
          "author": null,
          "description": "[Russian][Crypto] Что такое side-channel attack / timing attack",
          "link": "https://yurichev.org/side/",
          "publishedOn": "2023-01-26T00:00:00.000Z",
          "wordCount": 671,
          "title": "[Russian][Crypto] Что такое side-channel attack / timing attack",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/Bleich4/",
          "author": null,
          "description": "[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part IV",
          "link": "https://yurichev.org/Bleich4/",
          "publishedOn": "2023-01-23T00:00:00.000Z",
          "wordCount": 412,
          "title": "[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part IV",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/Bleich3/",
          "author": null,
          "description": "[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part III",
          "link": "https://yurichev.org/Bleich3/",
          "publishedOn": "2023-01-23T00:00:00.000Z",
          "wordCount": 820,
          "title": "[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part III",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/Bleich2/",
          "author": null,
          "description": "[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part II",
          "link": "https://yurichev.org/Bleich2/",
          "publishedOn": "2023-01-23T00:00:00.000Z",
          "wordCount": 1055,
          "title": "[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part II",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/Bleich1/",
          "author": null,
          "description": "[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part I",
          "link": "https://yurichev.org/Bleich1/",
          "publishedOn": "2023-01-23T00:00:00.000Z",
          "wordCount": 1028,
          "title": "[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part I",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/RSA_blind/",
          "author": null,
          "description": "[Crypto] RSA blinding",
          "link": "https://yurichev.org/RSA_blind/",
          "publishedOn": "2023-01-22T00:00:00.000Z",
          "wordCount": 337,
          "title": "[Crypto] RSA blinding",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "fasterthanli.me",
      "feedUrl": "https://fasterthanli.me/index.xml",
      "siteUrl": "https://fasterthanli.me",
      "articles": [
        {
          "id": "https://fasterthanli.me/videos/cpp-vs-rust-which-is-faster",
          "author": null,
          "description": "<p>I ported some Advent of Code solutions from C/C++ to Rust, and used the\nopportunity to compare performance. When I couldn't explain why they performed\ndifferently, I had no choice but to disassemble both and look at what the\ncodegen was like!</p>",
          "link": "https://fasterthanli.me/videos/cpp-vs-rust-which-is-faster",
          "publishedOn": "2023-01-17T08:00:00.000Z",
          "wordCount": 999,
          "title": "C++ vs Rust: which is faster?",
          "imageUrl": "https://tube.fasterthanli.me/covers/cpp-vs-rust/cover.jpg"
        },
        {
          "id": "https://fasterthanli.me/series/advent-of-code-2022/part-18",
          "author": null,
          "description": "<p>This time around, we're porting a solution from C++ to Rust and seeing how it\nfeels, how it performs, and what we can learn about both languages by doing that.</p>\n<p>See <a href=\"part-17\">Day 17</a> for the rationale re: porting solutions rather than\nwriting my own from scratch. TL;DR is: it's better than nothing, and we can\nstill focus about learning Rust rather than spending entire days fighting\noff-by-one errors.</p>",
          "link": "https://fasterthanli.me/series/advent-of-code-2022/part-18",
          "publishedOn": "2023-01-12T14:00:00.000Z",
          "wordCount": 4724,
          "title": "Day 18 (Advent of Code 2022)",
          "imageUrl": "https://fasterthanli.me/img/logo-square-2.png"
        },
        {
          "id": "https://fasterthanli.me/articles/twitch-fell-behind",
          "author": null,
          "description": "<p>So you want to do live streams. Are you sure? Okay. Let's talk about it.</p>\n\n                        <h2>\n                            <a id=\"let-s-talk-numbers\" class=\"anchor\" href=\"#let-s-talk-numbers\">\n                                Let's talk numbers\n                            </a>\n                        </h2>",
          "link": "https://fasterthanli.me/articles/twitch-fell-behind",
          "publishedOn": "2023-01-12T13:00:00.000Z",
          "wordCount": 3316,
          "title": "Twitch fell behind",
          "imageUrl": "https://fasterthanli.me/img/logo-square-2.png"
        },
        {
          "id": "https://fasterthanli.me/series/advent-of-code-2022/part-17",
          "author": null,
          "description": "<p>Advent of Code gets harder and harder, and I'm not getting any smarter. Or any\nmore free time. So, in order to close out this series anyway, I'm going to try\nand port other people's solutions from &quot;language X&quot; to Rust. That way, they\nalready figured out the hard stuff, and we can just focus on the Rust bits!</p>",
          "link": "https://fasterthanli.me/series/advent-of-code-2022/part-17",
          "publishedOn": "2023-01-11T15:00:00.000Z",
          "wordCount": 5802,
          "title": "Day 17 (Advent of Code 2022)",
          "imageUrl": "https://fasterthanli.me/img/logo-square-2.png"
        }
      ]
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/295e4d788db5",
          "author": "Netflix Technology Blog",
          "description": "By Grace Tang, Aneesh Vartakavi, Julija Bagdonaite, Cristina Segalin, and Vi Iyengar",
          "link": "https://netflixtechblog.com/discovering-creative-insights-in-promotional-artwork-295e4d788db5?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-01-30T16:16:03.000Z",
          "wordCount": 5033,
          "title": "Discovering Creative Insights in Promotional Artwork",
          "imageUrl": "https://miro.medium.com/max/664/1*Y9kntVhxsTY0PoQEcQ4yIQ.png"
        },
        {
          "id": "https://medium.com/p/f5ba9266d428",
          "author": "Netflix Technology Blog",
          "description": "In Marken (Scalable Annotation Service at Netflix), an annotation is a piece of metadata which can be attached to an object from any domain.",
          "link": "https://netflixtechblog.com/scalable-annotation-service-marken-f5ba9266d428?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-01-26T03:07:29.000Z",
          "wordCount": 6199,
          "title": "Scalable Annotation Service — Marken",
          "imageUrl": "https://miro.medium.com/max/1200/1*5eyi33Txa5kOKuyMmrpPGA.jpeg"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": [
        {
          "id": "https://nim-lang.org//blog/2023/01/11/this-month-with-nim.html",
          "author": null,
          "description": "New Cliche version\nAuthor: Juan Carlos\nNew Cliche version:\nAdded support for bool.\nReads enum, Positive, Natural, BiggestInt, BiggestFloat, int, float directly from command line.\nFallbacks for values: static default ➡️  env var ➡️  command line.\nUses parseInt for int, parseFloat for float, parseEnum for enum, etc.\nimport std/strutils\nimport cliche\n# Use https://nim-lang.github.io/Nim/os.html#commandLineParams\ntype Food = enum PIZZA, TACO  # Enum from CLI.\n# let real = commandLineParams()\nlet fake = @[\"--a=1\", \"--v_1=9.9\", \"--v2=1\", \"--v3=2\", \"--v4=X\", \"--v5=t\", \"--v6=5\", \"--v7=true\", \"--food=PIZZA\"]\nfake.getOpt (a: int.high, v_1: 3.14, v2: 9'u64, v3: -9'i64, v4: \"a\", v5: '4', v6: 9.Positive, v7: false, missing: 42, food: TACO)\ndoAssert a == 1  # int\ndoAssert v_1 == 9.9  # float\ndoAssert v2…",
          "link": "https://nim-lang.org//blog/2023/01/11/this-month-with-nim.html",
          "publishedOn": "2023-01-11T00:00:00.000Z",
          "wordCount": 595,
          "title": "This Month with Nim: November and December 2022",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        }
      ]
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2023/01/26/rusts-ugly-syntax.html",
          "author": null,
          "description": "People complain about Rust syntax.\nI think that most of the time when people think they have an issue with Rust's syntax, they actually object to Rust's semantics.\nIn this slightly whimsical post, I'll try to disentangle the two.",
          "link": "https://matklad.github.io/2023/01/26/rusts-ugly-syntax.html",
          "publishedOn": "2023-01-26T00:00:00.000Z",
          "wordCount": 1141,
          "title": "Rust's Ugly Syntax",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/01/25/next-rust-compiler.html",
          "author": null,
          "description": "In Rust in 2023, @nrc floated an idea of a Rust compiler rewrite.\nAs my hobby is writing Rust compiler frontends (1, 2), I have some (but not very many) thoughts here!\nThe post consists of two parts, covering organizational and technical aspects.",
          "link": "https://matklad.github.io/2023/01/25/next-rust-compiler.html",
          "publishedOn": "2023-01-25T00:00:00.000Z",
          "wordCount": 1296,
          "title": "Next Rust Compiler",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}