{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2024/12/20/",
          "author": null,
          "description": "GCC and Clang inline assembly is an interface between high and low level\nprogramming languages. It is subtle and treacherous. Many are ensnared in\nits traps, usually unknowingly. As such, the asm keyword is essentially\nthe unsafe keyword of C and C++. Nearly every inline assembly tutorial,\nincluding the awful ibilio page at the top of search engines for\ndecades, propagate fundamental, serious mistakes, and most examples are\nincorrect. The dangerous part is that the examples usually produce the\nexpected results! The situation is dire. This article isn’t a tutorial,\nbut basic rules to avoid the most common mistakes, or to spot them in code\nreview.\nThe focus is entirely extended assembly, and not basic assembly,\nwhich has different rules. The former is any inline assembly statement\nwith const…",
          "link": "https://nullprogram.com/blog/2024/12/20/",
          "publishedOn": "2024-12-20T19:46:48.000Z",
          "wordCount": 1151,
          "title": "Rules to avoid common extended inline assembly mistakes",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/d2fb8e9ba1c6",
          "author": "Netflix Technology Blog",
          "description": "David J. Berg*, David Casler^, Romain Cledat*, Qian Huang*, Rui Lin*, Nissan Pow*, Nurcan Sonmez*, Shashank Srikanth*, Chaoying Wang*…",
          "link": "https://netflixtechblog.com/introducing-configurable-metaflow-d2fb8e9ba1c6?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-12-20T07:11:37.000Z",
          "wordCount": 6583,
          "title": "Introducing Configurable Metaflow",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:1143/1*XrOVl25ZLx8_4nHLRxNgDg.png"
        },
        {
          "id": "https://medium.com/p/d761cfd551ee",
          "author": "Netflix Technology Blog",
          "description": "This article is the first in a multi-part series sharing a breadth of Analytics Engineering work at Netflix, recently presented as part of…",
          "link": "https://netflixtechblog.com/part-1-a-survey-of-analytics-engineering-work-at-netflix-d761cfd551ee?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-12-17T23:26:37.000Z",
          "wordCount": 3797,
          "title": "Part 1: A Survey of Analytics Engineering Work at Netflix",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:625/0*gUgNHuu6yqKdfbgg"
        },
        {
          "id": "https://medium.com/p/f2a142955f83",
          "author": "Netflix Technology Blog",
          "description": "By J Han, Pallavi Phadnis",
          "link": "https://netflixtechblog.com/cloud-efficiency-at-netflix-f2a142955f83?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-12-17T22:17:29.000Z",
          "wordCount": 2803,
          "title": "Cloud Efficiency at Netflix",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*vDQJiJUttlRSpVBo"
        },
        {
          "id": "https://medium.com/p/c88c586629eb",
          "author": "Netflix Technology Blog",
          "description": "Part 1: Understanding The Challenges",
          "link": "https://netflixtechblog.com/title-launch-observability-at-netflix-scale-c88c586629eb?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-12-17T21:54:37.000Z",
          "wordCount": 2936,
          "title": "Title Launch Observability at Netflix Scale",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*5F9ATQbyOp99jMwJ"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": [
        {
          "id": "https://nim-lang.org//blog/2024/12/24/nim-2014-released.html",
          "author": null,
          "description": "The Nim team is happy to announce Nim version 2.0.14, our seventh patch release for Nim 2.0,\nfor our users who haven’t switched yet to Nim 2.2.\nVersion 2.0.14 contains 40 commits, and it brings several improvements to Nim 2.0.12, released two months ago.\nInstalling Nim 2.0.14\nIf you have installed a previous version of Nim using choosenim,\ngetting Nim 2.0.14 is as easy as:\n$ choosenim update self\n$ choosenim 2.0.14\n\nMake sure that the version of choosenim you have installed is 0.8.5 or higher, otherwise visit choosenim’s repo and see there how to re-install it first, before updating Nim.\nAlternatively, you can download Nim 2.0.14 from\nour nightlies builds.\nNim Community Survey 2024\nWe would like to remind you about Nim Community Survey.\nIf you haven’t participated yet, now’s the time.\nIt shouldn’t take more than 5 minutes, and it helps us to make Nim better.\nBugfixes\nThese reported issues were fixed:\nFixed “ensureMove usage leading to memory leak for JsonNode !”\n(#24504)\nFixed “UB calling allocCStringArray([\"\"]) with --mm:refc”\n(#22153)\nFixed “Regression when using generic type with Table/OrderedTable”\n(#23233)\nFixed “Wrong C code generated for newSeqWith when initializing two variables”\n(#18104)\nFixed “Wrong behaviour when wrapping a constant  object variant into a sequence at runtime”\n(#23295)\nFixed “Invalid C code generated for lent array in tuple”\n(#24034)\nFixed “Seg fault when adding deque element”\n(#24319)\nFixed “C compiler error when default initializing an object field function when the default function is overloaded”\n(#23545)\nFixed “build failed for lib/pure/selectors via mingw”\n(#24371)\nFixed “Calling proc with nested ref/deref constructed object results in invalid generated code”\n(#18081)\nFixed “let symbol created by template is reused in nimvm branch “\n(#24472)\nFixed “building nimble 0.16.4 fails when running build_all.sh”\n(#24536)\nThe complete list of changes is available\nhere.",
          "link": "https://nim-lang.org//blog/2024/12/24/nim-2014-released.html",
          "publishedOn": "2024-12-24T00:00:00.000Z",
          "wordCount": 442,
          "title": "Nim version 2.0.14 released",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        },
        {
          "id": "https://nim-lang.org//blog/2024/12/09/community-survey-2024.html",
          "author": null,
          "description": "We are proud to announce the launch of the official\n2024 Nim Community Survey!\nNo matter whether you use Nim today, have used Nim previously, or never used Nim before;\nwe want to know your opinions.\nYour feedback will help the Nim project understand its strengths and\nweaknesses, and to determine development priorities for the future.\nIt shouldn’t take you much longer than 5 minutes to complete this survey.\nSubmissions will be accepted until the start of 2025, depending on the\nresponse rates.\nIf you have any questions or feedback, please don’t hesitate\nto get in touch with us via email at survey@nim-lang.org or on the\nNim Forum.\nThis is now the eight year in which this survey has been running.\nAn analysis of the results for the past years can be found at the following links:\n2016\n2017\n2018\n2019\n2020\n2021\n2023\nWe would appreciate your help in spreading the word about this survey.\nShare the Google Forms link on your social network feeds, with your colleagues\nand in other communities.\nOnce the submission period ends, the results will be shown here and publicized\nvia the Nim Forum.\nThanks for your time!",
          "link": "https://nim-lang.org//blog/2024/12/09/community-survey-2024.html",
          "publishedOn": "2024-12-09T00:00:00.000Z",
          "wordCount": 346,
          "title": "Launching the 2024 Nim Community Survey",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        }
      ]
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2024/12/30/what-is-dependency.html",
          "author": null,
          "description": "For whatever reason, I've been thinking about dependencies lately:",
          "link": "https://matklad.github.io/2024/12/30/what-is-dependency.html",
          "publishedOn": "2024-12-30T00:00:00.000Z",
          "wordCount": 726,
          "title": "What Is a dependency?",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2024/12/24/minimal-version-selection-revisited.html",
          "author": null,
          "description": "In this post, I want to highlight one aspect of Go-style minimal version selection that I have\nmissed completely at first. Maybe you missed it too?",
          "link": "https://matklad.github.io/2024/12/24/minimal-version-selection-revisited.html",
          "publishedOn": "2024-12-24T00:00:00.000Z",
          "wordCount": 1320,
          "title": "Minimal Version Selection Revisited",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2024/12/13/majjit-lsp.html",
          "author": null,
          "description": "An out-there suggestion for the nascent jj ecosystem!",
          "link": "https://matklad.github.io/2024/12/13/majjit-lsp.html",
          "publishedOn": "2024-12-13T00:00:00.000Z",
          "wordCount": 1475,
          "title": "Majjit LSP",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    },
    {
      "title": "samwho.dev",
      "feedUrl": "https://samwho.dev/rss.xml",
      "siteUrl": "https://samwho.dev/rss.xml",
      "articles": [
        {
          "id": "https://samwho.dev/turing-machines/",
          "author": null,
          "description": "body {\n    text-wrap: pretty;\n  }\n\n  @media (prefers-reduced-motion: reduce) {\n    * {\n      transition: none;\n      animation: none;\n    }\n  }\n\n  turing-machine {\n    width: 100%;\n    display: block;\n    position: relative;\n    padding-bottom: 1em;\n  }\n\n  turing-machine .program-container {\n    position: relative;\n    display: flex;\n    justify-content: center;\n  }\n\n  turing-machine table {\n    border: none;\n    font-family: Fira Code;\n    border-collapse: collapse;\n    border-spacing: 0;\n    margin: 1px;\n    margin-top: 0.5em;\n    width: auto;\n  }\n\n  turing-machine thead td {\n    text-align: center;\n  }\n\n  turing-machine td {\n    text-align: left;\n    padding-left: 3vw;\n    padding-right: 3vw;\n    padding-top: 0.2em;\n    padding-bottom: 0.2em;\n    border: 1px dashed #bbbbbb;\n  }\n\n  turin…",
          "link": "https://samwho.dev/turing-machines/",
          "publishedOn": "2024-12-20T00:00:00.000Z",
          "wordCount": 4371,
          "title": "Turing Machines",
          "imageUrl": "https://samwho.dev/images/turing-machines-og.png?h=6567026e8884fb88a389"
        }
      ]
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net/feed.atom",
      "articles": [
        {
          "id": "https://notes.abhinavsarkar.net/2024/links-12",
          "author": null,
          "description": "<p>A special <em>Haskell</em> edition of some interesting articles I recently read on the internet, starting\nwith some Haskell-in-practice articles:</p>\n\n<ul>\n  <li>\n    <p>I like this new trend of making scripting dialects of full-fleged programming languages. Joining the\nlikes of <a href=\"https://babashka.org/\">Babashka</a> and <a href=\"https://horstmann.com/unblog/2024-12-11/index.html\">Small Java</a>\nis <a href=\"https://chrisdone.com/posts/hell/\">Hell, a Shell scripting Haskell dialect</a> by Chris Done.\nI usually write my scripts in Python, but I sorely miss static typing and functional programming, so natually, I’m excited for Hell.\nIt is in a nascent stage now, but hopefully, it will grow into something nice and useable.</p>\n  </li>\n  <li>\n    <p>Haskell is notorious for being too complex. I really like this solid\nadvice by Patrick Thomson for putting Haskell in real-world use:\n<a href=\"https://blog.sumtypeofway.com/posts/fast-iteration-with-haskell.html\">Towards Faster Iteration in Industrial Haskell</a>,\nwhere he writes about Haskell editors and tooling, GHC extensions, type system, building, and deployment.</p>\n  </li>\n  <li>\n    <p>Haskell is one of the few programming languages that are lazy by default, and often this is a source of\na lot of headaches for programmers, causing space leaks, slow computation, or hard to debug stack traces. But\nsometimes laziness can be harnessed for writing better programs, like Jasper Van der Jeugt does\nto create an efficient and elegant layout algorithm for creating photo collages in\n<a href=\"https://jaspervdj.be/posts/2023-07-22-lazy-layout.html\">Lazy Layout</a>.</p>\n  </li>\n  <li>\n    <p>I love it when people use advanced programming techniques to solve their day-to-day problems! In\n<a href=\"https://alt-romes.github.io/posts/2024-08-14-planning-a-workout-week-with-100-lines-of-haskell.html\">Planning Weekly Workouts in 100 Lines of Haskell</a>,\nRodrigo Mesquita uses <a href=\"https://en.wikipedia.org/wiki/Logic_programming\">Logic Programming</a> in Haskell\nto create a custom workout plan for themselves.</p>\n  </li>\n  <li>\n    <p>For some unknown reasons, functional programming and music seem to mesh well together. Maybe it is\nbecause both have combinatorial and compositional natures. In <a href=\"https://blog.fmap.fr/posts/karplus-strong-sound-synthesis.html\">Cheap Guitars and Drums in Haskell</a>,\nAlp Mestanogullari uses Haskell to do some digital audio synthesis by implementing the\n<a href=\"https://en.wikipedia.org/wiki/Karplus%E2%80%93Strong_string_synthesis\">Karplus-Strong algorithm</a>.</p>\n  </li>\n  <li>\n    <p>Another interesting use of Haskell to solve problems in clean and interesting way: Vehbi Sinan Tunalioglu\nuses the Diagrams library to generate dynamic <a href=\"https://ogp.me/\">OpenGraph</a> preview image for their website pages as detailed in\n<a href=\"https://thenegation.com/posts/haskell-diagrams-dynamic-og/\">More Haskell Diagrams: Dynamic OpenGraph Images</a>.\nCurrently I do this for my website in the crudest way possible: open the page in a browser manually\nand save a screenshot. Natually, I end up doing it only once per page and the previews are not dynamic.\nI plan to switch to using Vehbi’s technique in future.</p>\n  </li>\n</ul>\n\n<p>Moving on to some Haskell-for-fun articles:</p>\n\n<ul>\n  <li>\n    <p>Water Sort is a puzzle game where you have to sort coloured water into bottles. In <a href=\"https://nicaudinet.github.io/2024/10/14/watersort-haskell/\">Water Sort in Haskell</a>\nNicolas Audinet de Pieuchon creates the game as a Terminal UI in Haskell using <a href=\"https://guide.elm-lang.org/architecture/\">the Elm architecture</a>.\nI like how Haskell and functional programming make writing and understanding such software easy by\ncleanly separating the game logic and the rendering logic.</p>\n  </li>\n  <li>\n    <p>I’ve done <a href=\"https://adventofcode.com\">Avdent of Code</a> in Haskell for a couple of years now, and that has made me quite interested\nin efficient and convenient data structures in Haskell. Brent Yorgey has been writing about a bunch of them in\ntheir <a href=\"https://byorgey.github.io/blog/tag/challenge.html\">Competitive Programming in Haskell</a> series, and the latest article is about efficiently\ncalculating a measure for sliding windows of lists: <a href=\"https://byorgey.github.io/blog/posts/2024/11/27/stacks-queues.html\">Stacks, Queues, and Monoidal Sliding Windows</a>.</p>\n  </li>\n</ul>\n\n<p>Next, some Haskell concepts articles:</p>\n\n<ul>\n  <li>\n    <p>Haskell is notorious as a hard to learn language and I think some of that ill fame in deserved. Because\nof a powerful and flexible type-system, Haskell lets users solve their problems in many different ways,\nsome of which could be too obtuse for many to understand.\n<a href=\"https://blog.jle.im/entry/levels-of-type-safety-haskell-lists.html\">Seven Levels of Type Safety in Haskell: Lists</a>\nby Justin Le shows seven different ways of working with lists in Haskell, only one of which is\nwhat we know as List (<code class=\"language-plaintext highlighter-rouge\">[a]</code>) in usual Haskell. It’s still fun to learn about these, and who knows,\nsome of them may come handy some day.</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">fix</code> is one of those clever Haskell things that are very cool and terse but take a while to understand.\nIn <a href=\"https://gilmi.me/blog/post/2021/03/11/fix-by-example\"><code class=\"language-plaintext highlighter-rouge\">fix</code> by Example</a> Gil Mizrahi explains how it\nworks by providing movitating examples. But to be honest, I took me quite some tries to <strong>get</strong> it even\nafter reading a bunch about it.</p>\n  </li>\n  <li>Arrows are a part of Haskell that I don’t much understand, or use. Haskell even has <a href=\"https://www.haskell.org/arrows/syntax.html\">special syntax</a> for\nthem. In <a href=\"https://langdev.stackexchange.com/revisions/2372/2\">Why Arrows?</a> <a href=\"https://lexi-lambda.github.io/\">Alexis King</a>\nexplains why we need arrows at all. Instead of commenting on it, I’m gonna quote a part:\n    <blockquote>\n      <p>The key insight behind arrows comes from the following observation: it’s impossible to analyze the\nstructure of a monadic function <code class=\"language-plaintext highlighter-rouge\">a -&gt; m b</code> without applying it because functions are opaque—the only\nthing we can do with one is apply it. Instead, we need to build our computation out of “function-like values”\nthat are not opaque—we must be able to do more than just apply them.</p>\n    </blockquote>\n  </li>\n  <li>\n    <p>Here is an interesting use of a rather complicated concept from Category Theory: MangoIV shows in\n<a href=\"https://mangoiv.com/posts/2024-11-23-codensity.html\">Codensity for Resource Management</a> a way to\nuse the <a href=\"https://en.wikipedia.org/wiki/Codensity_monad\">Codensity monad</a> for conveniently managing\nresources in Haskell code.</p>\n  </li>\n  <li>\n    <p>If you have read any Haskell code, you’d know that Haskellers love writing terse code (myself included).\nThat includes using a lot of single-letter variable names, which may make code very unreable for an\nunacquainted eye. But there is a method to this madess, and Jack Kelly captures a comprehensive knowledge\nabout such variables in <a href=\"http://jackkelly.name/blog/archives/2024/10/12/a_dictionary_of_single-letter_variable_names/index.html\">A Dictionary of Single-Letter Variable Names</a>.</p>\n  </li>\n  <li>Stephen Diehl writes a through tutorial about how to generate X86 assembly from scratch for JIT compilation,\nand how to make is easy to use by exploiting a monadic interface\nin <a href=\"https://www.stephendiehl.com/posts/monads_machine_code/\">Monads to Machine Code</a>.</li>\n</ul>\n\n<p>Finally, some Haskell philosophy to finish it off:</p>\n\n<ul>\n  <li>Adam Dueck muses “<a href=\"https://adueck.github.io/blog/on-haskell-jazz-and-pure-math/\">Why Does Everyone Hate Haskell, Jazz, and Pure Math?</a>”,\nand posits that exploring interesting things that may not be immediately useful may actually cause\nmore practical advances in the long term.</li>\n</ul>\n\n<p>That’s it for this year. Have a happy and prosperous 2025!</p>\n\n<p>Like, share, or comment on this post on <a href=\"https://fantastic.earth/@abnv/113748806936137827\" class=\"mastodon-link\">Mastodon</a>.</p>",
          "link": "https://notes.abhinavsarkar.net/2024/links-12",
          "publishedOn": "2024-12-31T00:00:00.000Z",
          "wordCount": 1280,
          "title": "Interesting Links for December 2024",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "devever.net/~hl",
      "feedUrl": "https://www.devever.net/~hl/index.feed",
      "siteUrl": "https://www.devever.net/~hl/",
      "articles": []
    },
    {
      "title": "apenwarr",
      "feedUrl": "https://apenwarr.ca/log/rss.php",
      "siteUrl": "https://apenwarr.ca/log/",
      "articles": []
    },
    {
      "title": "home on CuriousCoding",
      "feedUrl": "https://curiouscoding.nl/index.xml",
      "siteUrl": "https://curiouscoding.nl/",
      "articles": [
        {
          "id": "https://curiouscoding.nl/posts/static-search-tree/",
          "author": null,
          "description": "Table of Contents\n1 Introduction\n\n1.1 Problem statement\n1.2 Recommended reading\n1.3 Binary search and Eytzinger layout\n1.4 Hugepages\n1.5 A note on benchmarking\n1.6 Cache lines\n1.7 S-trees and B-trees\n2 Optimizing find\n\n2.1 Linear\n2.2 Auto-vectorization\n2.3 Trailing zeros\n2.4 Popcount\n2.5 Manual SIMD\n3 Optimizing the search\n\n3.1 Batching\n3.2 Prefetching\n3.3 Pointer arithmetic\n\n3.3.1 Up-front splat\n3.3.2 Byte-based pointers\n3.3.3 The final version\n3.4 Skip prefetch\n3.5 Interleave\n4 Optimizing the tree layout\n\n4.1 Left-tree\n4.2 Memory layouts\n4.3 Node size \\(B=15\\)\n\n4.3.1 Data structure size\n4.4 Summary\n5 Prefix partitioning\n\n5.1 Full layout\n5.2 Compact subtrees\n5.3 The best of both: compact first level\n5.4 Overlapping trees\n5.5 Human data\n5.6 Prefix map\n5.7 Summary\n6 Multi-threaded comparison\n7 Conclusion\n\n7.1 Future work\n\n7.1.1 Branchy search\n7.1.2 Interpolation search\n7.1.3 Packing data smaller\n7.1.4 Returning indices in original data\n7.1.5 Range queries\nIn this post, we will implement a static search tree (S+ tree) for\nhigh-throughput searching of sorted data, as introduced on Algorithmica.\nWe’ll mostly take the code presented there as a starting point, and optimize it\nto its limits. For a large part, I’m simply taking the ‘future work’ ideas of that post\nand implementing them. And then there will be a bunch of looking at assembly\ncode to shave off all the instructions we can.\nLastly, there will be one big addition to optimize throughput: batching.",
          "link": "https://curiouscoding.nl/posts/static-search-tree/",
          "publishedOn": "2024-12-17T23:00:00.000Z",
          "wordCount": 12454,
          "title": "Static search trees: 40x faster than binary search",
          "imageUrl": null
        }
      ]
    }
  ],
  "cliVersion": "1.15.1"
}