{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": []
    },
    {
      "title": "Max Slater",
      "feedUrl": "https://thenumb.at/feed.xml",
      "siteUrl": "https://thenumb.at/",
      "articles": []
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/4dc4ce2011ef",
          "author": "Netflix Technology Blog",
          "description": "Authors:Bruce Wobbe, Leticia Kwok",
          "link": "https://netflixtechblog.com/the-next-step-in-personalization-dynamic-sizzles-4dc4ce2011ef?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-11-08T20:56:53.000Z",
          "wordCount": 4174,
          "title": "The Next Step in Personalization: Dynamic Sizzles",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:948/0*OxP3aIMkQW6d-BjK"
        },
        {
          "id": "https://medium.com/p/936766f0017c",
          "author": "Netflix Technology Blog",
          "description": "Empowering video editors with multimodal machine learning to discover perfect moments across the entire Netflix catalog",
          "link": "https://netflixtechblog.com/building-in-video-search-936766f0017c?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-11-06T17:35:19.000Z",
          "wordCount": 3929,
          "title": "Building In-Video Search",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:1000/0*32RfnKGMENXaqEX8"
        },
        {
          "id": "https://medium.com/p/0d83f5a00d08",
          "author": "Netflix Technology Blog",
          "description": "Democratizing Stream Processing @ Netflix",
          "link": "https://netflixtechblog.com/streaming-sql-in-data-mesh-0d83f5a00d08?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-11-03T21:48:50.000Z",
          "wordCount": 4750,
          "title": "Streaming SQL in Data Mesh",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:1200/1*VxZlXPDb8-d7Xf4kfSulnw.png"
        },
        {
          "id": "https://medium.com/p/ed620b9c6225",
          "author": "Netflix Technology Blog",
          "description": "How Netflix’s Container Platform Connects Linux Kernel Panics to Pods",
          "link": "https://netflixtechblog.com/kubernetes-and-kernel-panics-ed620b9c6225?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-10-27T16:05:58.000Z",
          "wordCount": 4122,
          "title": "Kubernetes And Kernel Panics",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:1200/1*cjClRuyUQ67lu2shmjCObQ.png"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": []
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2023/11/07/dta-oriented-blogging.html",
          "author": null,
          "description": "Wherein I describe the setup of this blog. The main take away from the post are not specific\ntechnical tools, but the underlying principles and ideas, which I wish I had articulated earlier.",
          "link": "https://matklad.github.io/2023/11/07/dta-oriented-blogging.html",
          "publishedOn": "2023-11-07T00:00:00.000Z",
          "wordCount": 2058,
          "title": "Data Oriented Blogging",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/10/23/unified-vs-split-diff.html",
          "author": null,
          "description": "Which is better for code reviews, a unified diff or a split diff?",
          "link": "https://matklad.github.io/2023/10/23/unified-vs-split-diff.html",
          "publishedOn": "2023-10-23T00:00:00.000Z",
          "wordCount": 684,
          "title": "Unified Versus Split Diff",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/10/18/obligations.html",
          "author": null,
          "description": "My thoughts on the topic of whether maintainers owe you anything. Speaking as an author, a maintainer,\na user of, and a contributor to open-source software.",
          "link": "https://matklad.github.io/2023/10/18/obligations.html",
          "publishedOn": "2023-10-18T00:00:00.000Z",
          "wordCount": 909,
          "title": "Unless Explicitly Specified Otherwise, Open Source Software With Users Carries Moral Obligations",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    },
    {
      "title": "samwho.dev",
      "feedUrl": "https://samwho.dev/rss.xml",
      "siteUrl": "https://samwho.dev/rss.xml",
      "articles": []
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net/feed.atom",
      "articles": []
    },
    {
      "title": "Daniel Lemire's blog",
      "feedUrl": "https://lemire.me/blog/feed/",
      "siteUrl": "https://lemire.me/blog",
      "articles": [
        {
          "id": "https://lemire.me/blog/?p=20933",
          "author": "Daniel Lemire",
          "description": "Suppose that you want to check whether a character in C++ belongs to a fixed set, such as ‘\\0’, ‘\\x09’, ‘\\x0a’,’\\x0d’, ‘ ‘, ‘#’, ‘/’, ‘:’, ‘<‘, ‘>’, ‘?’, ‘@’, ‘[‘, ‘\\\\’, ‘]’, ‘^’, ‘|’. A simple way is to generate a 256-byte array of Boolean values and lookup the value. This approach is sometimes … Continue reading Generating arrays at compile-time in C++ with lambdas",
          "link": "https://lemire.me/blog/2023/11/07/generating-arrays-at-compile-time-in-c-with-lambdas/",
          "publishedOn": "2023-11-07T20:54:12.000Z",
          "wordCount": 3668,
          "title": "Generating arrays at compile-time in C++ with lambdas",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20907",
          "author": "Daniel Lemire",
          "description": "In C++, suppose that you append to a string one character at a time: while(my_string.size() <= 10'000'000) { my_string += \"a\"; } In theory, it might be possible for the C++ runtime library to implement this routine as the creation of a new string with each append: it could allocate a new memory region that … Continue reading Appending to an std::string character-by-character: how does the capacity grow?",
          "link": "https://lemire.me/blog/2023/10/23/appending-to-an-stdstring-character-by-character-how-does-the-capacity-grow/",
          "publishedOn": "2023-10-23T13:33:37.000Z",
          "wordCount": 4547,
          "title": "Appending to an std::string character-by-character: how does the capacity grow?",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20899",
          "author": "Daniel Lemire",
          "description": "The C++ library has long been organized around stream classes, at least when it comes to reading and parsing strings. But streams can be surprisingly slow. For example, if you want to parse numbers, then this C++ routine is close to being the worst possible choice for performance: std::stringstream in(mystring); while(in >> x) { sum … Continue reading For processing strings, streams in C++ can be slow",
          "link": "https://lemire.me/blog/2023/10/19/for-processing-strings-streams-in-c-can-be-slow/",
          "publishedOn": "2023-10-19T01:55:34.000Z",
          "wordCount": 4351,
          "title": "For processing strings, streams in C++ can be slow",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20892",
          "author": "Daniel Lemire",
          "description": "In about 10 years, Apple has multiplied by 19 the number of transistors in its mobile processors. It corresponds roughly to a steady rate of improvement of 34% per year on the number of transistors, or a doubling every 2.5 years. In real dollars, an iPhone has roughly a constant price: the price tag of … Continue reading How many billions of transistors in your iPhone processor?",
          "link": "https://lemire.me/blog/2023/10/18/how-many-billions-of-transistors-in-your-iphone-processor/",
          "publishedOn": "2023-10-18T13:51:28.000Z",
          "wordCount": 3696,
          "title": "How many billions of transistors in your iPhone processor?",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20886",
          "author": "Daniel Lemire",
          "description": "Computer software is typically deterministic on paper: if you run twice the same program with the same inputs, you should get the same outputs. In practice, the complexity of modern computing makes it unlikely that you could ever run twice the same program and get exactly the same result, down to the exact same execution … Continue reading Randomness in programming (with Go code)",
          "link": "https://lemire.me/blog/2023/10/17/randomness-in-programming-with-go-code/",
          "publishedOn": "2023-10-17T00:15:32.000Z",
          "wordCount": 13355,
          "title": "Randomness in programming (with Go code)",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        }
      ]
    },
    {
      "title": "devever.net/~hl",
      "feedUrl": "https://www.devever.net/~hl/index.feed",
      "siteUrl": "https://www.devever.net/~hl/",
      "articles": [
        {
          "id": "https://www.devever.net/~hl/expect-ct-lite",
          "author": null,
          "description": "<div type=\"xhtml\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p xmlns=\"http://www.w3.org/1999/xhtml\">Last week we witnessed the , most likely by a Western nation-state. While it's  to any\nattack which was carried out in this incident, one thing that has been brought\nto my attention in the aftermath of this is that Certificate Transparency\nlogging remains optional for CAs.<a href=\"xmpp-incident\">discovery of the compromise of an XMPP\nservice</a><a href=\"xmpp-incident-2#context-of-certificate-transparency\">not\ndirectly related</a></p></div></div>",
          "link": "https://www.devever.net/~hl/expect-ct-lite",
          "publishedOn": "2023-10-28T14:07:00.000Z",
          "wordCount": 3264,
          "title": "[Computing] Expect-CT Lite: A humble proposal for minimal CT enforcement in TLS certificates",
          "imageUrl": null
        },
        {
          "id": "https://www.devever.net/~hl/xmpp-incident-2",
          "author": null,
          "description": "<div type=\"xhtml\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p xmlns=\"http://www.w3.org/1999/xhtml\">I've had a few comments in response to my previous article,  which have provided\nXMPP-specific suggestions for how this could have been mitigated.<a href=\"https://www.devever.net/~hl/xmpp-incident\">Mitigating the\nHetzner/Linode XMPP.ru MitM interception\nincident</a></p></div></div>",
          "link": "https://www.devever.net/~hl/xmpp-incident-2",
          "publishedOn": "2023-10-28T14:06:00.000Z",
          "wordCount": 1566,
          "title": "[Computing] Mitigating the Hetzner/Linode XMPP.ru MitM interception incident, part 2: XMPP-specific mitigations",
          "imageUrl": null
        },
        {
          "id": "https://www.devever.net/~hl/xmpp-incident",
          "author": null,
          "description": "<div type=\"xhtml\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p xmlns=\"http://www.w3.org/1999/xhtml\">(If you just want some recommendations for what to do, .)<a href=\"#recommendations\">skip down to the Recommendations section below</a></p></div></div>",
          "link": "https://www.devever.net/~hl/xmpp-incident",
          "publishedOn": "2023-10-20T20:30:00.000Z",
          "wordCount": 3757,
          "title": "[Computing] Mitigating the Hetzner/Linode XMPP.ru MitM interception incident",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "apenwarr",
      "feedUrl": "https://apenwarr.ca/log/rss.php",
      "siteUrl": "https://apenwarr.ca/log/",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}