{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2025/03/06/",
          "author": null,
          "description": "Ted Unangst published dude, where are your syscalls? on flak\nyesterday, with a neat demonstration of OpenBSD’s pinsyscall\nsecurity feature, whereby only pre-registered addresses are allowed to\nmake system calls. Whether it strengthens or weakens security is up for\ndebate, but regardless it’s an interesting, low-level programming\nchallenge. The original demo is fragile for multiple reasons, and requires\nmanually locating and entering addresses for each build. In this article I\nshow how to fix it. To prove that it’s robust, I ported an entire, real\napplication to use raw system calls on OpenBSD.\nThe original program uses ARM64 assembly. I’m a lot more comfortable with\nx86-64 assembly, plus that’s the hardware I have readily on hand. So the\nassembly language will be different, but all the con…",
          "link": "https://nullprogram.com/blog/2025/03/06/",
          "publishedOn": "2025-03-06T02:43:20.000Z",
          "wordCount": 1438,
          "title": "A more robust raw OpenBSD syscall demo",
          "imageUrl": null
        },
        {
          "id": "https://nullprogram.com/blog/2025/03/02/",
          "author": null,
          "description": "Wavefront OBJ is a line-oriented, text format for 3D geometry. It’s\nwidely supported by modeling software, easy to parse, and trivial to emit,\nmuch like Netpbm for 2D image data. Poke around hobby 3D graphics\nprojects and you’re likely to find a bespoke OBJ parser. While typically\nonly loading their own model data, so robustness doesn’t much matter, they\nusually have hard limitations and don’t stand up to fuzz testing.\nThis article presents a robust, partial OBJ parser in C with no hard-coded\nlimitations, written from scratch. Like similar articles, it’s not\nreally about OBJ but demonstrating some techniques you’ve probably never\nseen before.\nIf you’d like to see the ready-to-run full source: objrender.c.\nAll images are screenshots of this program.\nFirst let’s establish the requirements. B…",
          "link": "https://nullprogram.com/blog/2025/03/02/",
          "publishedOn": "2025-03-02T23:22:58.000Z",
          "wordCount": 2889,
          "title": "Robust Wavefront OBJ model parsing in C",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/8efe69ebd653",
          "author": "Netflix Technology Blog",
          "description": "",
          "link": "https://netflixtechblog.com/title-launch-observability-at-netflix-scale-8efe69ebd653?source=rss----2615bd06b42e---4",
          "publishedOn": "2025-03-05T01:24:53.000Z",
          "wordCount": null,
          "title": "Title Launch Observability at Netflix Scale",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": []
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2025/03/21/use-long-options-in-scripts.html",
          "author": null,
          "description": "Many command line utilities support short form options (-f) and long form options (--force).\nShort form is for interactive usage. In scripts, use the long form.",
          "link": "https://matklad.github.io/2025/03/21/use-long-options-in-scripts.html",
          "publishedOn": "2025-03-21T00:00:00.000Z",
          "wordCount": 305,
          "title": "Use Long Options in Scripts",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2025/03/19/comptime-zig-orm.html",
          "author": null,
          "description": "This post can be considered an advanced Zig tutorial. I will be covering some of the more unique\naspects of the language, but won't be explaining the easy part. If you haven't read the Zig\nLanguage Reference, you might start there. Additionally,\nwe will also learn the foundational trick for implementing relational model.",
          "link": "https://matklad.github.io/2025/03/19/comptime-zig-orm.html",
          "publishedOn": "2025-03-19T00:00:00.000Z",
          "wordCount": 7834,
          "title": "Comptime Zig ORM",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2025/02/23/macos-for-kde-users.html",
          "author": null,
          "description": "I've switched to MacOS after using Linux continuously since 2012 or thereabouts (first Arch, and\nthen, since 2015, NixOS). This post documents my experience.",
          "link": "https://matklad.github.io/2025/02/23/macos-for-kde-users.html",
          "publishedOn": "2025-02-23T00:00:00.000Z",
          "wordCount": 3128,
          "title": "MacOS for KDE Users",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hello",
      "feedUrl": "https://jdrouet.github.io/atom.xml",
      "siteUrl": "/",
      "articles": [
        {
          "id": "https://jdrouet.github.io/posts/202503161800-search-engine-intro/",
          "author": null,
          "description": "Have you ever wondered how search engines work under the hood? I'm not talking about vector search or anything fancy, but just the good old search engines that could really find what we would look for.\nEven though we can already find some articles about how search engine work from a high level, it could be interesting to implement our own and add some constraints to make it fun (and maybe simpler).\nThe Challenge\nMost search engine implementations you'll find online target the server-side. They're great for large-scale applications but don't address the unique challenges of building a search engine that runs directly in your browser, your mobile app or in a desktop app. That's exactly what we're going to tackle: creating a client-side search engine that works seamlessly across platforms. An…",
          "link": "https://jdrouet.github.io/posts/202503161800-search-engine-intro/",
          "publishedOn": "2025-03-16T00:00:00.000Z",
          "wordCount": 944,
          "title": "Building a search engine from scratch, in Rust",
          "imageUrl": "/images/logo.png"
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    },
    {
      "title": "samwho.dev",
      "feedUrl": "https://samwho.dev/rss.xml",
      "siteUrl": "https://samwho.dev/rss.xml",
      "articles": []
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net",
      "articles": []
    },
    {
      "title": "Daniel Lemire's blog",
      "feedUrl": "https://lemire.me/blog/feed/",
      "siteUrl": "https://lemire.me/blog",
      "articles": [
        {
          "id": "https://lemire.me/blog/?p=21917",
          "author": "Daniel Lemire",
          "description": "Let us consider a simple C++ function which divides all values in a range of integers: void divide(std::span<int> i, int d) { for (auto& value : i) { value /= d; } } A division between two integers is one of the most expensive operations you can do over integers: it is much slower than … Continue reading Speeding up C++ code with template lambdas",
          "link": "https://lemire.me/blog/2025/03/15/speeding-up-c-code-with-template-lambdas/",
          "publishedOn": "2025-03-15T17:29:50.000Z",
          "wordCount": 4523,
          "title": "Speeding up C++ code with template lambdas",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21910",
          "author": "Daniel Lemire",
          "description": "In practice, the software we write runs on several processors. Unfortunately, much of what we take for granted on a single processor becomes false when there are more than one processor. For example, if two processors modify the same piece of memory, what is the state of the memory after the modifications? It is difficult … Continue reading An overview of parallel programming (Go edition)",
          "link": "https://lemire.me/blog/2025/03/09/an-overview-of-parallel-programming-go-edition/",
          "publishedOn": "2025-03-09T21:35:41.000Z",
          "wordCount": 7821,
          "title": "An overview of parallel programming (Go edition)",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21905",
          "author": "Daniel Lemire",
          "description": "Jarred Sumner, the main author of the Bun JavaScript engine, commented a few days ago on X that opening many files on macOS could be slow due to thread contention: “your $5,000 computer is only capable of opening 1 file at a time”. I was curious and I decided to test it out. I wrote … Continue reading How fast can you open 1000 files?",
          "link": "https://lemire.me/blog/2025/03/01/how-fast-can-you-open-1000-files/",
          "publishedOn": "2025-03-01T22:41:04.000Z",
          "wordCount": 3629,
          "title": "How fast can you open 1000 files?",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "devever.net/~hl",
      "feedUrl": "https://www.devever.net/~hl/index.feed",
      "siteUrl": "https://www.devever.net/~hl/",
      "articles": []
    },
    {
      "title": "apenwarr",
      "feedUrl": "https://apenwarr.ca/log/rss.php",
      "siteUrl": "https://apenwarr.ca/log/",
      "articles": []
    },
    {
      "title": "home on CuriousCoding",
      "feedUrl": "https://curiouscoding.nl/index.xml",
      "siteUrl": "https://curiouscoding.nl/",
      "articles": [
        {
          "id": "https://curiouscoding.nl/posts/simd-sketch/",
          "author": null,
          "description": "\\[\n\\newcommand{\\sketch}{\\mathsf{sketch}}\n\\]\nThis is a small survey on MinHash-based sketching methods, to go along with my\nsimd-sketch crate (github, crates.io, docs.rs). See also Cohen (2014) for a previous\nsmall survey.\nGoal. SimdSketch should be fast. It is and should remain a conceptually\nsimple tool, that prefers fast implementations of simple ideas over complex ideas.\nFor now, it works well for the simple case of relatively high identity\nsequences. I may implement more algorithmic variants, but also the API should\nremain concise.",
          "link": "https://curiouscoding.nl/posts/simd-sketch/",
          "publishedOn": "2025-03-08T23:00:00.000Z",
          "wordCount": 5500,
          "title": "SimdSketch: a fast bucket sketch",
          "imageUrl": null
        },
        {
          "id": "https://curiouscoding.nl/posts/tigs/",
          "author": null,
          "description": "1 De Bruijn graph\n \n \n \n\nConsider an edge-centric De Bruijn graph, where each edge corresponds to a\nk-mer, and nodes are the \\(k-1\\) overlaps between adjacent k-mers. In the figures,\nall edges are directed towards the right.\n\n\n\n\n 2 k-mers\n \n \n \n\nThe goal is now to store all edges / k-mers of the graph efficiently.\nA spectrum preserving string set (SPSS) is a set of strings whose k-mers are\nthe k-mers of the input graph, that does not contain duplicate k-mers (Rahman and Medvedev 2020).",
          "link": "https://curiouscoding.nl/posts/tigs/",
          "publishedOn": "2025-03-08T23:00:00.000Z",
          "wordCount": 409,
          "title": "Types of tigs",
          "imageUrl": null
        },
        {
          "id": "https://curiouscoding.nl/slides/minimizers/",
          "author": null,
          "description": "1 Warming up: A cute prolblem\n \n \n \n\n\nGiven a string, choose one character.\n\nCABAACBD\nGiven a rotation, choose one character.\n\nACBDCABA\nCan we always choose the same character?\nYes: e.g. the smallest rotation (bd-anchor):\n\nCAB​A​ACBD\nACBDCAB​A\n1.1 This talk: what if one character is hidden?\n \n \n \n\n\nGiven a string (length \\(w\\)), choose one character.\n\nCABAACBD​​X\nGiven a rotation (of the hidden \\(w+1\\) string), choose one character.\n\nACBDXCAB​A\nCan we always choose the same character?\nMaybe?\n\nCAB​A​ACBD\nACBDXCAB 🤔\n1.2 The answer is no!\n \n \n \n\nC​ABAACBDX rotations:",
          "link": "https://curiouscoding.nl/slides/minimizers/",
          "publishedOn": "2025-02-26T23:00:00.000Z",
          "wordCount": 407,
          "title": "Near-optimal sampling schemes",
          "imageUrl": null
        },
        {
          "id": "https://curiouscoding.nl/posts/thesis/",
          "author": null,
          "description": "Table of Contents\n1 Abstract\n2 Introduction\n\n2.1 Objectives\n2.2 Challenges\n2.3 List of papers\n2.4 Thesis structure and contributions\n2.5 Personal note\n3 Discussion and conclusion\n\n3.1 Overview\n3.2 Future directions\n3.3 Concluding remarks\n4 Bibliography\n1 Abstract\n \n \n \n\n\n 2 Introduction\n \n \n \n\nSummary.\n2.1 Objectives\n \n \n \n\n\n 2.2 Challenges\n \n \n \n\n\n 2.3 List of papers\n \n \n \n\nPairwise alignment.\nA*PA, Bioinformatics 24.\nGroot Koerkamp, Ragnar, and Pesho Ivanov. 2024. “Exact Global Alignment Using A* with Chaining Seed Heuristic and Match Pruning.” Edited by Tobias Marschall. Bioinformatics 40 (3). https://doi.org/10.1093/bioinformatics/btae032.",
          "link": "https://curiouscoding.nl/posts/thesis/",
          "publishedOn": "2025-02-22T23:00:00.000Z",
          "wordCount": 415,
          "title": "0. Optimal Throughput Bioinformatics",
          "imageUrl": null
        },
        {
          "id": "https://curiouscoding.nl/posts/pairwise-alignment/",
          "author": null,
          "description": "Table of Contents\n1 Introduction\n\n1.1 Overview\n2 A history of pairwise alignment\n3 Problem statement\n4 Variations on pairwise alignment\n\n4.1 Alignment types\n4.2 Cost Models\n4.3 Minimizing Cost versus Maximizing Score\n5 The classic quadratic DP algorithms\n6 Linear Memory using Divide and Conquer\n7 Dijkstra’s algorithm and A*\n8 Computational volumes and band doubling\n9 Diagonal transition\n10 Subquadratic methods and lower bounds\n11 Parallelism\n12 LCS and Contours\n13 Some tools\n14 Summary\n15 TODO\n\n15.1 A*PA2\n\nSummary/overview/contribs\nNotation\nMethods\nEvaluation\nDiscussion\n15.2 Semi-global alignment\nAttribution\n \nThis chapter is based on two papers:",
          "link": "https://curiouscoding.nl/posts/pairwise-alignment/",
          "publishedOn": "2025-02-21T23:00:00.000Z",
          "wordCount": 9331,
          "title": "1. Pairwise Alignment",
          "imageUrl": null
        }
      ]
    }
  ],
  "cliVersion": "1.15.1"
}