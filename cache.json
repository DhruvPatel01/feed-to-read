{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2024/06/30/",
          "author": null,
          "description": "I introduced two new tools to w64devkit, vc++filt and\npeports (pronounced like purports), which aid manual symbol\ninspection and complement one another. As of this writing, the latter is\nnot yet in a release, but it’s feature-complete and trivial to build if\nyou wanted to try it out early. This article explains the motivation and\npurpose for each.\nvc++filt\nBinutils has c++filt, a tool to demangle C++ symbols. Its primary use\ncase is operating on whole files or streams, passing through anything that\ndoesn’t look like a mangled C++ symbol, and interpolating human-friendly\nnames in place of mangled symbols. In, say, Vim I could run the current\nbuffer through it to translate mangled symbols (:%!c++filt).\nOtherwise it’s often composed with other tools in a pipeline.\nFor example, suppose I want …",
          "link": "https://nullprogram.com/blog/2024/06/30/",
          "publishedOn": "2024-06-30T21:30:19.000Z",
          "wordCount": 1961,
          "title": "Symbol inspection tools for w64devkit: vc++filt and peports",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/e735e6ce8f7d",
          "author": "Netflix Technology Blog",
          "description": "Applying Quality of Service techniques at the application level",
          "link": "https://netflixtechblog.com/enhancing-netflix-reliability-with-service-level-prioritized-load-shedding-e735e6ce8f7d?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-06-25T22:58:09.000Z",
          "wordCount": 6060,
          "title": "Enhancing Netflix Reliability with Service-Level Prioritized Load Shedding",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*2KByIB47RWng5UNH"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": [
        {
          "id": "https://nim-lang.org//blog/2024/07/03/version-208-released.html",
          "author": null,
          "description": "The Nim team is happy to announce Nim version 2.0.8, our fourth patch release for Nim 2.0.\nVersion 2.0.8 is a small release, containing just 20 commits, but it brings important improvements to Nim 2.0.6, released 10 days ago.\nMajor improvements in this release:\nNim’s allocator is now much more stable with --threads:on.\nBetter support for gcc14.\nOptimized setLen(0) for uninitialized strings and seqs.\nOptimized move when used with --mm:refc.\nThis release comes relatively quickly after our previous release because it was time-critical for our partner Status to receive these improvements as soon as possible.\nIt is our way of saying “thank you” for their continued support of Nim.\nCheck out if the package manager of your OS already ships version 2.0.8 or\ninstall it as described here.\nExisting users\nIf you have installed a previous version of Nim using choosenim,\ngetting Nim 2.0.8 is as easy as:\n$ choosenim 2.0.8\n\nIf you are on OSX ARM, choosenim will not work for you.\nPlease choose an alternative method of installing or updating.\nAlternatively, you can download Nim 2.0.8 from\nour nightlies builds.\nDonating to Nim\nWe would like to encourage you to donate to Nim.\nThe donated money will be used to further improve Nim by creating bounties\nfor the most important bugfixes and features.\nYou can donate via:\nOpen Collective\nBitcoin: 1BXfuKM2uvoD6mbx4g5xM3eQhLzkCK77tJ\nIf you are a company, we also offer commercial support.\nBugfixes\nThese reported issues were fixed:\nFixed “[Semi-regression] C code contains backtick`gensym”\n(#23711)\nFixed “setLen(0) allocates memory causing performance regression”\n(#23742)\nFixed “Sigsegv on std/tasks destructor”\n(#23725)\nFixed “genericAssign does not take care of the importC variables”\n(#9940)\nFixed “move(table) does not move the table”\n(#23759)\nFixed “Local variables can be prematurely moved to closure, causing use-after-move”\n(#23748)\nFixed “tvatiteropenarray test fails with c++”\n(#19977)\nThe complete list of changes is available\nhere.",
          "link": "https://nim-lang.org//blog/2024/07/03/version-208-released.html",
          "publishedOn": "2024-07-03T00:00:00.000Z",
          "wordCount": 451,
          "title": "Nim version 2.0.8 released",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        }
      ]
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2024/07/05/properly-testing-concurrent-data-structures.html",
          "author": null,
          "description": "There's a fascinating Rust library, loom, which can be used to\nthoroughly test lock-free data structures. I always wanted to learn how it works. I still do! But\nrecently I accidentally implemented a small toy which, I think, contains some of the loom's ideas,\nand it seems worthwhile to write about that. The goal here isn't to teach you what you should be\nusing in practice (if you need that, go read loom's docs), but rather to derive a couple of neat\nideas from first principles.",
          "link": "https://matklad.github.io/2024/07/05/properly-testing-concurrent-data-structures.html",
          "publishedOn": "2024-07-05T00:00:00.000Z",
          "wordCount": 4909,
          "title": "Properly Testing Concurrent Data Structures",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    },
    {
      "title": "samwho.dev",
      "feedUrl": "https://samwho.dev/rss.xml",
      "siteUrl": "https://samwho.dev/rss.xml",
      "articles": []
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net/feed.atom",
      "articles": []
    },
    {
      "title": "Daniel Lemire's blog",
      "feedUrl": "https://lemire.me/blog/feed/",
      "siteUrl": "https://lemire.me/blog",
      "articles": [
        {
          "id": "https://lemire.me/blog/?p=21470",
          "author": "Daniel Lemire",
          "description": "Earlier this year, both major Web engines (WebKit/Safari and Chromium/Chrome/Edge/Brave) accelerated HTML parsing using SIMD instructions. These ‘SIMD’ instructions are special instructions that are present in all our processors that can process multiple bytes at once (e.g., 16 bytes). The problem that WebKit and Chromium solve is to jump to the next target character as … Continue reading Scan HTML even faster with SIMD instructions (C++ and C#)",
          "link": "https://lemire.me/blog/2024/07/20/scan-html-even-faster-with-simd-instructions-c-and-c/",
          "publishedOn": "2024-07-20T21:30:43.000Z",
          "wordCount": 3649,
          "title": "Scan HTML even faster with SIMD instructions (C++ and C#)",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21457",
          "author": "Daniel Lemire",
          "description": "The world of commodity processor is roughly divided in two: x64 chips for servers and PCs, and ARM processors for mobile devices. However, ARM chips increasingly common on servers and laptop. My own favorite laptop is an Apple macBook with an M2 chip. Amazon has been producing its own ARM processors (Graviton) and it recently … Continue reading Benchmarking ARM processors: Graviton 4, Graviton 3 and Apple M2",
          "link": "https://lemire.me/blog/2024/07/10/benchmarking-arm-processors-graviton-4-graviton-3-and-apple-m2/",
          "publishedOn": "2024-07-10T20:43:45.000Z",
          "wordCount": 3472,
          "title": "Benchmarking ARM processors: Graviton 4, Graviton 3 and Apple M2",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21437",
          "author": "Daniel Lemire",
          "description": "Recently, the two major Web engines (WebKit and Chromium) adopted fast SIMD routines to scan HTML content. The key insight is to use vectorized classification (Langdale and Lemire, 2019): you load blocks of characters and identify the characters you seek using a few instructions. In particular, we use ‘SIMD instructions’, special instructions that are available … Continue reading Scan HTML faster with SIMD instructions: .NET/C# Edition",
          "link": "https://lemire.me/blog/2024/07/05/scan-html-faster-with-simd-instructions-net-c-edition/",
          "publishedOn": "2024-07-05T19:44:50.000Z",
          "wordCount": 3995,
          "title": "Scan HTML faster with SIMD instructions: .NET/C# Edition",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21423",
          "author": "Daniel Lemire",
          "description": "In C, we allocate memory on the heap using the malloc function. Other programming languages like C++ or zig (e.g., std.heap.c_allocator) may call on malloc underneath so it is important to understand how malloc works. Furthermore, the same concepts apply broadly to other memory allocators. In theory, you could allocate just one byte like so: … Continue reading How much memory does a call to ‘malloc’  allocate?",
          "link": "https://lemire.me/blog/2024/06/27/how-much-memory-does-a-call-to-malloc-allocates/",
          "publishedOn": "2024-06-27T20:41:51.000Z",
          "wordCount": 3735,
          "title": "How much memory does a call to ‘malloc’  allocate?",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21410",
          "author": "Daniel Lemire",
          "description": "Copying data in software is cheap, but it is not at all free. As you start optimizing your code, you might find that copies become a performance bottleneck. Let me be clear that copies really are cheap. It is often more performant to copy that data than to track the same memory across different threads. … Continue reading Performance tip: avoid unnecessary copies",
          "link": "https://lemire.me/blog/2024/06/22/performance-tip-avoid-unnecessary-copies/",
          "publishedOn": "2024-06-22T19:14:18.000Z",
          "wordCount": 3654,
          "title": "Performance tip: avoid unnecessary copies",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "devever.net/~hl",
      "feedUrl": "https://www.devever.net/~hl/index.feed",
      "siteUrl": "https://www.devever.net/~hl/",
      "articles": [
        {
          "id": "https://www.devever.net/~hl/u/202406#23a",
          "author": null,
          "description": "<div type=\"xhtml\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><ul><li><a href=\"https://www.linkedin.com/in/hugo-landau/\">Hire me</a></li></ul><p xmlns=\"http://www.w3.org/1999/xhtml\">Looking for a new role. Expertise in cryptography, security, networking,\nreversing. Dev, ops, security. Amongst other things I've authored a , a\n and . I gave a talk about .\n / .<a href=\"https://github.com/openssl/openssl/pulls?q=author%3Ahlandau\">QUIC\nimplementation</a><a href=\"http://github.com/hlandau/acmetool\">Let's Encrypt client</a><a href=\"/~hl/acme-caa-live\">an\nRFC</a><a href=\"/~hl/ortega-37c3/\">reverse engineering an Ethernet\ncontroller's firmware at 37C3</a><a href=\"https://www.linkedin.com/in/hugo-landau/\">LinkedIn</a><a href=\"/~hl/contact\">contact\ndetails</a></p></div></div>",
          "link": "https://www.devever.net/~hl/u/202406#23a",
          "publishedOn": "2024-06-23T09:43:07.000Z",
          "wordCount": 67,
          "title": "[Hμblog] Hire me",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "apenwarr",
      "feedUrl": "https://apenwarr.ca/log/rss.php",
      "siteUrl": "https://apenwarr.ca/log/",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}