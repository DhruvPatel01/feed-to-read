{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2025/03/06/",
          "author": null,
          "description": "Ted Unangst published dude, where are your syscalls? on flak\nyesterday, with a neat demonstration of OpenBSD’s pinsyscall\nsecurity feature, whereby only pre-registered addresses are allowed to\nmake system calls. Whether it strengthens or weakens security is up for\ndebate, but regardless it’s an interesting, low-level programming\nchallenge. The original demo is fragile for multiple reasons, and requires\nmanually locating and entering addresses for each build. In this article I\nshow how to fix it. To prove that it’s robust, I ported an entire, real\napplication to use raw system calls on OpenBSD.\nThe original program uses ARM64 assembly. I’m a lot more comfortable with\nx86-64 assembly, plus that’s the hardware I have readily on hand. So the\nassembly language will be different, but all the con…",
          "link": "https://nullprogram.com/blog/2025/03/06/",
          "publishedOn": "2025-03-06T02:43:20.000Z",
          "wordCount": 1438,
          "title": "A more robust raw OpenBSD syscall demo",
          "imageUrl": null
        },
        {
          "id": "https://nullprogram.com/blog/2025/03/02/",
          "author": null,
          "description": "Wavefront OBJ is a line-oriented, text format for 3D geometry. It’s\nwidely supported by modeling software, easy to parse, and trivial to emit,\nmuch like Netpbm for 2D image data. Poke around hobby 3D graphics\nprojects and you’re likely to find a bespoke OBJ parser. While typically\nonly loading their own model data, so robustness doesn’t much matter, they\nusually have hard limitations and don’t stand up to fuzz testing.\nThis article presents a robust, partial OBJ parser in C with no hard-coded\nlimitations, written from scratch. Like similar articles, it’s not\nreally about OBJ but demonstrating some techniques you’ve probably never\nseen before.\nIf you’d like to see the ready-to-run full source: objrender.c.\nAll images are screenshots of this program.\nFirst let’s establish the requirements. B…",
          "link": "https://nullprogram.com/blog/2025/03/02/",
          "publishedOn": "2025-03-02T23:22:58.000Z",
          "wordCount": 2889,
          "title": "Robust Wavefront OBJ model parsing in C",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/1a0bd8e02d39",
          "author": "Netflix Technology Blog",
          "description": "",
          "link": "https://netflixtechblog.com/foundation-model-for-personalized-recommendation-1a0bd8e02d39?source=rss----2615bd06b42e---4",
          "publishedOn": "2025-03-29T00:51:25.000Z",
          "wordCount": null,
          "title": "Foundation Model for Personalized Recommendation",
          "imageUrl": null
        },
        {
          "id": "https://medium.com/p/c9ab1f4bd72b",
          "author": "Netflix Technology Blog",
          "description": "",
          "link": "https://netflixtechblog.com/hdr10-now-streaming-on-netflix-c9ab1f4bd72b?source=rss----2615bd06b42e---4",
          "publishedOn": "2025-03-24T18:39:15.000Z",
          "wordCount": null,
          "title": "HDR10+ Now Streaming on Netflix",
          "imageUrl": null
        },
        {
          "id": "https://medium.com/p/8efe69ebd653",
          "author": "Netflix Technology Blog",
          "description": "",
          "link": "https://netflixtechblog.com/title-launch-observability-at-netflix-scale-8efe69ebd653?source=rss----2615bd06b42e---4",
          "publishedOn": "2025-03-05T01:24:53.000Z",
          "wordCount": null,
          "title": "Title Launch Observability at Netflix Scale",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": []
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2025/03/25/debugger-is-repl-is-debugger.html",
          "author": null,
          "description": "I love debuggers! The last time I used a debugger seriously was in 2017 or so, when I was still\ncoding in Kotlin. I've since switched to working with native code, and, sadly gdb and lldb are of\nalmost no help for me. This is because they are mere debuggers, but what I need is a REPL, and a\ndebugger, all in one. In this article I show a more productive way to use debuggers as REPLS.",
          "link": "https://matklad.github.io/2025/03/25/debugger-is-repl-is-debugger.html",
          "publishedOn": "2025-03-25T00:00:00.000Z",
          "wordCount": 501,
          "title": "A Debugger is a REPL is a Debugger",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2025/03/21/use-long-options-in-scripts.html",
          "author": null,
          "description": "Many command line utilities support short form options (-f) and long form options (--force).\nShort form is for interactive usage. In scripts, use the long form.",
          "link": "https://matklad.github.io/2025/03/21/use-long-options-in-scripts.html",
          "publishedOn": "2025-03-21T00:00:00.000Z",
          "wordCount": 189,
          "title": "Use Long Options in Scripts",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2025/03/19/comptime-zig-orm.html",
          "author": null,
          "description": "This post can be considered an advanced Zig tutorial. I will be covering some of the more unique\naspects of the language, but won't be explaining the easy part. If you haven't read the Zig\nLanguage Reference, you might start there. Additionally,\nwe will also learn the foundational trick for implementing relational model.",
          "link": "https://matklad.github.io/2025/03/19/comptime-zig-orm.html",
          "publishedOn": "2025-03-19T00:00:00.000Z",
          "wordCount": 7718,
          "title": "Comptime Zig ORM",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "jdrouet",
      "feedUrl": "https://jdrouet.github.io/atom.xml",
      "siteUrl": "/",
      "articles": [
        {
          "id": "https://jdrouet.github.io/posts/202503191700-search-engine-part-2/",
          "author": null,
          "description": "In the previous article, I explained how we'll write on disk and how we'll implement an abstraction so that it works on any device as well as in the browser. Now, it's time to start thinking about what we'll be storing and in what shape.\nDefining A Document\nIn the majority of time, the use of a search engine is coupled with a database, because it's rarely the search-engine responsibility to store the document. The database stores the things and the search-engine indexes the important attributes that need to be searched on. Indexing content is memory intensive so better not abuse it.\nThe consequence of this it that the document that are being indexed, most of the time, have a defined structure, a schema that they follow.\nIf we look at an example of search engine like Tantivy, indexing a doc…",
          "link": "https://jdrouet.github.io/posts/202503191700-search-engine-part-2/",
          "publishedOn": "2025-03-28T00:00:00.000Z",
          "wordCount": 3758,
          "title": "Building a search engine from scratch, in Rust: part 2",
          "imageUrl": "/images/logo.png"
        },
        {
          "id": "https://jdrouet.github.io/posts/202503170800-search-engine-part-1/",
          "author": null,
          "description": "In the previous article, I introduced what project we're going to address in the following weeks: how to build a cross-platform search engine with encryption capabilities. Today, we'll have a look at the first technical challenge: how to store things on disk.\nYou might be thinking that we start with a simple topic, to warm up and get ready for the serious parts. That's both right and wrong at the same time. Writing on the filesystem from a mobile application or a desktop application is an easy task, but doing so in the browser while using the same interface is not as easy as it seems.\nAnd on top of that, we want our storage layer to read and write encrypted files, without compromising too much on performance.\nThe Storage Challenge\nBefore diving into search algorithms and indexing, we need …",
          "link": "https://jdrouet.github.io/posts/202503170800-search-engine-part-1/",
          "publishedOn": "2025-03-22T00:00:00.000Z",
          "wordCount": 2434,
          "title": "Building a search engine from scratch, in Rust: part 1",
          "imageUrl": "/images/logo.png"
        },
        {
          "id": "https://jdrouet.github.io/posts/202503161800-search-engine-intro/",
          "author": null,
          "description": "Have you ever wondered how search engines work under the hood? I'm not talking about vector search or anything fancy, but just the good old search engines that could really find what we would look for.\nEven though we can already find some articles about how search engine work from a high level, it could be interesting to implement our own and add some constraints to make it fun (and maybe simpler).\nThe Challenge\nMost search engine implementations you'll find online target the server-side. They're great for large-scale applications but don't address the unique challenges of building a search engine that runs directly in your browser, your mobile app or in a desktop app. That's exactly what we're going to tackle: creating a client-side search engine that works seamlessly across platforms. An…",
          "link": "https://jdrouet.github.io/posts/202503161800-search-engine-intro/",
          "publishedOn": "2025-03-16T00:00:00.000Z",
          "wordCount": 951,
          "title": "Building a search engine from scratch, in Rust: introduction",
          "imageUrl": "/images/logo.png"
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    },
    {
      "title": "samwho.dev",
      "feedUrl": "https://samwho.dev/rss.xml",
      "siteUrl": "https://samwho.dev/rss.xml",
      "articles": []
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net",
      "articles": []
    },
    {
      "title": "Daniel Lemire's blog",
      "feedUrl": "https://lemire.me/blog/feed/",
      "siteUrl": "https://lemire.me/blog",
      "articles": [
        {
          "id": "https://lemire.me/blog/?p=21947",
          "author": "Daniel Lemire",
          "description": "Most mobile devices use 64-bit ARM processors. A growing number of servers (Amazon, Microsoft) also use 64-bit ARM processors. These processors  have special instructions called ARM NEON providing parallelism called Single instruction, multiple data (SIMD). For example, you can compare sixteen values with sixteen other values using one instruction. Some of the most recent ARM … Continue reading Mixing ARM NEON with SVE code for fun and profit",
          "link": "https://lemire.me/blog/2025/03/29/mixing-arm-neon-with-sve-code-for-fun-and-profit/",
          "publishedOn": "2025-03-29T01:44:47.000Z",
          "wordCount": 3356,
          "title": "Mixing ARM NEON with SVE code for fun and profit",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21930",
          "author": "Daniel Lemire",
          "description": "There are two main types of fixed-precision integers in modern software: unsigned and signed. In C++20 and above, the signed integers must use the two’s complement convention. Other programming languages typically specify two’s complement as well. Two’s complement is a method for representing signed integers in binary, where the leftmost bit serves as the sign … Continue reading Unsigned comparisons using signed types",
          "link": "https://lemire.me/blog/2025/03/24/unsigned-comparisons-using-signed-types/",
          "publishedOn": "2025-03-24T23:24:50.000Z",
          "wordCount": 3209,
          "title": "Unsigned comparisons using signed types",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21917",
          "author": "Daniel Lemire",
          "description": "Let us consider a simple C++ function which divides all values in a range of integers: void divide(std::span<int> i, int d) { for (auto& value : i) { value /= d; } } A division between two integers is one of the most expensive operations you can do over integers: it is much slower than … Continue reading Speeding up C++ code with template lambdas",
          "link": "https://lemire.me/blog/2025/03/15/speeding-up-c-code-with-template-lambdas/",
          "publishedOn": "2025-03-15T17:29:50.000Z",
          "wordCount": 4584,
          "title": "Speeding up C++ code with template lambdas",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21910",
          "author": "Daniel Lemire",
          "description": "In practice, the software we write runs on several processors. Unfortunately, much of what we take for granted on a single processor becomes false when there are more than one processor. For example, if two processors modify the same piece of memory, what is the state of the memory after the modifications? It is difficult … Continue reading An overview of parallel programming (Go edition)",
          "link": "https://lemire.me/blog/2025/03/09/an-overview-of-parallel-programming-go-edition/",
          "publishedOn": "2025-03-09T21:35:41.000Z",
          "wordCount": 7843,
          "title": "An overview of parallel programming (Go edition)",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21905",
          "author": "Daniel Lemire",
          "description": "Jarred Sumner, the main author of the Bun JavaScript engine, commented a few days ago on X that opening many files on macOS could be slow due to thread contention: “your $5,000 computer is only capable of opening 1 file at a time”. I was curious and I decided to test it out. I wrote … Continue reading How fast can you open 1000 files?",
          "link": "https://lemire.me/blog/2025/03/01/how-fast-can-you-open-1000-files/",
          "publishedOn": "2025-03-01T22:41:04.000Z",
          "wordCount": 3651,
          "title": "How fast can you open 1000 files?",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "devever.net/~hl",
      "feedUrl": "https://www.devever.net/~hl/index.feed",
      "siteUrl": "https://www.devever.net/~hl/",
      "articles": []
    },
    {
      "title": "apenwarr",
      "feedUrl": "https://apenwarr.ca/log/rss.php",
      "siteUrl": "https://apenwarr.ca/log/",
      "articles": []
    },
    {
      "title": "home on CuriousCoding",
      "feedUrl": "https://curiouscoding.nl/index.xml",
      "siteUrl": "https://curiouscoding.nl/",
      "articles": [
        {
          "id": "https://curiouscoding.nl/posts/mapping/",
          "author": null,
          "description": "Table of Contents\n1 Alignment types, revisited\n\n1.1 Semi-global alignment\n1.2 Text searching\n1.3 Mapping\n2 Semi-global alignment\n3 Text searching\n4 Mapping\n\n4.1 The cost of chaining\n\n4.1.1 max: Anchored edit distance\n4.1.2 diff: gap-cost\n4.1.3 dist: seed heuristic\n4.1.4 minimap\n4.1.5 GCSH: gap-chaining seed heuristic\n5 New: A*Map\n\n5.1 Text searching\n5.2 Mapping\n6 Early idea: Bottom-up match-merging (aka BUMMer?)\n\n6.1 Some previous ideas\n6.2 Divide & conquer\n6.3 Bottom-up match merging (BUMMer)\n7 TODO Benchmarks of simple methods\nThis is Chapter 5 of my thesis.",
          "link": "https://curiouscoding.nl/posts/mapping/",
          "publishedOn": "2025-03-23T23:00:00.000Z",
          "wordCount": 1849,
          "title": "[WIP] Beyond Global Alignment",
          "imageUrl": null
        },
        {
          "id": "https://curiouscoding.nl/posts/simd-sketch/",
          "author": null,
          "description": "Table of Contents\n1 Jaccard similarity\n2 Hash schemes\n\n2.1 MinHash\n2.2 $s$-mins sketch\n2.3 Bottom-\\(s\\) sketch\n2.4 FracMinHash\n2.5 Bucket sketch\n2.6 Mod-bucket hash (new?)\n2.7 Variants\n3 Compressing sketches\n\n3.1 $b$-bit hashing\n\n3.1.1 Accounting for collisions\n3.2 HyperMinHash\n4 Densification strategies\n5 SimdSketch\n6 Evaluation\n\n6.1 Setup\n\n6.1.1 Tools\n6.1.2 Inputs\n6.1.3 Parameters\n6.1.4 Metrics\n6.2 Raw results\n6.3 Correlation\n6.4 Comparison speed\n6.5 Low-similarity data\n7 Discussion\n8 TODO / Future work\n\\[\n\\newcommand{\\sketch}{\\mathsf{sketch}}\n\\]",
          "link": "https://curiouscoding.nl/posts/simd-sketch/",
          "publishedOn": "2025-03-08T23:00:00.000Z",
          "wordCount": 5607,
          "title": "SimdSketch: a fast bucket sketch",
          "imageUrl": null
        },
        {
          "id": "https://curiouscoding.nl/posts/tigs/",
          "author": null,
          "description": "1 De Bruijn graph\n \n \n Link to heading\n \n\nConsider an edge-centric De Bruijn graph, where each edge corresponds to a\nk-mer, and nodes are the \\(k-1\\) overlaps between adjacent k-mers. In the figures,\nall edges are directed towards the right.\n\n\n\n\n 2 k-mers\n \n \n Link to heading\n \n\nThe goal is now to store all edges / k-mers of the graph efficiently.\nA spectrum preserving string set (SPSS) is a set of strings whose k-mers are\nthe k-mers of the input graph, that does not contain duplicate k-mers (Rahman and Medvedev 2020).",
          "link": "https://curiouscoding.nl/posts/tigs/",
          "publishedOn": "2025-03-08T23:00:00.000Z",
          "wordCount": 426,
          "title": "Types of tigs",
          "imageUrl": null
        }
      ]
    }
  ],
  "cliVersion": "1.15.1"
}