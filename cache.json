{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2023/12/17/",
          "author": null,
          "description": "This article was discussed on Hacker News and on reddit.\nUsers of mature C libraries conventionally get to choose how memory is\nallocated — that is, when it cannot be avoided entirely. The C\nstandard never laid down a convention — perhaps for the better —\nso each library re-invents an allocator interface. Not all are created\nequal, and most repeat a few fundamental mistakes. Often the interface is\nmerely a token effort, to check off that it’s “supported” without actual\nconsideration to its use. This article describes the critical features of\na practical allocator interface, and demonstrates why they’re important.\nBefore diving into the details, here’s the checklist for library authors:\nAll allocation functions accept a user-defined context pointer.\nThe “free” function accepts the original …",
          "link": "https://nullprogram.com/blog/2023/12/17/",
          "publishedOn": "2023-12-17T17:52:26.000Z",
          "wordCount": 1999,
          "title": "So you want custom allocator support in your C library",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Max Slater",
      "feedUrl": "https://thenumb.at/feed.xml",
      "siteUrl": "https://thenumb.at/",
      "articles": []
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/f326b0589102",
          "author": "Netflix Technology Blog",
          "description": "Holden Karau Elizabeth Stone Pedro Duarte Chris Stephens Pallavi Phadnis Lee Woodridge Mark Cho Guil Pires Sujay Jain Tristan Reid…",
          "link": "https://netflixtechblog.com/our-first-netflix-data-engineering-summit-f326b0589102?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-12-14T16:54:11.000Z",
          "wordCount": 1796,
          "title": "Our First Netflix Data Engineering Summit",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:1111/1*0EF4tpjprbMxn8rF_pKyFQ.png"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": [
        {
          "id": "https://nim-lang.org//blog/2023/12/19/versions-1618-202-released.html",
          "author": null,
          "description": "The Nim team is happy to announce two releases:\nthe latest Nim, version 2.0.2\nLTS release, version 1.6.18\nFor the majority of our users, v2.0.2 contains 63 commits and brings bugfixes and improvements to Nim 2.0.0, released four months ago.\nNOTE: If your program uses threads (--threads:on became the default in the 2.0.x line) please also use the -d:useMalloc switch.\nThis problem will be fixed in 2.0.4, sorry for the inconvenience.\nFor those users who haven’t switched to Nim v2.0 yet, we have released the ninth patch release for Nim 1.6.x.\nIt is a small release with 13 commits.\nNim Community Survey 2023\nBefore going into details of the release, we would like to remind you that 2023 Nim Community Survey is still open, and we would appreciate your input if you haven’t done it already.\nInstall…",
          "link": "https://nim-lang.org//blog/2023/12/19/versions-1618-202-released.html",
          "publishedOn": "2023-12-19T00:00:00.000Z",
          "wordCount": 631,
          "title": "Versions 2.0.2 and 1.6.18 released",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        }
      ]
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2024/01/03/of-rats-and-ratchets.html",
          "author": null,
          "description": "This is going to be related to software engineering, pinky promise!",
          "link": "https://matklad.github.io/2024/01/03/of-rats-and-ratchets.html",
          "publishedOn": "2024-01-03T00:00:00.000Z",
          "wordCount": 1021,
          "title": "Of Rats and Ratchets",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/12/31/git-things.html",
          "author": null,
          "description": "A grab bag of less frequently talked about git adjacent points.",
          "link": "https://matklad.github.io/2023/12/31/git-things.html",
          "publishedOn": "2023-12-31T00:00:00.000Z",
          "wordCount": 1660,
          "title": "Git Things",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/12/31/O(1)-build-file.html",
          "author": null,
          "description": "Rule of thumb: the size of build or CI configuration should be mostly independent of the project size.\nIn other words, adding, say, a new test should not require adding a new line to the build file to build the test, and a new line to .yml to run it on CI.",
          "link": "https://matklad.github.io/2023/12/31/O(1)-build-file.html",
          "publishedOn": "2023-12-31T00:00:00.000Z",
          "wordCount": 762,
          "title": "O(1) Build File",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/12/24/ci-dream.html",
          "author": null,
          "description": "This is more of an android dream (that one with a unicorn) than a coherent post, but please indulge me.\nIt's a short one at least!",
          "link": "https://matklad.github.io/2023/12/24/ci-dream.html",
          "publishedOn": "2023-12-24T00:00:00.000Z",
          "wordCount": 631,
          "title": "CI Dream",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/12/21/retry-loop.html",
          "author": null,
          "description": "A post about writing a retry loop. Not a smart post about avoiding thundering heards and resonance.\nA simpleton kind of post about wrangling ifs and fors together to minimize bugs.",
          "link": "https://matklad.github.io/2023/12/21/retry-loop.html",
          "publishedOn": "2023-12-21T00:00:00.000Z",
          "wordCount": 734,
          "title": "Retry Loop",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/12/10/nsfw.html",
          "author": null,
          "description": "Ever since reading\nWhat If We Pretended That a Task = Thread?\nI can't stop thinking about borrowing non-Sync data across .await.\nIn this post, I'd love to take one more look at the problem.",
          "link": "https://matklad.github.io/2023/12/10/nsfw.html",
          "publishedOn": "2023-12-10T00:00:00.000Z",
          "wordCount": 2454,
          "title": "Non-Send Futures When?",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    },
    {
      "title": "samwho.dev",
      "feedUrl": "https://samwho.dev/rss.xml",
      "siteUrl": "https://samwho.dev/rss.xml",
      "articles": []
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net/feed.atom",
      "articles": [
        {
          "id": "https://notes.abhinavsarkar.net/2023/standalone-haddock",
          "author": null,
          "description": "<p>So here’s a thing I recently wanted to do. I am working on a personal Haskell project, and as the\nproject grew big, I split it up into multiple packages. Something like <code class=\"language-plaintext highlighter-rouge\">project-core</code>, <code class=\"language-plaintext highlighter-rouge\">project-backend</code>,\n<code class=\"language-plaintext highlighter-rouge\">project-frontend</code> and such. After writing some thousands of lines of code, I decided to put the\nproject documentation online. Now, this is not the kind of project that I’d publish as a bunch of\nlibraries on <a href=\"https://hackage.haskell.org/\">Hackage</a>. Nevertheless, I wanted to publish the API docs and hyperlinked source code\nonline as a self-contained website. Well, turns out, this is a really hard to do with Haskell projects.</p>\n\n<p>Haskell has <a href=\"http://www.haskell.org/haddock/\">Haddock</a>, its documentation generation tool. It generates\nthe API docs and sources fine, but not for a self-contained website. You can run <code class=\"language-plaintext highlighter-rouge\">cabal haddock-project</code> in the <code class=\"language-plaintext highlighter-rouge\">--local</code> mode,\nin which all the generated docs will link to other packages’ local docs only. Or you can run it in\nthe <code class=\"language-plaintext highlighter-rouge\">--hackage</code> mode, in which the\ndocs will link to other packages’ docs on Hackage. In either case, all the hyperlinked source code\nlink only to other packages’ local source code. I didn’t want this.</p>\n\n<p>What I wanted was to generate API docs and source code that linked to local ones only for the\npackages in my project, and to the Hackage ones for all my project’s dependency libraries. This just doesn’t\nseem possible with Haddock.</p>\n\n<p>So I did what I had to. I summoned my old self from when I used to work as a Perl<sup id=\"fnref:fn3\" role=\"doc-noteref\"><a href=\"#fn:fn3\" class=\"footnote\" rel=\"footnote\">1</a></sup> programmer\n(my first job decades ago!), and I wrote\nsome regexes<sup id=\"fnref:fn1\" role=\"doc-noteref\"><a href=\"#fn:fn1\" class=\"footnote\" rel=\"footnote\">2</a></sup> and a Bash script<sup id=\"fnref:fn2\" role=\"doc-noteref\"><a href=\"#fn:fn2\" class=\"footnote\" rel=\"footnote\">3</a></sup>. It took some experimentation, but I finally got it working. Here it is\nin its full glory:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#!/usr/bin/env bash</span>\n<span class=\"nb\">set</span> <span class=\"nt\">-euo</span> pipefail\n\n<span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"nv\">$# </span><span class=\"nt\">-ne</span> 2 <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">then\n    </span><span class=\"nb\">echo</span> <span class=\"s2\">\"Usage: </span><span class=\"nv\">$0</span><span class=\"s2\"> &lt;title&gt; &lt;output&gt;\"</span>\n    <span class=\"nb\">exit </span>1\n<span class=\"k\">fi\n\n</span><span class=\"nv\">TITLE</span><span class=\"o\">=</span><span class=\"nv\">$1</span>\n<span class=\"nv\">OUTPUT</span><span class=\"o\">=</span><span class=\"nv\">$2</span>\n\n<span class=\"nv\">OS</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">uname</span> <span class=\"nt\">-s</span><span class=\"si\">)</span>\n\n<span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"s2\">\"</span><span class=\"nv\">$OS</span><span class=\"s2\">\"</span> <span class=\"o\">=</span> <span class=\"s2\">\"Darwin\"</span> <span class=\"o\">]</span>\n<span class=\"k\">then\n    </span><span class=\"nv\">OS</span><span class=\"o\">=</span><span class=\"s2\">\"osx\"</span>\n<span class=\"k\">elif</span> <span class=\"o\">[</span> <span class=\"s2\">\"</span><span class=\"nv\">$OS</span><span class=\"s2\">\"</span> <span class=\"o\">=</span> <span class=\"s2\">\"Linux\"</span> <span class=\"o\">]</span>\n<span class=\"k\">then\n    </span><span class=\"nv\">OS</span><span class=\"o\">=</span><span class=\"s2\">\"linux\"</span>\n<span class=\"k\">else\n    </span><span class=\"nb\">printf</span> <span class=\"s2\">\"OS not supported: %s</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"s2\">\"</span><span class=\"nv\">$OS</span><span class=\"s2\">\"</span> <span class=\"o\">&gt;</span>&amp;2\n    <span class=\"nb\">exit </span>1\n<span class=\"k\">fi\n\n</span><span class=\"nv\">ARCH</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">uname</span> <span class=\"nt\">-m</span><span class=\"si\">)</span>\n<span class=\"nv\">GHC_VERSION</span><span class=\"o\">=</span><span class=\"si\">$(</span>ghc <span class=\"nt\">--version</span> | <span class=\"nb\">awk</span> <span class=\"s1\">'{print $8}'</span><span class=\"si\">)</span>\n<span class=\"nv\">PKG_NAME</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">cat</span> ./<span class=\"k\">*</span>.cabal | <span class=\"nb\">grep </span>name | <span class=\"nb\">head</span> <span class=\"nt\">-1</span> | <span class=\"nb\">awk</span> <span class=\"s1\">'{print $2}'</span><span class=\"si\">)</span>\n<span class=\"nv\">PKG_VERSION</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">cat</span> ./<span class=\"k\">*</span>.cabal | <span class=\"nb\">grep </span>version | <span class=\"nb\">grep</span> <span class=\"nt\">-v</span> cabal | <span class=\"nb\">awk</span> <span class=\"s1\">'{print $2}'</span> | <span class=\"nb\">head</span> <span class=\"nt\">-1</span><span class=\"si\">)</span>\n<span class=\"nv\">BUILD_PATH</span><span class=\"o\">=</span><span class=\"s2\">\"dist-newstyle/build/</span><span class=\"k\">${</span><span class=\"nv\">ARCH</span><span class=\"k\">}</span><span class=\"s2\">-</span><span class=\"k\">${</span><span class=\"nv\">OS</span><span class=\"k\">}</span><span class=\"s2\">/ghc-</span><span class=\"k\">${</span><span class=\"nv\">GHC_VERSION</span><span class=\"k\">}</span><span class=\"s2\">/</span><span class=\"k\">${</span><span class=\"nv\">PKG_NAME</span><span class=\"k\">}</span><span class=\"s2\">-</span><span class=\"k\">${</span><span class=\"nv\">PKG_VERSION</span><span class=\"k\">}</span><span class=\"s2\">\"</span>\n<span class=\"nv\">DOC_PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">BUILD_PATH</span><span class=\"k\">}</span><span class=\"s2\">/l/*/doc/html/</span><span class=\"k\">${</span><span class=\"nv\">PKG_NAME</span><span class=\"k\">}</span><span class=\"s2\">\"</span>\n\n<span class=\"nv\">temp_files</span><span class=\"o\">=()</span>\n\ncleanup<span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"k\">for </span>file <span class=\"k\">in</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">temp_files</span><span class=\"p\">[@]</span><span class=\"k\">}</span><span class=\"s2\">\"</span><span class=\"p\">;</span> <span class=\"k\">do\n        </span><span class=\"nb\">rm</span> <span class=\"s2\">\"</span><span class=\"nv\">$file</span><span class=\"s2\">\"</span>\n  <span class=\"k\">done</span>\n<span class=\"o\">}</span>\n<span class=\"nb\">trap </span>cleanup EXIT INT TERM\n\nbold_print<span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"nb\">echo</span> <span class=\"nt\">-e</span> <span class=\"s2\">\"</span><span class=\"se\">\\0</span><span class=\"s2\">33[1m</span><span class=\"nv\">$1</span><span class=\"se\">\\0</span><span class=\"s2\">33[0m\"</span>\n<span class=\"o\">}</span>\n\n<span class=\"c\"># build project</span>\nbold_print <span class=\"s2\">\"Building project\"</span>\ncabal build <span class=\"nt\">--enable-documentation</span>\n\n<span class=\"c\"># generate docs</span>\nbold_print <span class=\"s2\">\"Generating docs\"</span>\n<span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">OUTPUT</span><span class=\"k\">}</span><span class=\"s2\">\"</span>\ncabal haddock <span class=\"nt\">--haddock-html</span> <span class=\"se\">\\</span>\n    <span class=\"nt\">--haddock-quickjump</span> <span class=\"se\">\\</span>\n    <span class=\"nt\">--haddock-hyperlink-source</span> <span class=\"se\">\\</span>\n    <span class=\"nt\">--haddock-option</span><span class=\"o\">=</span><span class=\"s2\">\"--use-index=../doc-index.html\"</span> <span class=\"se\">\\</span>\n    <span class=\"nt\">--haddock-option</span><span class=\"o\">=</span><span class=\"s2\">\"--use-contents=../index.html\"</span> <span class=\"se\">\\</span>\n    <span class=\"nt\">--haddock-option</span><span class=\"o\">=</span><span class=\"s2\">\"--base-url=..\"</span> <span class=\"se\">\\</span>\n    all\n<span class=\"nb\">cp</span> <span class=\"nt\">-f</span> <span class=\"nt\">-r</span> <span class=\"k\">${</span><span class=\"nv\">DOC_PATH</span><span class=\"k\">}</span>/ <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">OUTPUT</span><span class=\"k\">}</span><span class=\"s2\">\"</span>\n\n<span class=\"c\"># generate index</span>\nbold_print <span class=\"s2\">\"Generating index\"</span>\n\n<span class=\"nv\">CMD_FILE1</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">mktemp</span><span class=\"si\">)</span>\ntemp_files+<span class=\"o\">=(</span><span class=\"s2\">\"</span><span class=\"nv\">$CMD_FILE1</span><span class=\"s2\">\"</span><span class=\"o\">)</span>\n\n<span class=\"nb\">echo</span> <span class=\"s2\">\"set -euo pipefail\"</span> <span class=\"o\">&gt;</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">CMD_FILE1</span><span class=\"k\">}</span><span class=\"s2\">\"</span>\n<span class=\"nb\">echo</span> <span class=\"nt\">-n</span> <span class=\"s2\">\"haddock -t </span><span class=\"se\">\\\"</span><span class=\"k\">${</span><span class=\"nv\">TITLE</span><span class=\"k\">}</span><span class=\"se\">\\\"</span><span class=\"s2\"> -o </span><span class=\"se\">\\\"</span><span class=\"k\">${</span><span class=\"nv\">OUTPUT</span><span class=\"k\">}</span><span class=\"se\">\\\"</span><span class=\"s2\"> --quickjump --gen-index --gen-contents \"</span> <span class=\"o\">&gt;&gt;</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">CMD_FILE1</span><span class=\"k\">}</span><span class=\"s2\">\"</span>\nfind <span class=\"k\">${</span><span class=\"nv\">DOC_PATH</span><span class=\"k\">}</span>/<span class=\"k\">${</span><span class=\"nv\">PKG_NAME</span><span class=\"k\">}</span>.haddock <span class=\"nt\">-print0</span> | xargs <span class=\"nt\">-0</span> <span class=\"nt\">-I</span> <span class=\"o\">{}</span> <span class=\"nb\">echo</span> <span class=\"nt\">-n</span> <span class=\"s2\">\"--read-interface=</span><span class=\"k\">${</span><span class=\"nv\">PKG_NAME</span><span class=\"k\">}</span><span class=\"s2\">,{} \"</span> <span class=\"o\">&gt;&gt;</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">CMD_FILE1</span><span class=\"k\">}</span><span class=\"s2\">\"</span>\nbash <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">CMD_FILE1</span><span class=\"k\">}</span><span class=\"s2\">\"</span>\n\n<span class=\"c\"># fix links in hyperlinked source and docs</span>\n<span class=\"nv\">GEN_SRC_PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">OUTPUT</span><span class=\"k\">}</span><span class=\"s2\">/</span><span class=\"k\">${</span><span class=\"nv\">PKG_NAME</span><span class=\"k\">}</span><span class=\"s2\">/src/*.html\"</span>\n<span class=\"nv\">GEN_DOC_PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">OUTPUT</span><span class=\"k\">}</span><span class=\"s2\">/</span><span class=\"k\">${</span><span class=\"nv\">PKG_NAME</span><span class=\"k\">}</span><span class=\"s2\">/*.html\"</span>\n\nbold_print <span class=\"s2\">\"Fixing links to project subpackages\"</span>\n<span class=\"c\"># fix links to source files for project subpackages</span>\nperl <span class=\"nt\">-i</span> <span class=\"nt\">-pe</span> <span class=\"s2\">\"s|file:[^</span><span class=\"se\">\\\"</span><span class=\"s2\">]*?/</span><span class=\"k\">${</span><span class=\"nv\">BUILD_PATH</span><span class=\"k\">}</span><span class=\"s2\">/l/.*?/doc/html/</span><span class=\"k\">${</span><span class=\"nv\">PKG_NAME</span><span class=\"k\">}</span><span class=\"s2\">/src/||g\"</span> <span class=\"k\">${</span><span class=\"nv\">GEN_SRC_PATH</span><span class=\"k\">}</span>\n<span class=\"c\"># fix links to doc files for project subpackages</span>\nperl <span class=\"nt\">-i</span> <span class=\"nt\">-pe</span> <span class=\"s2\">\"s|href=</span><span class=\"se\">\\\"</span><span class=\"s2\">../</span><span class=\"k\">${</span><span class=\"nv\">PKG_NAME</span><span class=\"k\">}</span><span class=\"s2\">/|href=</span><span class=\"se\">\\\"</span><span class=\"s2\">|g\"</span> <span class=\"k\">${</span><span class=\"nv\">GEN_DOC_PATH</span><span class=\"k\">}</span>\n\nbold_print <span class=\"s2\">\"Fixing links to project dependencies\"</span>\n<span class=\"c\"># fix links to doc files for project dependency libraries</span>\nperl <span class=\"nt\">-i</span> <span class=\"nt\">-pe</span> <span class=\"s2\">\"s|href=</span><span class=\"se\">\\\"</span><span class=\"s2\">../([^</span><span class=\"se\">\\\"</span><span class=\"s2\">]+)/([^</span><span class=\"se\">\\\"</span><span class=\"s2\">]+)|href=</span><span class=\"se\">\\\"</span><span class=\"s2\">https://hackage.haskell.org/package/</span><span class=\"se\">\\$</span><span class=\"s2\">1/docs/</span><span class=\"se\">\\$</span><span class=\"s2\">2|g\"</span> <span class=\"k\">${</span><span class=\"nv\">GEN_DOC_PATH</span><span class=\"k\">}</span>\n\nbold_print <span class=\"s2\">\"Fixing links to libraries in Nix store\"</span>\n<span class=\"c\"># fix links to source files for GHC libraries stored in the Nix store</span>\nperl <span class=\"nt\">-i</span> <span class=\"nt\">-pe</span> <span class=\"s2\">\"s|file:///nix/store/[</span><span class=\"se\">\\d\\w</span><span class=\"s2\">]*-ghc-</span><span class=\"k\">${</span><span class=\"nv\">GHC_VERSION</span><span class=\"k\">}</span><span class=\"s2\">-doc/share/doc/ghc/html/libraries/([^</span><span class=\"se\">\\\"</span><span class=\"s2\">]*)/src/([^</span><span class=\"se\">\\\"</span><span class=\"s2\">]*)|https://hackage.haskell.org/package/</span><span class=\"se\">\\$</span><span class=\"s2\">1/docs/src/</span><span class=\"se\">\\$</span><span class=\"s2\">2|g\"</span> <span class=\"k\">${</span><span class=\"nv\">GEN_SRC_PATH</span><span class=\"k\">}</span>\n<span class=\"c\"># fix links to doc files for GHC libraries stored in the Nix store</span>\nperl <span class=\"nt\">-i</span> <span class=\"nt\">-pe</span> <span class=\"s2\">\"s|file:///nix/store/[</span><span class=\"se\">\\d\\w</span><span class=\"s2\">]*-ghc-</span><span class=\"k\">${</span><span class=\"nv\">GHC_VERSION</span><span class=\"k\">}</span><span class=\"s2\">-doc/share/doc/ghc/html/libraries/([^</span><span class=\"se\">\\\"</span><span class=\"s2\">]*)/src|https://hackage.haskell.org/package/</span><span class=\"se\">\\$</span><span class=\"s2\">1/docs/src/|g\"</span> <span class=\"k\">${</span><span class=\"nv\">GEN_DOC_PATH</span><span class=\"k\">}</span>\n\n<span class=\"c\"># fix links to source files for Hackage libraries stored in the Nix store</span>\nperl <span class=\"nt\">-i</span> <span class=\"nt\">-pe</span> <span class=\"s2\">\"s|file:///nix/store/[^</span><span class=\"se\">\\\"</span><span class=\"s2\">]+-doc/share/doc/([^</span><span class=\"se\">\\\"</span><span class=\"s2\">]+)/html/src/([^</span><span class=\"se\">\\\"</span><span class=\"s2\">]+)|https://hackage.haskell.org/package/</span><span class=\"se\">\\$</span><span class=\"s2\">1/docs/src/</span><span class=\"se\">\\$</span><span class=\"s2\">2|g\"</span> <span class=\"k\">${</span><span class=\"nv\">GEN_SRC_PATH</span><span class=\"k\">}</span>\n<span class=\"c\"># fix links to doc files for Hackage libraries stored in the Nix store</span>\nperl <span class=\"nt\">-i</span> <span class=\"nt\">-pe</span> <span class=\"s2\">\"s|file:///nix/store/[^</span><span class=\"se\">\\\"</span><span class=\"s2\">]+-doc/share/doc/([^</span><span class=\"se\">\\\"</span><span class=\"s2\">]+)/html/src|https://hackage.haskell.org/package/</span><span class=\"se\">\\$</span><span class=\"s2\">1/docs/src|g\"</span> <span class=\"k\">${</span><span class=\"nv\">GEN_DOC_PATH</span><span class=\"k\">}</span>\n\n<span class=\"c\"># generate Cabal package short ID to package name mapping</span>\nbold_print <span class=\"s2\">\"Generating Cabal package short ID to package name mapping\"</span>\n<span class=\"nv\">SHORT_IDS_FILE</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">mktemp</span><span class=\"si\">)</span>\ntemp_files+<span class=\"o\">=(</span><span class=\"s2\">\"</span><span class=\"nv\">$SHORT_IDS_FILE</span><span class=\"s2\">\"</span><span class=\"o\">)</span>\n\n<span class=\"nb\">grep</span> <span class=\"nt\">-h</span> <span class=\"nt\">-o</span> <span class=\"nt\">-P</span> <span class=\"s2\">\"href=</span><span class=\"se\">\\\"</span><span class=\"s2\">file://[^</span><span class=\"se\">\\\"</span><span class=\"s2\">]+/</span><span class=\"se\">\\.</span><span class=\"s2\">cabal/store/ghc-</span><span class=\"k\">${</span><span class=\"nv\">GHC_VERSION</span><span class=\"k\">}</span><span class=\"s2\">/.+?/\"</span> <span class=\"k\">${</span><span class=\"nv\">GEN_SRC_PATH</span><span class=\"k\">}</span> <span class=\"k\">${</span><span class=\"nv\">GEN_DOC_PATH</span><span class=\"k\">}</span> | <span class=\"se\">\\</span>\n  <span class=\"nb\">sort</span> <span class=\"nt\">-u</span> | <span class=\"nb\">grep</span> <span class=\"nt\">-h</span> <span class=\"nt\">-o</span> <span class=\"nt\">-P</span> <span class=\"s2\">\"</span><span class=\"se\">\\.</span><span class=\"s2\">cabal/store/ghc-</span><span class=\"k\">${</span><span class=\"nv\">GHC_VERSION</span><span class=\"k\">}</span><span class=\"s2\">/.+?/\"</span> | <span class=\"nb\">cut</span> <span class=\"nt\">-d</span> <span class=\"s1\">'/'</span> <span class=\"nt\">-f</span> 4 <span class=\"o\">&gt;</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">SHORT_IDS_FILE</span><span class=\"k\">}</span><span class=\"s2\">\"</span>\n\n<span class=\"nv\">PKG_NAMES_FILE</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">mktemp</span><span class=\"si\">)</span>\ntemp_files+<span class=\"o\">=(</span><span class=\"s2\">\"</span><span class=\"nv\">$PKG_NAMES_FILE</span><span class=\"s2\">\"</span><span class=\"o\">)</span>\n\n<span class=\"nb\">grep</span> <span class=\"nt\">-h</span> <span class=\"nt\">-o</span> <span class=\"nt\">-P</span> <span class=\"s2\">\"href=</span><span class=\"se\">\\\"</span><span class=\"s2\">file://[^</span><span class=\"se\">\\\"</span><span class=\"s2\">]+/</span><span class=\"se\">\\.</span><span class=\"s2\">cabal/store/ghc-</span><span class=\"k\">${</span><span class=\"nv\">GHC_VERSION</span><span class=\"k\">}</span><span class=\"s2\">/.+?/\"</span> <span class=\"k\">${</span><span class=\"nv\">GEN_SRC_PATH</span><span class=\"k\">}</span> <span class=\"k\">${</span><span class=\"nv\">GEN_DOC_PATH</span><span class=\"k\">}</span> | <span class=\"nb\">sort</span> <span class=\"nt\">-u</span> | <span class=\"se\">\\</span>\n  <span class=\"nb\">cut</span> <span class=\"nt\">-c</span> 14- | xargs <span class=\"nt\">-I</span> <span class=\"o\">{}</span> <span class=\"nb\">cat</span> <span class=\"o\">{}</span>cabal-hash.txt | <span class=\"nb\">grep</span> <span class=\"s2\">\"pkgid:\"</span> | <span class=\"nb\">cut</span> <span class=\"nt\">-d</span> <span class=\"s1\">' '</span> <span class=\"nt\">-f</span> 2 <span class=\"o\">&gt;</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">PKG_NAMES_FILE</span><span class=\"k\">}</span><span class=\"s2\">\"</span>\n\n<span class=\"nv\">CMD_FILE2</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">mktemp</span><span class=\"si\">)</span>\ntemp_files+<span class=\"o\">=(</span><span class=\"s2\">\"</span><span class=\"nv\">$CMD_FILE2</span><span class=\"s2\">\"</span><span class=\"o\">)</span>\n\n<span class=\"nb\">echo</span> <span class=\"s2\">\"set -euo pipefail\"</span> <span class=\"o\">&gt;</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">CMD_FILE2</span><span class=\"k\">}</span><span class=\"s2\">\"</span>\n<span class=\"nb\">paste</span> <span class=\"nt\">-d</span> <span class=\"s2\">\" \"</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">SHORT_IDS_FILE</span><span class=\"k\">}</span><span class=\"s2\">\"</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">PKG_NAMES_FILE</span><span class=\"k\">}</span><span class=\"s2\">\"</span> | <span class=\"nb\">awk</span> <span class=\"s2\">\"{print </span><span class=\"se\">\\\"</span><span class=\"s2\">perl -i -pe </span><span class=\"se\">\\\\\\\"</span><span class=\"s2\">s|</span><span class=\"se\">\\\"\\$</span><span class=\"s2\">1</span><span class=\"se\">\\\"</span><span class=\"s2\">|</span><span class=\"se\">\\\"\\$</span><span class=\"s2\">2</span><span class=\"se\">\\\"</span><span class=\"s2\">|g</span><span class=\"se\">\\\\\\\"</span><span class=\"s2\"> </span><span class=\"k\">${</span><span class=\"nv\">GEN_SRC_PATH</span><span class=\"k\">}</span><span class=\"s2\"> </span><span class=\"k\">${</span><span class=\"nv\">GEN_DOC_PATH</span><span class=\"k\">}</span><span class=\"se\">\\\"</span><span class=\"s2\">}\"</span> <span class=\"o\">&gt;&gt;</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">CMD_FILE2</span><span class=\"k\">}</span><span class=\"s2\">\"</span>\nbash <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">CMD_FILE2</span><span class=\"k\">}</span><span class=\"s2\">\"</span>\n\n<span class=\"c\"># fix links to doc and source files of libraries stored in the Cabal store</span>\nbold_print <span class=\"s2\">\"Fixing links to libraries in Cabal store\"</span>\nperl <span class=\"nt\">-i</span> <span class=\"nt\">-pe</span> <span class=\"s2\">\"s|href=</span><span class=\"se\">\\\"</span><span class=\"s2\">file://[^</span><span class=\"se\">\\\"</span><span class=\"s2\">]+/</span><span class=\"se\">\\.</span><span class=\"s2\">cabal/store/ghc-</span><span class=\"k\">${</span><span class=\"nv\">GHC_VERSION</span><span class=\"k\">}</span><span class=\"s2\">/(.+?)/share/doc/html/([^</span><span class=\"se\">\\\"</span><span class=\"s2\">]+)|href=</span><span class=\"se\">\\\"</span><span class=\"s2\">https://hackage.haskell.org/package/</span><span class=\"se\">\\$</span><span class=\"s2\">1/docs/src/</span><span class=\"se\">\\$</span><span class=\"s2\">2|g\"</span> <span class=\"k\">${</span><span class=\"nv\">GEN_DOC_PATH</span><span class=\"k\">}</span>\nperl <span class=\"nt\">-i</span> <span class=\"nt\">-pe</span> <span class=\"s2\">\"s|href=</span><span class=\"se\">\\\"</span><span class=\"s2\">file://[^</span><span class=\"se\">\\\"</span><span class=\"s2\">]+/</span><span class=\"se\">\\.</span><span class=\"s2\">cabal/store/ghc-</span><span class=\"k\">${</span><span class=\"nv\">GHC_VERSION</span><span class=\"k\">}</span><span class=\"s2\">/(.+?)/share/doc/html/src|href=</span><span class=\"se\">\\\"</span><span class=\"s2\">https://hackage.haskell.org/package/</span><span class=\"se\">\\$</span><span class=\"s2\">1/docs/src/|g\"</span> <span class=\"k\">${</span><span class=\"nv\">GEN_SRC_PATH</span><span class=\"k\">}</span>\n\n<span class=\"nb\">rm</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">OUTPUT</span><span class=\"k\">}</span><span class=\"s2\">/</span><span class=\"k\">${</span><span class=\"nv\">PKG_NAME</span><span class=\"k\">}</span><span class=\"s2\">/</span><span class=\"k\">${</span><span class=\"nv\">PKG_NAME</span><span class=\"k\">}</span><span class=\"s2\">.haddock\"</span>\nbold_print <span class=\"s2\">\"Done\"</span>\n</code></pre></div></div>\n\n<p>You can invoke this script in your project’s root directory like so:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>bash standalone-haddock.sh \"My wonderful project\" docs\n</code></pre></div></div>\n\n<p>It will generate correctly linked and self-contained docs in the <code class=\"language-plaintext highlighter-rouge\">docs</code> directory. Now you\ncan publish this directory on Github pages, or wherever you want.</p>\n\n<p>I hope this script is useful to you. If you know better ways of accomplishing this task, please\nlet me know.</p>\n\n<p>You can like, share or comment on this post on <a href=\"https://fantastic.earth/@abnv/111675766745919140\" class=\"mastodon-link\">Mastodon</a>.</p>\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:fn3\" role=\"doc-endnote\">\n      <p><a href=\"https://www.xkcd.com/224\">Ahmm</a>. <a href=\"#fnref:fn3\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:fn1\" role=\"doc-endnote\">\n      <p>Thankfully, generated HTML files are uniform enough for regex substitutions. <a href=\"#fnref:fn1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:fn2\" role=\"doc-endnote\">\n      <p><a href=\"https://www.shellcheck.net/\">Shellcheck</a> is an absolute life saver when writing Bash scripts. <a href=\"#fnref:fn2\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>",
          "link": "https://notes.abhinavsarkar.net/2023/standalone-haddock",
          "publishedOn": "2023-12-31T00:00:00.000Z",
          "wordCount": 1184,
          "title": "Generating Standalone Haddock Docs for a Multi-package Haskell Project",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Daniel Lemire's blog",
      "feedUrl": "https://lemire.me/blog/feed/",
      "siteUrl": "https://lemire.me/blog",
      "articles": [
        {
          "id": "https://lemire.me/blog/?p=21051",
          "author": "Daniel Lemire",
          "description": "Parenting does not appear to be able to determine the personality traits of a child. When the last ice age ended, 12,000 years ago, the Sahara was green and full of life. It turned into a desert about 5,500 years ago. Fadnes et al. claim that the UK population could live 10 years older if … Continue reading Science and Technology links (December 30th 2023)",
          "link": "https://lemire.me/blog/2023/12/30/science-and-technology-links-december-30th-2023/",
          "publishedOn": "2023-12-30T20:18:07.000Z",
          "wordCount": 4100,
          "title": "Science and Technology links (December 30th 2023)",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=21030",
          "author": "Daniel Lemire",
          "description": "Our computers do not read or write memory in units of bits or even bytes. Rather memory is accessed in small blocks of memory called “cache lines”. For a given system, the cache line size is usually fixed and small (e.g.,  16 to 256 bytes). All Intel/AMD x64 systems I have used relied on a … Continue reading Measuring the size of the cache line empirically",
          "link": "https://lemire.me/blog/2023/12/12/measuring-the-size-of-the-cache-line-empirically/",
          "publishedOn": "2023-12-12T18:17:36.000Z",
          "wordCount": 3692,
          "title": "Measuring the size of the cache line empirically",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        }
      ]
    },
    {
      "title": "devever.net/~hl",
      "feedUrl": "https://www.devever.net/~hl/index.feed",
      "siteUrl": "https://www.devever.net/~hl/",
      "articles": [
        {
          "id": "https://www.devever.net/~hl/u/202312#13a",
          "author": null,
          "description": "<div type=\"xhtml\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><ul><li><a href=\"https://libreboot.org/news/10.html\">Libreboot 10-year anniversary</a></li></ul><p xmlns=\"http://www.w3.org/1999/xhtml\">Leah Rowe has written an interesting article about the history of the Libreboot project on the project's 10th anniversary. Recommended reading if you're interested in the open source firmware ecosystem.</p></div></div>",
          "link": "https://www.devever.net/~hl/u/202312#13a",
          "publishedOn": "2023-12-13T08:11:05.000Z",
          "wordCount": 55,
          "title": "[Hμblog] Libreboot 10-year anniversary",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "apenwarr",
      "feedUrl": "https://apenwarr.ca/log/rss.php",
      "siteUrl": "https://apenwarr.ca/log/",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}