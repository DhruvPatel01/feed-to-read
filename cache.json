{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2023/08/27/",
          "author": null,
          "description": "For the typical DLL function call you declare the function prototype (via\nheader file), you inform the link editor (ld, link) that the DLL\nexports a symbol with that name (import library), it matches the declared\nname with this export, and it becomes an import in your program’s import\ntable. What happens when two different DLLs export the same symbol? The\nlink editor will pick the first found. But what if you want to use both\nexports? If they have the same name, how could program or link editor\ndistinguish them? In this article I’ll demonstrate a technique to resolve\nthis by creating a program which links with and directly uses two\ndifferent C runtimes (CRTs) simultaneously.\nIn PE executable images, an import isn’t just a symbol, but a tuple\nof DLL name and symbol. For human display, a tup…",
          "link": "https://nullprogram.com/blog/2023/08/27/",
          "publishedOn": "2023-08-27T01:46:31.000Z",
          "wordCount": 1103,
          "title": "How to link identical function names from different DLLs",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Max Slater",
      "feedUrl": "https://thenumb.at/feed.xml",
      "siteUrl": "https://thenumb.at/",
      "articles": []
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/ac6483b52a51",
          "author": "Netflix Technology Blog",
          "description": "Netflix’s service mesh adoption: history, motivations, and how we worked with the Envoy community on a feature to streamline mesh adoption",
          "link": "https://netflixtechblog.com/zero-configuration-service-mesh-with-on-demand-cluster-discovery-ac6483b52a51?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-08-29T23:08:45.000Z",
          "wordCount": 5720,
          "title": "Zero Configuration Service Mesh with On-Demand Cluster Discovery",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:1000/0*xr1EBhghfcC8j4Uj"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": [
        {
          "id": "https://nim-lang.org//blog/2023/09/19/mastering-nim.html",
          "author": null,
          "description": "Discover the secret of Nim!\nThe definite guide on Nim!\nWritten by the inventor himself.\nNow with updated content for version 2.0 which solves the biggest pain point of Nim 1.0, shared memory in a multi-threaded setting.\nPlease have a look at its cover image:\nBut Nim’s logo is a crown!\nWhere is the crown?\nThat’s the secret of Nim!\nSend us your reply to support@nim-lang.org until December 6th 2023.\nAmong the correct answers we will select 3 winners by randomization.\nThe winners will receive a signed hardcover!\n“Mastering Nim” is available here:\namazon.com\namazon.de",
          "link": "https://nim-lang.org//blog/2023/09/19/mastering-nim.html",
          "publishedOn": "2023-09-19T00:00:00.000Z",
          "wordCount": 241,
          "title": "Mastering Nim, 2nd edition",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        },
        {
          "id": "https://nim-lang.org//blog/2023/09/01/this-month-with-nim.html",
          "author": null,
          "description": "HappyX\nAuthor: ethosa\nHappyX is a macro-oriented full-stack web framework that combines frontend and backend features.\nWith HappyX you can write single page applications (SPA),\nstatic site generation (SSG),\nand server side rendering (SSR) web applications.\nIt provides the same syntax for all of these solutions:\nimport happyx\n\nserve(\"127.0.0.1\", 5000):\n  \"/\":\n    \"Hello, world!\"\n\nor:\nimport happyx\n\nappRoutes(\"app\"):\n  \"/\":\n    \"Hello, world!\"\n\nIncluded is a command line interface hpx.\nThis enables easy creation of projects for Nim and Python.\nA non exhaustive list of features is as follows:\nMultiple server options (built-in asynchttpserver, microasynchttpserver, httpbeast and httpx)\nHot code reloading (now only for SPA)\nDebug logging with -d:debug\nPowerful routing that includes path params …",
          "link": "https://nim-lang.org//blog/2023/09/01/this-month-with-nim.html",
          "publishedOn": "2023-09-01T00:00:00.000Z",
          "wordCount": 771,
          "title": "This Month with Nim: July and August 2023",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        }
      ]
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2023/09/13/comparative-analysis.html",
          "author": null,
          "description": "Most languages provide 6 comparison operators:",
          "link": "https://matklad.github.io/2023/09/13/comparative-analysis.html",
          "publishedOn": "2023-09-13T00:00:00.000Z",
          "wordCount": 594,
          "title": "Comparative Analysis",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    },
    {
      "title": "samwho.dev",
      "feedUrl": "https://samwho.dev/rss.xml",
      "siteUrl": "https://samwho.dev/rss.xml",
      "articles": []
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net/feed.atom",
      "articles": []
    },
    {
      "title": "Daniel Lemire's blog",
      "feedUrl": "https://lemire.me/blog/feed/",
      "siteUrl": "https://lemire.me/blog",
      "articles": [
        {
          "id": "https://lemire.me/blog/?p=20836",
          "author": "Daniel Lemire",
          "description": "If I give a programmer a string such as \"9223372036854775808\" and I ask them to convert it to an integer, they might do the following in C++: std::string s = .... uint64_t val; auto [ptr, ec] = std::from_chars(s.data(), s.data() + s.size(), val); if (ec != std::errc()) {} // I have an error ! // val … Continue reading Parsing integers quickly with AVX-512",
          "link": "https://lemire.me/blog/2023/09/22/parsing-integers-quickly-with-avx-512/",
          "publishedOn": "2023-09-22T21:50:14.000Z",
          "wordCount": 3569,
          "title": "Parsing integers quickly with AVX-512",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20820",
          "author": "Daniel Lemire",
          "description": "In software, we store strings of text as arrays of bytes in memory using one of the Unicode Transformation Formats (UTF), the most popular being UTF-8 and UTF-16. Windows, Java, C# and other systems common languages and systems default on UTF-16, whereas other systems and most of the web relies on UTF-8. There are benefits … Continue reading Transcoding Unicode strings at crazy speeds with AVX-512",
          "link": "https://lemire.me/blog/2023/09/13/transcoding-unicode-strings-at-crazy-speeds-with-avx-512/",
          "publishedOn": "2023-09-13T16:00:30.000Z",
          "wordCount": 3809,
          "title": "Transcoding Unicode strings at crazy speeds with AVX-512",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20798",
          "author": "Daniel Lemire",
          "description": "A common problem in parsing is that you want to find all identifiers (e.g., variable names, function names) in a document quickly. There are typically some fixed rules. For example, it is common to allow ASCII letters and digits as well as characters like ‘_’ in the identifier, but to forbid some characters at the … Continue reading Locating ‘identifiers’ quickly (ARM NEON edition)",
          "link": "https://lemire.me/blog/2023/09/04/locating-identifiers-quickly-arm-neon-edition/",
          "publishedOn": "2023-09-04T00:46:18.000Z",
          "wordCount": 3690,
          "title": "Locating ‘identifiers’ quickly (ARM NEON edition)",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20790",
          "author": "Daniel Lemire",
          "description": "Physicists have a published a paper with 5154 authors. The list of authors takes 24 pages out of the 33 pages. The lesson is that if someone tell you that they have published an important paper, you should ask how many authors there were and what their exact role was. Vegatarians are at higher risk … Continue reading Science and Technology links (September 2 2023)",
          "link": "https://lemire.me/blog/2023/09/02/science-and-technology-links-september-2-2023/",
          "publishedOn": "2023-09-02T18:30:10.000Z",
          "wordCount": 3719,
          "title": "Science and Technology links (September 2 2023)",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        }
      ]
    },
    {
      "title": "devever.net/~hl",
      "feedUrl": "https://www.devever.net/~hl/index.feed",
      "siteUrl": "https://www.devever.net/~hl/",
      "articles": []
    },
    {
      "title": "apenwarr",
      "feedUrl": "https://apenwarr.ca/log/rss.php",
      "siteUrl": "https://apenwarr.ca/log/",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}