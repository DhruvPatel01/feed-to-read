{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2023/10/08/",
          "author": null,
          "description": "This article was discussed on Hacker News and on reddit.\nThis has been a ground-breaking year for my C skills, and paradigm shifts\nin my technique has provoked me to reconsider my habits and coding style.\nIt’s been my largest personal style change in years, so I’ve decided to\ntake a snapshot of its current state and my reasoning. These changes have\nproduced significant productive and organizational benefits, so while most\nis certainly subjective, it likely includes a few objective improvements.\nI’m not saying everyone should write C this way, and when I contribute\ncode to a project I follow their local style. This is about what works\nwell for me.\nPrimitive types\nStarting with the fundamentals, I’ve been using short names for primitive\ntypes. The resulting clarity was more than I had expect…",
          "link": "https://nullprogram.com/blog/2023/10/08/",
          "publishedOn": "2023-10-08T23:30:57.000Z",
          "wordCount": 2138,
          "title": "My personal C coding style as of late 2023",
          "imageUrl": null
        },
        {
          "id": "https://nullprogram.com/blog/2023/10/05/",
          "author": null,
          "description": "Previously I presented an arena-friendly hash map applicable to any\nprogramming language where one might use arena allocation. In this third\narticle I present a generic, arena-backed dynamic array. The details are\nspecific to C, as the most appropriate mechanism depends on the language\n(e.g. templates, generics). Just as in the previous two articles, the goal\nis to demonstrate an idea so simple that a full implementation fits on one\nterminal pager screen — a concept rather than a library.\nUnlike a hash map or linked list, a dynamic array — a data buffer with a\nsize that varies during run time — is more difficult to square with arena\nallocation. They’re contiguous by definition, and we cannot resize objects\nin the middle of an arena, i.e. realloc. So while convenient, they come\nwith trade-o…",
          "link": "https://nullprogram.com/blog/2023/10/05/",
          "publishedOn": "2023-10-05T23:05:57.000Z",
          "wordCount": 2088,
          "title": "A simple, arena-backed, generic dynamic array for C",
          "imageUrl": null
        },
        {
          "id": "https://nullprogram.com/blog/2023/09/30/",
          "author": null,
          "description": "My last article had tips for for arena allocation. This next\narticle demonstrates a technique for building bespoke hash maps that\ncompose nicely with arena allocation. In addition, they’re fast, simple,\nand automatically scale to any problem that could reasonably be solved\nwith an in-memory hash map. To avoid resizing — both to better support\narenas and to simplify implementation — they have slightly above average\nmemory requirements. The design, which we’re calling a hash-trie, is the\nresult of fruitful collaboration with NRK, whose sibling article\nincludes benchmarks. It’s my new favorite data structure, and has proven\nincredibly useful. With a couple well-placed acquire/release atomics, we\ncan even turn it into a lock-free concurrent hash map.\nI’ve written before about MSI hash tables, …",
          "link": "https://nullprogram.com/blog/2023/09/30/",
          "publishedOn": "2023-09-30T23:18:40.000Z",
          "wordCount": 2274,
          "title": "An easy-to-implement, arena-friendly hash map",
          "imageUrl": null
        },
        {
          "id": "https://nullprogram.com/blog/2023/09/27/",
          "author": null,
          "description": "This article was discussed on Hacker News.\nOver the past year I’ve refined my approach to arena allocation.\nWith practice, it’s effective, simple, and fast; typically as easy to use\nas garbage collection but without the costs. Depending on need, an\nallocator can weigh just 7–25 lines of code — perfect when lacking a\nruntime. With the core details of my own technique settled, now is a\ngood time to document and share lessons learned. This is certainly not the\nonly way to approach arena allocation, but these are practices I’ve worked\nout to simplify programs and reduce mistakes.\nAn arena is a memory buffer and an offset into that buffer, initially\nzero. To allocate an object, grab a pointer at the offset, advance the\noffset by the size of the object, and return the pointer. There’s a little\nm…",
          "link": "https://nullprogram.com/blog/2023/09/27/",
          "publishedOn": "2023-09-27T03:58:59.000Z",
          "wordCount": 2581,
          "title": "Arena allocator tips and tricks",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Max Slater",
      "feedUrl": "https://thenumb.at/feed.xml",
      "siteUrl": "https://thenumb.at/",
      "articles": []
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": []
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": [
        {
          "id": "https://nim-lang.org//blog/2023/10/11/version-1616-released.html",
          "author": null,
          "description": "The Nim team is happy to announce version 1.6.16, our eight patch release for\nNim 1.6.\nVersion 1.6.16 is a result of three months of hard work, and it contains\n84 commits,\nbringing lots of general improvements over 1.6.14.\nThis release is aimed at our users who haven’t switched to Nim v2.0 yet.\nInstalling Nim 1.6\nNew users\nCheck out if the package manager of your OS already ships version 1.6.16 or\ninstall it as described here.\nExisting users\nIf you have installed a previous version of Nim using choosenim,\ngetting Nim 1.6.16 is as easy as:\n$ choosenim 1.6.16\n\nAlternatively, you can download Nim 1.6.16 from\nour nightlies builds.\nDonating to Nim\nWe would like to encourage you to donate to Nim.\nThe donated money will be used to further improve Nim by creating bounties\nfor the most important bu…",
          "link": "https://nim-lang.org//blog/2023/10/11/version-1616-released.html",
          "publishedOn": "2023-10-11T00:00:00.000Z",
          "wordCount": 614,
          "title": "Version 1.6.16 released",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        }
      ]
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2023/10/18/obligations.html",
          "author": null,
          "description": "My thoughts on the topic of whether maintainers owe you anything. Speaking as an author, a maintainer,\na user of, and a contributor to open source software.",
          "link": "https://matklad.github.io/2023/10/18/obligations.html",
          "publishedOn": "2023-10-18T00:00:00.000Z",
          "wordCount": 910,
          "title": "Unless Explicitly Specified Otherwise, Open Source Software With Users Carries Moral Obligations",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/10/12/lsp-could-have-been-better.html",
          "author": null,
          "description": "We talk about programming like it is about writing code, but the code ends up being less important\nthan the architecture, and the architecture ends up being less important than social issues.",
          "link": "https://matklad.github.io/2023/10/12/lsp-could-have-been-better.html",
          "publishedOn": "2023-10-12T00:00:00.000Z",
          "wordCount": 2822,
          "title": "LSP could have been better",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/10/11/unix-structured-concurrency.html",
          "author": null,
          "description": "A short note on a particular structured concurrency pattern for UNIX systems programming.",
          "link": "https://matklad.github.io/2023/10/11/unix-structured-concurrency.html",
          "publishedOn": "2023-10-11T00:00:00.000Z",
          "wordCount": 707,
          "title": "UNIX Structured Concurrency",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/10/06/what-is-an-invariant.html",
          "author": null,
          "description": "I extolled the benefits of programming with invariants in a couple of recent posts.\nNaturally, I didn't explain what I think when I write invariant. This post fixes that.",
          "link": "https://matklad.github.io/2023/10/06/what-is-an-invariant.html",
          "publishedOn": "2023-10-06T00:00:00.000Z",
          "wordCount": 2102,
          "title": "What is an Invariant?",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    },
    {
      "title": "samwho.dev",
      "feedUrl": "https://samwho.dev/rss.xml",
      "siteUrl": "https://samwho.dev/rss.xml",
      "articles": []
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net/feed.atom",
      "articles": []
    },
    {
      "title": "Daniel Lemire's blog",
      "feedUrl": "https://lemire.me/blog/feed/",
      "siteUrl": "https://lemire.me/blog",
      "articles": [
        {
          "id": "https://lemire.me/blog/?p=20899",
          "author": "Daniel Lemire",
          "description": "The C++ library has long been organized around stream classes, at least when it comes to reading and parsing strings. But streams can be surprisingly slow. For example, if you want to parse numbers, then this C++ routine is close to being the worst possible choice for performance: std::stringstream in(mystring); while(in >> x) { sum … Continue reading For processing strings, streams in C++ can be slow",
          "link": "https://lemire.me/blog/2023/10/19/for-processing-strings-streams-in-c-can-be-slow/",
          "publishedOn": "2023-10-19T01:55:34.000Z",
          "wordCount": 4094,
          "title": "For processing strings, streams in C++ can be slow",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20892",
          "author": "Daniel Lemire",
          "description": "In about 10 years, Apple has multiplied by 19 the number of transistors in its mobile processors. It corresponds roughly to a steady rate of improvement of 34% per year on the number of transistors, or a doubling every 2.5 years. In real dollars, an iPhone has roughly a constant price: the price tag of … Continue reading How many billions of transistors in your iPhone processor?",
          "link": "https://lemire.me/blog/2023/10/18/how-many-billions-of-transistors-in-your-iphone-processor/",
          "publishedOn": "2023-10-18T13:51:28.000Z",
          "wordCount": 3251,
          "title": "How many billions of transistors in your iPhone processor?",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20886",
          "author": "Daniel Lemire",
          "description": "Computer software is typically deterministic on paper: if you run twice the same program with the same inputs, you should get the same outputs. In practice, the complexity of modern computing makes it unlikely that you could ever run twice the same program and get exactly the same result, down to the exact same execution … Continue reading Randomness in programming (with Go code)",
          "link": "https://lemire.me/blog/2023/10/17/randomness-in-programming-with-go-code/",
          "publishedOn": "2023-10-17T00:15:32.000Z",
          "wordCount": 13361,
          "title": "Randomness in programming (with Go code)",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20845",
          "author": "Daniel Lemire",
          "description": "The Web is a convenient interface to your software. Many times, if you have an existing application, you may want to allow Web access to it using HTTP. Or you may want to build a small specialized Web application. In such instances, you do not want to use an actual Web server (e.g., Apache or … Continue reading Web server ‘hello world’ benchmark : Go vs Node.js vs Nim vs Bun",
          "link": "https://lemire.me/blog/2023/10/07/web-server-hello-world-benchmark-go-vs-node-js-vs-nim-vs-bun/",
          "publishedOn": "2023-10-07T05:43:25.000Z",
          "wordCount": 5796,
          "title": "Web server ‘hello world’ benchmark : Go vs Node.js vs Nim vs Bun",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20836",
          "author": "Daniel Lemire",
          "description": "If I give a programmer a string such as \"9223372036854775808\" and I ask them to convert it to an integer, they might do the following in C++: std::string s = .... uint64_t val; auto [ptr, ec] = std::from_chars(s.data(), s.data() + s.size(), val); if (ec != std::errc()) {} // I have an error ! // val … Continue reading Parsing integers quickly with AVX-512",
          "link": "https://lemire.me/blog/2023/09/22/parsing-integers-quickly-with-avx-512/",
          "publishedOn": "2023-09-22T21:50:14.000Z",
          "wordCount": 4193,
          "title": "Parsing integers quickly with AVX-512",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        }
      ]
    },
    {
      "title": "devever.net/~hl",
      "feedUrl": "https://www.devever.net/~hl/index.feed",
      "siteUrl": "https://www.devever.net/~hl/",
      "articles": [
        {
          "id": "https://www.devever.net/~hl/xmpp-incident",
          "author": null,
          "description": "<div type=\"xhtml\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p xmlns=\"http://www.w3.org/1999/xhtml\">(If you just want some recommendations for what to do, .)<a href=\"#recommendations\">skip down to the Recommendations section below</a></p></div></div>",
          "link": "https://www.devever.net/~hl/xmpp-incident",
          "publishedOn": "2023-10-20T20:30:00.000Z",
          "wordCount": 3667,
          "title": "[Computing] Mitigating the Hetzner/Linode XMPP.ru MitM interception incident",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "apenwarr",
      "feedUrl": "https://apenwarr.ca/log/rss.php",
      "siteUrl": "https://apenwarr.ca/log/",
      "articles": [
        {
          "id": "https://apenwarr.ca/log/20231006",
          "author": null,
          "description": "A few conversations last week made me realize I use the word “interesting” in an unusual way.\nI rely heavily on mental models. Of course, everyone relies on mental models. But I do it intentionally and I push it extra hard.\nWhat I mean by that is, when I’m making predictions about what will happen next, I mostly don’t look around me and make a judgement based on my immediate surroundings. Instead, I look at what I see, try to match it to something inside my mental model, and then let the mental model extrapolate what “should” happen from there.\nIf this sounds predictably error prone: yes. It is.\nBut it’s also powerful, when used the right way, which I try to do. Here’s my system.\nConfirmation bias\nFirst of all, let’s acknowledge the problem with mental models: confirmation bias. Confirmati…",
          "link": "https://apenwarr.ca/log/20231006",
          "publishedOn": "2023-10-06T20:59:31.000Z",
          "wordCount": 1982,
          "title": "Interesting",
          "imageUrl": null
        }
      ]
    }
  ],
  "cliVersion": "1.15.1"
}