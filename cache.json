{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2023/02/15/",
          "author": null,
          "description": "Seven years ago I wrote about “freestanding” Windows executables.\nAfter an additional seven years of practical experience both writing and\ndistributing such programs, half using a custom-built toolchain,\nit’s time to revisit these cabalistic incantations and otherwise scant\ndetails. I’ve tweaked my older article over the years as I’ve learned, but\nthis is a full replacement and does not assumes you’ve read it. The “why”\nhas been covered and the focus will be on the “how”. Both the GNU\nand MSVC toolchains will be considered.\nI no longer call these “freestanding” programs since that term is, at\nbest, inaccurate. In fact, we will be actively avoiding GCC features\nassociated with that label. Instead I call these CRT-free programs,\nwhere CRT stands for the C runtime the Windows-oriented term fo…",
          "link": "https://nullprogram.com/blog/2023/02/15/",
          "publishedOn": "2023-02-15T02:12:00.000Z",
          "wordCount": 2203,
          "title": "CRT-free in 2023: tips and tricks",
          "imageUrl": null
        },
        {
          "id": "https://nullprogram.com/blog/2023/02/13/",
          "author": null,
          "description": "This article was discussed on reddit.\nWhen not using the C standard library, how does one deal with\nformatted output? Re-implementing the entirety of printf from scratch\nseems like a lot of work, and indeed it would be. Fortunately it’s rarely\nnecessary. With the right mindset, and considering your program’s actual\nformatting needs, it’s not as difficult as it might appear. Since it goes\nhand-in-hand with buffering, I’ll cover both topics at once, including\nsprintf-like capabilities, which is where we’ll start.\nThe print-is-append mindset\nBuffering amortizes the costs of write (and read) system calls. Many small\nwrites are queued via the buffer into a few large writes. This isn’t just\nan implementation detail. It’s key in the mindset to tackle formatted\noutput: Printing is appending.\nThe m…",
          "link": "https://nullprogram.com/blog/2023/02/13/",
          "publishedOn": "2023-02-13T00:00:00.000Z",
          "wordCount": 1773,
          "title": "Let's implement buffered, formatted output",
          "imageUrl": null
        },
        {
          "id": "https://nullprogram.com/blog/2023/02/12/",
          "author": null,
          "description": "This article was discussed on Hacker News.\nYesterday I wrote that setjmp is handy and that it would be nice\nto have without linking the C standard library. It’s conceptually simple,\nafter all. Today let’s explore some differently-portable implementation\npossibilities with distinct trade-offs. At the very least it should\nilluminate why setjmp sometimes requires the use of volatile.\nFirst, a quick review: setjmp and longjmp are a form of non-local\ngoto.\n\ntypedef void *jmp_buf[N];\nint setjmp(jmp_buf);\nvoid longjmp(jmp_buf, int);\n\n\nCalling setjmp saves the execution context in a jmp_buf, and longjmp\nrestores this context, returning the thread to this previous point of\nexecution. This means setjmp returns twice: (1) after saving the\ncontext, and (2) from longjmp. To distinguish these cases, the…",
          "link": "https://nullprogram.com/blog/2023/02/12/",
          "publishedOn": "2023-02-12T02:23:11.000Z",
          "wordCount": 1991,
          "title": "Let's write a setjmp",
          "imageUrl": null
        },
        {
          "id": "https://nullprogram.com/blog/2023/02/11/",
          "author": null,
          "description": "This article was discussed on Hacker News and critiqued on\nWandering Thoughts.\nIn general, when working in C I avoid the standard library, libc, as much\nas possible. If possible I won’t even link it. For people not used to\nworking and thinking this way, the typical response is confusion. Isn’t\nthat like re-inventing the wheel? For me, libc is a wheel barely worth\nusing — too many deficiencies in both interface and implementation.\nFortunately, it’s easy to build a better, simpler wheel when you know the\nterrain ahead of time. In this article I’ll review the functions and\nfunction-like macros of the C standard library and discuss practical\nissues I’ve faced with them.\nFortunately the flexibility of C-in-practice makes up for the standard\nlibrary. I already have all the tools at hand to do wh…",
          "link": "https://nullprogram.com/blog/2023/02/11/",
          "publishedOn": "2023-02-11T03:04:11.000Z",
          "wordCount": 3071,
          "title": "My review of the C standard library in practice",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Max Slater",
      "feedUrl": "https://thenumb.at/feed.xml",
      "siteUrl": "https://thenumbat.github.io/",
      "articles": []
    },
    {
      "title": "Dennis Yurichev's blog",
      "feedUrl": "https://yurichev.com/blog/rss.xml",
      "siteUrl": "https://yurichev.org/",
      "articles": [
        {
          "id": "https://yurichev.org/latency/",
          "author": null,
          "description": "Understanding latency vs. network speed",
          "link": "https://yurichev.org/latency/",
          "publishedOn": "2023-02-17T00:00:00.000Z",
          "wordCount": 567,
          "title": "Understanding latency vs. network speed",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/perl/",
          "author": null,
          "description": "Learning Perl",
          "link": "https://yurichev.org/perl/",
          "publishedOn": "2023-02-14T00:00:00.000Z",
          "wordCount": 233,
          "title": "Learning Perl",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/py_continue/",
          "author": null,
          "description": "[Python][C][C++][For noobs] What is 'continue'",
          "link": "https://yurichev.org/py_continue/",
          "publishedOn": "2023-01-29T00:00:00.000Z",
          "wordCount": 391,
          "title": "[Python][C][C++][For noobs] What is 'continue'",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/py_serial/",
          "author": null,
          "description": "[Python] Simplest possible serialization/marshalling",
          "link": "https://yurichev.org/py_serial/",
          "publishedOn": "2023-01-28T00:00:00.000Z",
          "wordCount": 217,
          "title": "[Python] Simplest possible serialization/marshalling",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/glitch/",
          "author": null,
          "description": "Public transport glitch. Dedicated to all fans of John Conway's Game of Life. Seen in Kiev.",
          "link": "https://yurichev.org/glitch/",
          "publishedOn": "2023-01-27T00:00:00.000Z",
          "wordCount": 181,
          "title": "Public transport glitch. Dedicated to all fans of John Conway's Game of Life. Seen in Kiev.",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/mysql/",
          "author": null,
          "description": "Weak data typing in MySQL",
          "link": "https://yurichev.org/mysql/",
          "publishedOn": "2023-01-26T00:00:00.000Z",
          "wordCount": 249,
          "title": "Weak data typing in MySQL",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/side/",
          "author": null,
          "description": "[Russian][Crypto] Что такое side-channel attack / timing attack",
          "link": "https://yurichev.org/side/",
          "publishedOn": "2023-01-26T00:00:00.000Z",
          "wordCount": 841,
          "title": "[Russian][Crypto] Что такое side-channel attack / timing attack",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/Bleich4/",
          "author": null,
          "description": "[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part IV",
          "link": "https://yurichev.org/Bleich4/",
          "publishedOn": "2023-01-23T00:00:00.000Z",
          "wordCount": 417,
          "title": "[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part IV",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/Bleich3/",
          "author": null,
          "description": "[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part III",
          "link": "https://yurichev.org/Bleich3/",
          "publishedOn": "2023-01-23T00:00:00.000Z",
          "wordCount": 825,
          "title": "[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part III",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/Bleich2/",
          "author": null,
          "description": "[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part II",
          "link": "https://yurichev.org/Bleich2/",
          "publishedOn": "2023-01-23T00:00:00.000Z",
          "wordCount": 1060,
          "title": "[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part II",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/Bleich1/",
          "author": null,
          "description": "[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part I",
          "link": "https://yurichev.org/Bleich1/",
          "publishedOn": "2023-01-23T00:00:00.000Z",
          "wordCount": 1033,
          "title": "[Crypto][Python] D.Bleichenbacher attack on RSA PKCS#1, part I",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/RSA_blind/",
          "author": null,
          "description": "[Crypto] RSA blinding",
          "link": "https://yurichev.org/RSA_blind/",
          "publishedOn": "2023-01-22T00:00:00.000Z",
          "wordCount": 342,
          "title": "[Crypto] RSA blinding",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "fasterthanli.me",
      "feedUrl": "https://fasterthanli.me/index.xml",
      "siteUrl": "https://fasterthanli.me",
      "articles": [
        {
          "id": "https://fasterthanli.me/articles/the-bottom-emoji-breaks-rust-analyzer",
          "author": null,
          "description": "<p>Some bugs are merely fun. Others are simply delicious!</p>\n<p>Today's pick is the latter.</p>\n\n                        <h2>\n                            <a id=\"reproducing-the-issue-part-1\" class=\"anchor\" href=\"#reproducing-the-issue-part-1\">\n                                Reproducing the issue, part 1\n                            </a>\n                        </h2>",
          "link": "https://fasterthanli.me/articles/the-bottom-emoji-breaks-rust-analyzer",
          "publishedOn": "2023-02-13T14:20:00.000Z",
          "wordCount": 9984,
          "title": "The bottom emoji breaks rust-analyzer",
          "imageUrl": "https://fasterthanli.me/img/logo-square-2.png"
        }
      ]
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/f19b400243",
          "author": "Netflix Technology Blog",
          "description": "We tackle some of the unique challenges of scaling multimodal machine learning models that operate on media assets (video, audio, and…",
          "link": "https://netflixtechblog.com/scaling-media-machine-learning-at-netflix-f19b400243?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-02-13T17:59:51.000Z",
          "wordCount": 5471,
          "title": "Scaling Media Machine Learning at Netflix",
          "imageUrl": "https://miro.medium.com/max/1200/0*I7mFezeKAt08o691"
        },
        {
          "id": "https://medium.com/p/295e4d788db5",
          "author": "Netflix Technology Blog",
          "description": "By Grace Tang, Aneesh Vartakavi, Julija Bagdonaite, Cristina Segalin, and Vi Iyengar",
          "link": "https://netflixtechblog.com/discovering-creative-insights-in-promotional-artwork-295e4d788db5?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-01-30T16:16:03.000Z",
          "wordCount": 4703,
          "title": "Discovering Creative Insights in Promotional Artwork",
          "imageUrl": "https://miro.medium.com/max/664/1*Y9kntVhxsTY0PoQEcQ4yIQ.png"
        },
        {
          "id": "https://medium.com/p/f5ba9266d428",
          "author": "Netflix Technology Blog",
          "description": "In Marken (Scalable Annotation Service at Netflix), an annotation is a piece of metadata which can be attached to an object from any domain.",
          "link": "https://netflixtechblog.com/scalable-annotation-service-marken-f5ba9266d428?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-01-26T03:07:29.000Z",
          "wordCount": 5851,
          "title": "Scalable Annotation Service — Marken",
          "imageUrl": "https://miro.medium.com/max/1200/1*5eyi33Txa5kOKuyMmrpPGA.jpeg"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2023/02/16/three-state-stability.html",
          "author": null,
          "description": "Usually, when discussing stability of the APIs (in a broad sense; databases and programming languages are also APIs), only two states are mentioned:",
          "link": "https://matklad.github.io/2023/02/16/three-state-stability.html",
          "publishedOn": "2023-02-16T00:00:00.000Z",
          "wordCount": 666,
          "title": "Three-State Stability",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/02/12/a-love-letter-to-deno.html",
          "author": null,
          "description": "Deno is a relatively new JavaScript runtime.\nI find quite interesting and aesthetically appealing, in-line with the recent trend to rein in the worse-is-better law of software evolution.\nThis post explains why.",
          "link": "https://matklad.github.io/2023/02/12/a-love-letter-to-deno.html",
          "publishedOn": "2023-02-12T00:00:00.000Z",
          "wordCount": 1522,
          "title": "<3 Deno",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/02/10/how-a-zig-ide-could-work.html",
          "author": null,
          "description": "Zig is a very interesting language from an IDE point of view.\nSome aspects of it are friendly to IDEs, like a very minimal and simple-to-parse syntax\n(Zig can even be correctly lexed line-by-line, very cool!),\nthe absence of syntactic macros, and ability to do a great deal of semantic analysis on a file-by-file basis, in parallel.\nOn the other hand, comptime.\nI accidentally spent some time yesterday thinking about how to build an IDE for that, this post is a result.",
          "link": "https://matklad.github.io/2023/02/10/how-a-zig-ide-could-work.html",
          "publishedOn": "2023-02-10T00:00:00.000Z",
          "wordCount": 2027,
          "title": "How a Zig IDE Could Work",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/01/26/rusts-ugly-syntax.html",
          "author": null,
          "description": "People complain about Rust syntax.\nI think that most of the time when people think they have an issue with Rust's syntax, they actually object to Rust's semantics.\nIn this slightly whimsical post, I'll try to disentangle the two.",
          "link": "https://matklad.github.io/2023/01/26/rusts-ugly-syntax.html",
          "publishedOn": "2023-01-26T00:00:00.000Z",
          "wordCount": 1141,
          "title": "Rust's Ugly Syntax",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/01/25/next-rust-compiler.html",
          "author": null,
          "description": "In Rust in 2023, @nrc floated an idea of a Rust compiler rewrite.\nAs my hobby is writing Rust compiler frontends (1, 2), I have some (but not very many) thoughts here!\nThe post consists of two parts, covering organizational and technical aspects.",
          "link": "https://matklad.github.io/2023/01/25/next-rust-compiler.html",
          "publishedOn": "2023-01-25T00:00:00.000Z",
          "wordCount": 1296,
          "title": "Next Rust Compiler",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}