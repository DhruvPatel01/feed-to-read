{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2024/06/30/",
          "author": null,
          "description": "I introduced two new tools to w64devkit, vc++filt and\npeports (pronounced like purports), which aid manual symbol\ninspection and complement one another. As of this writing, the latter is\nnot yet in a release, but it‚Äôs feature-complete and trivial to build if\nyou wanted to try it out early. This article explains the motivation and\npurpose for each.\nvc++filt\nBinutils has c++filt, a tool to demangle C++ symbols. Its primary use\ncase is operating on whole files or streams, passing through anything that\ndoesn‚Äôt look like a mangled C++ symbol, and interpolating human-friendly\nnames in place of mangled symbols. In, say, Vim I could run the current\nbuffer through it to translate mangled symbols (:%!c++filt).\nOtherwise it‚Äôs often composed with other tools in a pipeline.\nFor example, suppose I want ‚Ä¶",
          "link": "https://nullprogram.com/blog/2024/06/30/",
          "publishedOn": "2024-06-30T21:30:19.000Z",
          "wordCount": 1961,
          "title": "Symbol inspection tools for w64devkit: vc++filt and peports",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/e735e6ce8f7d",
          "author": "Netflix Technology Blog",
          "description": "Applying Quality of Service techniques at the application level",
          "link": "https://netflixtechblog.com/enhancing-netflix-reliability-with-service-level-prioritized-load-shedding-e735e6ce8f7d?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-06-25T22:58:09.000Z",
          "wordCount": 6060,
          "title": "Enhancing Netflix Reliability with Service-Level Prioritized Load Shedding",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*2KByIB47RWng5UNH"
        },
        {
          "id": "https://medium.com/p/6b4d4410b88f",
          "author": "Netflix Technology Blog",
          "description": "A summary of sessions at the first Data Engineering Open Forum at Netflix on April 18th, 2024",
          "link": "https://netflixtechblog.com/a-recap-of-the-data-engineering-open-forum-at-netflix-6b4d4410b88f?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-06-20T15:01:27.000Z",
          "wordCount": 2539,
          "title": "A Recap of the Data Engineering Open Forum at Netflix",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:981/0*k1mwTj0BpJuP0TDi"
        },
        {
          "id": "https://medium.com/p/8ebdda0b2db4",
          "author": "Netflix Technology Blog",
          "description": "Harness domain expertise with Video Annotator: streamline ML annotations, cut costs, and deploy faster using a human-in-the-loop system üöÄ",
          "link": "https://netflixtechblog.com/video-annotator-building-video-classifiers-using-vision-language-models-and-active-learning-8ebdda0b2db4?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-06-19T15:29:29.000Z",
          "wordCount": 3420,
          "title": "Video annotator: building video classifiers using vision-language models and active learning",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:620/1*hqNZjvWBlREV5GIv4uEmHw.png"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": [
        {
          "id": "https://nim-lang.org//blog/2024/07/03/version-208-released.html",
          "author": null,
          "description": "The Nim team is happy to announce Nim version 2.0.8, our fourth patch release for Nim 2.0.\nVersion 2.0.8 is a small release, containing just 20 commits, but it brings important improvements to Nim 2.0.6, released 10 days ago.\nMajor improvements in this release:\nNim‚Äôs allocator is now much more stable with --threads:on.\nBetter support for gcc14.\nOptimized setLen(0) for uninitialized strings and seqs.\nOptimized move when used with --mm:refc.\nThis release comes relatively quickly after our previous release because it was time-critical for our partner Status to receive these improvements as soon as possible.\nIt is our way of saying ‚Äúthank you‚Äù for their continued support of Nim.\nCheck out if the package manager of your OS already ships version 2.0.8 or\ninstall it as described here.\nExisting users\nIf you have installed a previous version of Nim using choosenim,\ngetting Nim 2.0.8 is as easy as:\n$ choosenim 2.0.8\n\nIf you are on OSX ARM, choosenim will not work for you.\nPlease choose an alternative method of installing or updating.\nAlternatively, you can download Nim 2.0.8 from\nour nightlies builds.\nDonating to Nim\nWe would like to encourage you to donate to Nim.\nThe donated money will be used to further improve Nim by creating bounties\nfor the most important bugfixes and features.\nYou can donate via:\nOpen Collective\nBitcoin: 1BXfuKM2uvoD6mbx4g5xM3eQhLzkCK77tJ\nIf you are a company, we also offer commercial support.\nBugfixes\nThese reported issues were fixed:\nFixed ‚Äú[Semi-regression] C code contains backtick`gensym‚Äù\n(#23711)\nFixed ‚ÄúsetLen(0) allocates memory causing performance regression‚Äù\n(#23742)\nFixed ‚ÄúSigsegv on std/tasks destructor‚Äù\n(#23725)\nFixed ‚ÄúgenericAssign does not take care of the importC variables‚Äù\n(#9940)\nFixed ‚Äúmove(table) does not move the table‚Äù\n(#23759)\nFixed ‚ÄúLocal variables can be prematurely moved to closure, causing use-after-move‚Äù\n(#23748)\nFixed ‚Äútvatiteropenarray test fails with c++‚Äù\n(#19977)\nThe complete list of changes is available\nhere.",
          "link": "https://nim-lang.org//blog/2024/07/03/version-208-released.html",
          "publishedOn": "2024-07-03T00:00:00.000Z",
          "wordCount": 451,
          "title": "Nim version 2.0.8 released",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        },
        {
          "id": "https://nim-lang.org//blog/2024/06/17/version-206-released.html",
          "author": null,
          "description": "The Nim team is happy to announce Nim version 2.0.6, our third, and the largest by far, patch release for Nim 2.0.\nVersion 2.0.6 contains (exactly!) 200 commits and brings bugfixes and improvements to Nim 2.0.4, released two months ago.\nThe reason for this many commits in this release is that this is planned as the last 2.0.x release before Nim 2.2 and we wanted to give you the best Nim 2.0 experience in case you won‚Äôt be able to switch immediately to Nim 2.2.\nNOTE: If your program uses threads (--threads:on became the default in the 2.0.x line) please also use the -d:useMalloc switch.\nThis problem will be fixed in a future release, sorry for the inconvenience.\nCheck out if the package manager of your OS already ships version 2.0.6 or\ninstall it as described here.\nExisting users\nIf you hav‚Ä¶",
          "link": "https://nim-lang.org//blog/2024/06/17/version-206-released.html",
          "publishedOn": "2024-06-17T00:00:00.000Z",
          "wordCount": 1339,
          "title": "Nim version 2.0.6 released",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        }
      ]
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2024/07/05/properly-testing-concurrent-data-structures.html",
          "author": null,
          "description": "There's a fascinating Rust library, loom, which can be used to\nthoroughly test lock-free data structures. I always wanted to learn how it works. I still do! But\nrecently I accidentally implemented a small toy which, I think, contains some of the loom's ideas,\nand it seems worthwhile to write about that. The goal here isn't to teach you what you should be\nusing in practice (if you need that, go read loom's docs), but rather to derive a couple of neat\nideas from first principles.",
          "link": "https://matklad.github.io/2024/07/05/properly-testing-concurrent-data-structures.html",
          "publishedOn": "2024-07-05T00:00:00.000Z",
          "wordCount": 4909,
          "title": "Properly Testing Concurrent Data Structures",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    },
    {
      "title": "samwho.dev",
      "feedUrl": "https://samwho.dev/rss.xml",
      "siteUrl": "https://samwho.dev/rss.xml",
      "articles": []
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net/feed.atom",
      "articles": [
        {
          "id": "https://notes.abhinavsarkar.net/2024/links-06",
          "author": null,
          "description": "<p>Here are some interesting things I recently read on the internet:</p>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúAs I walk around Philadelphia I often converse with Benjamin Franklin, to see what he thinks about how things have changed since 1790.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://blog.plover.com/tech/its-an-age-of-marvels.html\">It‚Äôs an Age of Marvels</a></cite><a href=\"https://web.archive.org/web/3/https://blog.plover.com/tech/its-an-age-of-marvels.html\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúThe difficulty with music is that half of it is arbitrary and half of it is actually based on something, but you can‚Äôt tell the difference just by looking at it.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://eev.ee/blog/2016/09/15/music-theory-for-nerds/\">Music Theory for Nerds</a></cite><a href=\"https://web.archive.org/web/3/https://eev.ee/blog/2016/09/15/music-theory-for-nerds/\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúDefining the original paths for those letters was a very manual process of writing their positions into the code and then nudging the points back and forth until the letters looked right. When it came to coding cursive, I streamlined the process.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://www.amygoodchild.com/blog/cursive-handwriting-in-javascript\">Coding My Handwriting</a></cite><a href=\"https://web.archive.org/web/3/https://www.amygoodchild.com/blog/cursive-handwriting-in-javascript\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúAre there deeper, more fundamental aspects of software that can help us think beyond surface-level matters? I‚Äôve come to think that a triad of interacting factors best explains what software is and, by extension, why software is difficult.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://tratt.net/laurie/blog/2024/what_factors_explain_the_nature_of_software.html\">What Factors Explain the Nature of Software?</a></cite><a href=\"https://web.archive.org/web/3/https://tratt.net/laurie/blog/2024/what_factors_explain_the_nature_of_software.html\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúPrograms that manipulate other programs are powerful, interesting and fun. I‚Äôll take you on a tour of how interpreters and compilers work, and explain a surprising computer science result which allows compilers to be generated automatically.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://tomstu.art/compilers-for-free\">Compilers for Free</a></cite><a href=\"https://web.archive.org/web/3/https://tomstu.art/compilers-for-free\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúReferences are like jumps, leading wildly from one part of a data structure to another. Their introduction into high-level languages has been a step backward from which we may never recover.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://without.boats/blog/references-are-like-jumps/\">References Are like Jumps</a></cite><a href=\"https://web.archive.org/web/3/https://without.boats/blog/references-are-like-jumps/\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúForsp kind of just appeared and then has continued to surprise me. In many ways it feels more fundamental than Lisp or Forth. It appears to be both simpler than Lisp and more powerful than Forth.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://xorvoid.com/forsp.html\">Forsp: A Forth+Lisp Hybrid Lambda Calculus Language</a></cite><a href=\"https://web.archive.org/web/3/https://xorvoid.com/forsp.html\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚Äúc4 is clever, tricky, fascinating, cool. It‚Äôs a compiler, it‚Äôs a VM, it‚Äôs an interpreter, it‚Äôs a parser, it‚Äôs art, it‚Äôs trickshot programming.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://registerspill.thorstenball.com/p/exploring-the-c4-compiler\">Exploring the c4‚Ä¶ Compiler?</a></cite><a href=\"https://web.archive.org/web/3/https://registerspill.thorstenball.com/p/exploring-the-c4-compiler\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúLately I‚Äôve been discovering new features in Python 3.12 around typing and pattern matching. Combined with dataclasses, they provide support for a style of programming that I‚Äôve employed in Kotlin and Typescript.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://wickstrom.tech/2024-05-23-statically-typed-functional-programming-python-312.html\">Statically Typed Functional Programming with Python 3.12</a></cite><a href=\"https://web.archive.org/web/3/https://wickstrom.tech/2024-05-23-statically-typed-functional-programming-python-312.html\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúOptics represent different relationships between types, such as ‚Äòis a type of‚Äô, or ‚Äòcontains one or more‚Äô, similar to relationships in an old-timey UML class diagram. But unlike relationships in a UML diagram, optics can be used directly in real code.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://doscienceto.it/blog/posts/2019-12-19-optics.html\">Lessons Learned Building a Van Laarhoven Lens Library</a></cite><a href=\"https://web.archive.org/web/3/https://doscienceto.it/blog/posts/2019-12-19-optics.html\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúPlease don‚Äôt do this in production.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://astrid.tech/2024/05/01/0/ansible-is-a-lisp/\">Ansible Is a Lisp</a></cite><a href=\"https://web.archive.org/web/3/https://astrid.tech/2024/05/01/0/ansible-is-a-lisp/\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúIf Bob‚Äôs offering a perfect algorithm off the top of his head, call bullshit (unless he carefully frames it as a hypothesis to test in a simulator, thank you, Bob).‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://sirupsen.com/napkin/problem-16-simulation\">When to Write a Simulator</a></cite><a href=\"https://web.archive.org/web/3/https://sirupsen.com/napkin/problem-16-simulation\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúI just don‚Äôt think it‚Äôs useful, most of the time, to worry about anything beyond: wake me up, or don‚Äôt.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://ntietz.com/blog/the-only-two-log-levels-you-need-are-info-and-error/\">The Only Two Log Levels You Need Are INFO and ERROR</a></cite><a href=\"https://web.archive.org/web/3/https://ntietz.com/blog/the-only-two-log-levels-you-need-are-info-and-error/\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúThe internet is awash with tutorials on how to implement dark mode that will get you to a rudimentary implementation. I found that they lacked the refinements necessary to get to a great implementation.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://brandur.org/fragments/dark-mode-notes\">Notes on Implementing Dark Mode</a></cite><a href=\"https://web.archive.org/web/3/https://brandur.org/fragments/dark-mode-notes\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúToo often have I witnessed the improvising musician sweaty-handedly attempting to pinch-zoom an A4 pdf on a tiny mobile screen at the climax of a gig. We need fluid and responsive music rendering for the web!‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://cruncher.ch/blog/printing-music-with-css-grid/\">Printing Music with CSS Grid</a></cite><a href=\"https://web.archive.org/web/3/https://cruncher.ch/blog/printing-music-with-css-grid/\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<p>Like, share, or comment on this post on <a href=\"https://fantastic.earth/@abnv/112615743566573724\" class=\"mastodon-link\">Mastodon</a>.</p>",
          "link": "https://notes.abhinavsarkar.net/2024/links-06",
          "publishedOn": "2024-06-14T00:00:00.000Z",
          "wordCount": 877,
          "title": "Interesting Links for June 2024",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Daniel Lemire's blog",
      "feedUrl": "https://lemire.me/blog/feed/",
      "siteUrl": "https://lemire.me/blog",
      "articles": [
        {
          "id": "https://lemire.me/blog/?p=21437",
          "author": "Daniel Lemire",
          "description": "Recently, the two major Web engines (WebKit and Chromium) adopted fast SIMD routines to scan HTML content. The key insight is to use vectorized classification (Langdale and Lemire, 2019): you load blocks of characters and identify the characters you seek using a few instructions. In particular, we use ‚ÄòSIMD instructions‚Äô, special instructions that are available ‚Ä¶ Continue reading Scan HTML faster with SIMD instructions: .NET/C# Edition",
          "link": "https://lemire.me/blog/2024/07/05/scan-html-faster-with-simd-instructions-net-c-edition/",
          "publishedOn": "2024-07-05T19:44:50.000Z",
          "wordCount": 3429,
          "title": "Scan HTML faster with SIMD instructions: .NET/C# Edition",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21423",
          "author": "Daniel Lemire",
          "description": "In C, we allocate memory on the heap using the malloc function. Other programming languages like C++ or zig (e.g., std.heap.c_allocator) may call on malloc underneath so it is important to understand how malloc works. Furthermore, the same concepts apply broadly to other memory allocators. In theory, you could allocate just one byte like so: ‚Ä¶ Continue reading How much memory does a call to ‚Äòmalloc‚Äô  allocate?",
          "link": "https://lemire.me/blog/2024/06/27/how-much-memory-does-a-call-to-malloc-allocates/",
          "publishedOn": "2024-06-27T20:41:51.000Z",
          "wordCount": 3734,
          "title": "How much memory does a call to ‚Äòmalloc‚Äô  allocate?",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21410",
          "author": "Daniel Lemire",
          "description": "Copying data in software is cheap, but it is not at all free. As you start optimizing your code, you might find that copies become a performance bottleneck. Let me be clear that copies really are cheap. It is often more performant to copy that data than to track the same memory across different threads. ‚Ä¶ Continue reading Performance tip: avoid unnecessary copies",
          "link": "https://lemire.me/blog/2024/06/22/performance-tip-avoid-unnecessary-copies/",
          "publishedOn": "2024-06-22T19:14:18.000Z",
          "wordCount": 3653,
          "title": "Performance tip: avoid unnecessary copies",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21400",
          "author": "Daniel Lemire",
          "description": "We have been working on a fast library to validate and transcode Unicode and other formats such as base64 in C++: simdutf. We wondered: could we achieve the same good results in C#? Microsoft‚Äôs .NET framework has made great strides in leveraging advanced instructions. For instance, if your processor supports AVX-512, you can instantiate 512-bit ‚Ä¶ Continue reading Validating gigabytes of Unicode strings per second‚Ä¶ in C#?",
          "link": "https://lemire.me/blog/2024/06/20/validating-gigabytes-of-unicode-strings-per-second-in-c/",
          "publishedOn": "2024-06-20T17:25:02.000Z",
          "wordCount": 3422,
          "title": "Validating gigabytes of Unicode strings per second‚Ä¶ in C#?",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21386",
          "author": "Daniel Lemire",
          "description": "If you must multiply matrices, you should use dedicated libraries. However, we sometimes need to roll our own code. In C++, you can quickly write your own Matrix template: template <typename T> struct Matrix { Matrix(size_t rows, size_t cols) : data(new T[rows * cols]), rows(rows), cols(cols) {} T &operator()(size_t i, size_t j) { return data.get()[i ‚Ä¶ Continue reading Rolling your own fast matrix multiplication: loop order and vectorization",
          "link": "https://lemire.me/blog/2024/06/13/rolling-your-own-fast-matrix-multiplication-loop-order-and-vectorization/",
          "publishedOn": "2024-06-13T21:11:26.000Z",
          "wordCount": 3610,
          "title": "Rolling your own fast matrix multiplication: loop order and vectorization",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21382",
          "author": "Daniel Lemire",
          "description": "Modern processors have instructions to process several bytes at once. Effectively all processors have the capability of processing 16 bytes at once. These instructions are called SIMD, for single instruction, multiple data. It was once an open question whether these instructions could be useful to accelerate common tasks such as parsing HTML or JSON. However, ‚Ä¶ Continue reading Scan HTML faster with SIMD instructions: Chrome edition",
          "link": "https://lemire.me/blog/2024/06/08/scan-html-faster-with-simd-instructions-chrome-edition/",
          "publishedOn": "2024-06-08T04:55:42.000Z",
          "wordCount": 4229,
          "title": "Scan HTML faster with SIMD instructions: Chrome edition",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "devever.net/~hl",
      "feedUrl": "https://www.devever.net/~hl/index.feed",
      "siteUrl": "https://www.devever.net/~hl/",
      "articles": [
        {
          "id": "https://www.devever.net/~hl/u/202406#23a",
          "author": null,
          "description": "<div type=\"xhtml\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><ul><li><a href=\"https://www.linkedin.com/in/hugo-landau/\">Hire me</a></li></ul><p xmlns=\"http://www.w3.org/1999/xhtml\">Looking for a new role. Expertise in cryptography, security, networking,\nreversing. Dev, ops, security. Amongst other things I've authored a , a\n and . I gave a talk about .\n / .<a href=\"https://github.com/openssl/openssl/pulls?q=author%3Ahlandau\">QUIC\nimplementation</a><a href=\"http://github.com/hlandau/acmetool\">Let's Encrypt client</a><a href=\"/~hl/acme-caa-live\">an\nRFC</a><a href=\"/~hl/ortega-37c3/\">reverse engineering an Ethernet\ncontroller's firmware at 37C3</a><a href=\"https://www.linkedin.com/in/hugo-landau/\">LinkedIn</a><a href=\"/~hl/contact\">contact\ndetails</a></p></div></div>",
          "link": "https://www.devever.net/~hl/u/202406#23a",
          "publishedOn": "2024-06-23T09:43:07.000Z",
          "wordCount": 67,
          "title": "[HŒºblog] Hire me",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "apenwarr",
      "feedUrl": "https://apenwarr.ca/log/rss.php",
      "siteUrl": "https://apenwarr.ca/log/",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}