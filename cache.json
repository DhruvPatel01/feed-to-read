{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2023/02/15/",
          "author": null,
          "description": "Seven years ago I wrote about “freestanding” Windows executables.\nAfter an additional seven years of practical experience both writing and\ndistributing such programs, half using a custom-built toolchain,\nit’s time to revisit these cabalistic incantations and otherwise scant\ndetails. I’ve tweaked my older article over the years as I’ve learned, but\nthis is a full replacement and does not assumes you’ve read it. The “why”\nhas been covered and the focus will be on the “how”. Both the GNU\nand MSVC toolchains will be considered.\nI no longer call these “freestanding” programs since that term is, at\nbest, inaccurate. In fact, we will be actively avoiding GCC features\nassociated with that label. Instead I call these CRT-free programs,\nwhere CRT stands for the C runtime the Windows-oriented term fo…",
          "link": "https://nullprogram.com/blog/2023/02/15/",
          "publishedOn": "2023-02-15T02:12:00.000Z",
          "wordCount": 2203,
          "title": "CRT-free in 2023: tips and tricks",
          "imageUrl": null
        },
        {
          "id": "https://nullprogram.com/blog/2023/02/13/",
          "author": null,
          "description": "This article was discussed on reddit.\nWhen not using the C standard library, how does one deal with\nformatted output? Re-implementing the entirety of printf from scratch\nseems like a lot of work, and indeed it would be. Fortunately it’s rarely\nnecessary. With the right mindset, and considering your program’s actual\nformatting needs, it’s not as difficult as it might appear. Since it goes\nhand-in-hand with buffering, I’ll cover both topics at once, including\nsprintf-like capabilities, which is where we’ll start.\nThe print-is-append mindset\nBuffering amortizes the costs of write (and read) system calls. Many small\nwrites are queued via the buffer into a few large writes. This isn’t just\nan implementation detail. It’s key in the mindset to tackle formatted\noutput: Printing is appending.\nThe m…",
          "link": "https://nullprogram.com/blog/2023/02/13/",
          "publishedOn": "2023-02-13T00:00:00.000Z",
          "wordCount": 1773,
          "title": "Let's implement buffered, formatted output",
          "imageUrl": null
        },
        {
          "id": "https://nullprogram.com/blog/2023/02/12/",
          "author": null,
          "description": "This article was discussed on Hacker News.\nYesterday I wrote that setjmp is handy and that it would be nice\nto have without linking the C standard library. It’s conceptually simple,\nafter all. Today let’s explore some differently-portable implementation\npossibilities with distinct trade-offs. At the very least it should\nilluminate why setjmp sometimes requires the use of volatile.\nFirst, a quick review: setjmp and longjmp are a form of non-local\ngoto.\n\ntypedef void *jmp_buf[N];\nint setjmp(jmp_buf);\nvoid longjmp(jmp_buf, int);\n\n\nCalling setjmp saves the execution context in a jmp_buf, and longjmp\nrestores this context, returning the thread to this previous point of\nexecution. This means setjmp returns twice: (1) after saving the\ncontext, and (2) from longjmp. To distinguish these cases, the…",
          "link": "https://nullprogram.com/blog/2023/02/12/",
          "publishedOn": "2023-02-12T02:23:11.000Z",
          "wordCount": 1991,
          "title": "Let's write a setjmp",
          "imageUrl": null
        },
        {
          "id": "https://nullprogram.com/blog/2023/02/11/",
          "author": null,
          "description": "This article was discussed on Hacker News and critiqued on\nWandering Thoughts.\nIn general, when working in C I avoid the standard library, libc, as much\nas possible. If possible I won’t even link it. For people not used to\nworking and thinking this way, the typical response is confusion. Isn’t\nthat like re-inventing the wheel? For me, libc is a wheel barely worth\nusing — too many deficiencies in both interface and implementation.\nFortunately, it’s easy to build a better, simpler wheel when you know the\nterrain ahead of time. In this article I’ll review the functions and\nfunction-like macros of the C standard library and discuss practical\nissues I’ve faced with them.\nFortunately the flexibility of C-in-practice makes up for the standard\nlibrary. I already have all the tools at hand to do wh…",
          "link": "https://nullprogram.com/blog/2023/02/11/",
          "publishedOn": "2023-02-11T03:04:11.000Z",
          "wordCount": 3122,
          "title": "My review of the C standard library in practice",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Max Slater",
      "feedUrl": "https://thenumb.at/feed.xml",
      "siteUrl": "https://thenumbat.github.io/",
      "articles": []
    },
    {
      "title": "Dennis Yurichev's blog",
      "feedUrl": "https://yurichev.com/blog/rss.xml",
      "siteUrl": "https://yurichev.org/",
      "articles": [
        {
          "id": "https://yurichev.org/log_reminders/",
          "author": null,
          "description": "[Math][Python][Bash] Printing reminders picked using lorarithmic scale",
          "link": "https://yurichev.org/log_reminders/",
          "publishedOn": "2023-02-25T00:00:00.000Z",
          "wordCount": 592,
          "title": "[Math][Python][Bash] Printing reminders picked using lorarithmic scale",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/discourse/",
          "author": null,
          "description": "discourse.yurichev.com",
          "link": "https://yurichev.org/discourse/",
          "publishedOn": "2023-02-22T00:00:00.000Z",
          "wordCount": 166,
          "title": "discourse.yurichev.com",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/wireguard2/",
          "author": null,
          "description": "VPN from Android to Linux: WireGuard working example",
          "link": "https://yurichev.org/wireguard2/",
          "publishedOn": "2023-02-22T00:00:00.000Z",
          "wordCount": 466,
          "title": "VPN from Android to Linux: WireGuard working example",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/log2_3/",
          "author": null,
          "description": "[Math] Binary logarithm, part III",
          "link": "https://yurichev.org/log2_3/",
          "publishedOn": "2023-02-20T00:00:00.000Z",
          "wordCount": 277,
          "title": "[Math] Binary logarithm, part III",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/latency/",
          "author": null,
          "description": "Understanding latency vs. network speed",
          "link": "https://yurichev.org/latency/",
          "publishedOn": "2023-02-17T00:00:00.000Z",
          "wordCount": 567,
          "title": "Understanding latency vs. network speed",
          "imageUrl": null
        },
        {
          "id": "https://yurichev.org/perl/",
          "author": null,
          "description": "Learning Perl",
          "link": "https://yurichev.org/perl/",
          "publishedOn": "2023-02-14T00:00:00.000Z",
          "wordCount": 315,
          "title": "Learning Perl",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "fasterthanli.me",
      "feedUrl": "https://fasterthanli.me/index.xml",
      "siteUrl": "https://fasterthanli.me",
      "articles": [
        {
          "id": "https://fasterthanli.me/articles/the-bottom-emoji-breaks-rust-analyzer",
          "author": null,
          "description": "<p>Some bugs are merely fun. Others are simply delicious!</p>\n<p>Today's pick is the latter.</p>\n\n                        <h2>\n                            <a id=\"reproducing-the-issue-part-1\" class=\"anchor\" href=\"#reproducing-the-issue-part-1\">\n                                Reproducing the issue, part 1\n                            </a>\n                        </h2>",
          "link": "https://fasterthanli.me/articles/the-bottom-emoji-breaks-rust-analyzer",
          "publishedOn": "2023-02-13T14:20:00.000Z",
          "wordCount": 9985,
          "title": "The bottom emoji breaks rust-analyzer",
          "imageUrl": "https://fasterthanli.me/img/logo-square-2.png"
        }
      ]
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/f19b400243",
          "author": "Netflix Technology Blog",
          "description": "We tackle some of the unique challenges of scaling multimodal machine learning models that operate on media assets (video, audio, and…",
          "link": "https://netflixtechblog.com/scaling-media-machine-learning-at-netflix-f19b400243?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-02-13T17:59:51.000Z",
          "wordCount": 5471,
          "title": "Scaling Media Machine Learning at Netflix",
          "imageUrl": "https://miro.medium.com/max/1200/0*bjkKC00A5uHNV9GW"
        },
        {
          "id": "https://medium.com/p/295e4d788db5",
          "author": "Netflix Technology Blog",
          "description": "By Grace Tang, Aneesh Vartakavi, Julija Bagdonaite, Cristina Segalin, and Vi Iyengar",
          "link": "https://netflixtechblog.com/discovering-creative-insights-in-promotional-artwork-295e4d788db5?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-01-30T16:16:03.000Z",
          "wordCount": 4703,
          "title": "Discovering Creative Insights in Promotional Artwork",
          "imageUrl": "https://miro.medium.com/max/664/1*Y9kntVhxsTY0PoQEcQ4yIQ.png"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": []
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": [
        {
          "id": "https://ayazhafiz.com/articles/23/a-lambda-calculus-with-coroutines-and-heapless-closures",
          "author": null,
          "description": "co_lc is a lambda calculus extended with stackful coroutines. An efficient implementation for the compilation and virtual machine execution of co_lc is presented. The implementation supports tail-call optimization and eliminates all indirect calls by defunctionalizing closures.",
          "link": "https://ayazhafiz.com/articles/23/a-lambda-calculus-with-coroutines-and-heapless-closures",
          "publishedOn": "2023-02-18T06:00:00.000Z",
          "wordCount": 5488,
          "title": "A Lambda Calculus With Coroutines and Heapless, Directly-Called Closures",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2023/02/21/why-SAT-is-hard.html",
          "author": null,
          "description": "An introductory post about complexity theory today!\nIt is relatively well-known that there exist so-called NP-complete problems --- particularly hard problems, such that, if you solve one of them efficiently, you can solve all of them efficiently.\nI think I've learned relatively early that, e.g., SAT is such a hard problem.\nI've similarly learned a bunch of specific examples of equally hard problems, where solving one solves the other.\nHowever, why SAT is harder than any NP problem remained a mystery for a rather long time to me.\nIt is a shame --- this fact is rather intuitive and easy to understand.\nThis post is my attempt at an explanation.\nIt assumes some familiarity with the space, but it's not going to be too technical or thorough.",
          "link": "https://matklad.github.io/2023/02/21/why-SAT-is-hard.html",
          "publishedOn": "2023-02-21T00:00:00.000Z",
          "wordCount": 1693,
          "title": "Why SAT Is Hard",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/02/16/three-state-stability.html",
          "author": null,
          "description": "Usually, when discussing stability of the APIs (in a broad sense; databases and programming languages are also APIs), only two states are mentioned:",
          "link": "https://matklad.github.io/2023/02/16/three-state-stability.html",
          "publishedOn": "2023-02-16T00:00:00.000Z",
          "wordCount": 666,
          "title": "Three-State Stability",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/02/12/a-love-letter-to-deno.html",
          "author": null,
          "description": "Deno is a relatively new JavaScript runtime.\nI find quite interesting and aesthetically appealing, in-line with the recent trend to rein in the worse-is-better law of software evolution.\nThis post explains why.",
          "link": "https://matklad.github.io/2023/02/12/a-love-letter-to-deno.html",
          "publishedOn": "2023-02-12T00:00:00.000Z",
          "wordCount": 1522,
          "title": "<3 Deno",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/02/10/how-a-zig-ide-could-work.html",
          "author": null,
          "description": "Zig is a very interesting language from an IDE point of view.\nSome aspects of it are friendly to IDEs, like a very minimal and simple-to-parse syntax\n(Zig can even be correctly lexed line-by-line, very cool!),\nthe absence of syntactic macros, and ability to do a great deal of semantic analysis on a file-by-file basis, in parallel.\nOn the other hand, comptime.\nI accidentally spent some time yesterday thinking about how to build an IDE for that, this post is a result.",
          "link": "https://matklad.github.io/2023/02/10/how-a-zig-ide-could-work.html",
          "publishedOn": "2023-02-10T00:00:00.000Z",
          "wordCount": 2027,
          "title": "How a Zig IDE Could Work",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}