{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2024/03/05/",
          "author": null,
          "description": "After a year I’ve finally came up with an elegant solution to a vexing\nu-config problem. The pkg-config format uses macros to generate build\nflags through recursive expansion. Some flags embed file system paths, but\nto the macro system it’s all strings. The output is also ultimately just\none big string, which the receiving shell splits into fields. If\na path contains spaces, or shell metacharacters, u-config must escape them\nso that shells treat them as part of a token. But how can u-config itself\ndistinguish incidental spaces in paths from deliberate spaces between\nflags? What about other shell metacharacters in paths? My solution is to\nextend UTF-8 to encode metadata that survives macro expansion.\nAs usual, it helps to begin with a concrete example of the problem. The\nfollowing is a conv…",
          "link": "https://nullprogram.com/blog/2024/03/05/",
          "publishedOn": "2024-03-05T03:15:12.000Z",
          "wordCount": 1101,
          "title": "Protecting paths in macro expansions by extending UTF-8",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Max Slater",
      "feedUrl": "https://thenumb.at/feed.xml",
      "siteUrl": "https://thenumb.at/",
      "articles": []
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/2d2e6b6d205d",
          "author": "Netflix Technology Blog",
          "description": "David J. Berg, Romain Cledat, Kayla Seeley, Shashank Srikanth, Chaoying Wang, Darin Yu",
          "link": "https://netflixtechblog.com/supporting-diverse-ml-systems-at-netflix-2d2e6b6d205d?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-03-07T18:33:07.000Z",
          "wordCount": 6313,
          "title": "Supporting Diverse ML Systems at Netflix",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:1200/1*4hoAg4FX6oeua708alTMlA.png"
        },
        {
          "id": "https://medium.com/p/256629c9386b",
          "author": "Netflix Technology Blog",
          "description": "The surprising and not so surprising benefits of generations in the Z Garbage Collector.",
          "link": "https://netflixtechblog.com/bending-pause-times-to-your-will-with-generational-zgc-256629c9386b?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-03-06T01:35:08.000Z",
          "wordCount": 3115,
          "title": "Bending pause times to your will with Generational ZGC",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*GuEZ-RMhzNnYgLQd"
        },
        {
          "id": "https://medium.com/p/039d5efd115b",
          "author": "Netflix Technology Blog",
          "description": "by Binbing Hou, Stephanie Vezich Tamayo, Xiao Chen, Liang Tian, Troy Ristow, Haoyuan Wang, Snehal Chennuru, Pawan Dixit",
          "link": "https://netflixtechblog.com/evolving-from-rule-based-classifier-machine-learning-powered-auto-remediation-in-netflix-data-039d5efd115b?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-03-04T18:01:55.000Z",
          "wordCount": 6839,
          "title": "Evolving from Rule-based Classifier: Machine Learning Powered Auto Remediation in Netflix Data…",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:1200/1*2eENd1mhwyGpMWNccEwqlQ.png"
        },
        {
          "id": "https://medium.com/p/6a727c1ae2e5",
          "author": "Netflix Technology Blog",
          "description": "By Jose Fernandez",
          "link": "https://netflixtechblog.com/announcing-bpftop-streamlining-ebpf-performance-optimization-6a727c1ae2e5?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-02-26T16:43:30.000Z",
          "wordCount": 1371,
          "title": "Announcing bpftop: Streamlining eBPF performance optimization",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:1200/1*hLvLcNDb6RljixhN8la-lg.gif"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": []
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2024/03/02/Kafka-vs-Nabokov.html",
          "author": null,
          "description": "Uplifting a lobste.rs comment to a stand-alone post.",
          "link": "https://matklad.github.io/2024/03/02/Kafka-vs-Nabokov.html",
          "publishedOn": "2024-03-02T00:00:00.000Z",
          "wordCount": 973,
          "title": "Kafka versus Nabokov",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    },
    {
      "title": "samwho.dev",
      "feedUrl": "https://samwho.dev/rss.xml",
      "siteUrl": "https://samwho.dev/rss.xml",
      "articles": [
        {
          "id": "https://samwho.dev/bloom-filters/",
          "author": null,
          "description": ".bf {\n  width: 100%;\n  height: 150px;\n}\n\n@media only screen and (min-width: 320px) and (max-width: 479px) {\n  .bf {\n    height: 200px;\n  }\n}\n\n@media only screen and (min-width: 480px) and (max-width: 676px) {\n  .bf {\n    height: 200px;\n  }\n }\n\n@media only screen and (min-width: 677px) and (max-width: 991px) {\n  .bf {\n    height: 150px;\n  }\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: stretch;\n}\n\ninput {\n    border: 1px solid rgb(119, 119, 119);\n    padding: 0.25rem;\n    border-radius: 0.25rem;\n    height: 2em;\n    line-height: 2em;\n}\n\n.aside {\n  padding: 2rem;\n  width: 100vw;\n  position: relative;\n  margin-left: -50vw;\n  left: 50%;\n  background-color: #eeeeee;\n\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.aside > * …",
          "link": "https://samwho.dev/bloom-filters/",
          "publishedOn": "2024-02-19T00:00:00.000Z",
          "wordCount": 3118,
          "title": "Bloom Filters",
          "imageUrl": "https://samwho.dev/images/bloom-filters.png?h=92a20de28f9c649be1ad"
        }
      ]
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net/feed.atom",
      "articles": []
    },
    {
      "title": "Daniel Lemire's blog",
      "feedUrl": "https://lemire.me/blog/feed/",
      "siteUrl": "https://lemire.me/blog",
      "articles": [
        {
          "id": "https://lemire.me/blog/?p=21158",
          "author": "Daniel Lemire",
          "description": "Suppose you need to read several files on a server using JavaScript. There are many ways to read files in JavaScript with a runtime like Node.js. Which one is best? Let us consider the various approaches. Using fs.promises const fs = require('fs/promises'); const readFile = fs.readFile; readFile(\"lipsum.txt\", { encoding: 'utf-8' }) .then((data) => {...}) .catch((err) … Continue reading How to read files quickly in JavaScript",
          "link": "https://lemire.me/blog/2024/03/12/how-to-read-files-quickly-in-javascript/",
          "publishedOn": "2024-03-12T15:43:09.000Z",
          "wordCount": 3439,
          "title": "How to read files quickly in JavaScript",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=21150",
          "author": "Daniel Lemire",
          "description": "Canada has several political parties with elected member of parliament: the Liberals, the Conservatives, the Bloc Québecois, de NDP and the Green. But do they behave as distinct political parties when voting, or are they somehow aligned? Voting data for the member of parliament in Canada is easily accessible as JSON or XML. Thus I … Continue reading How many political parties rule Canada? Fun with statistics",
          "link": "https://lemire.me/blog/2024/03/08/how-many-political-parties-rule-canada-fun-with-statistics/",
          "publishedOn": "2024-03-08T15:59:04.000Z",
          "wordCount": 3234,
          "title": "How many political parties rule Canada? Fun with statistics",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=21135",
          "author": "Daniel Lemire",
          "description": "When I was young, science fiction was the genre of choice for many engineers and scientists. But the genre declined significantly in recent years. Part of the problem is the rise dystopian fiction. In the imagined future, we are no longer conquering space or developing new fantastic technologies, but rather, increasingly, battling the consequences of … Continue reading Book review: Theft of Fire by Devon Eriksen",
          "link": "https://lemire.me/blog/2024/02/24/book-review-theft-of-fire-by-devon-eriksen/",
          "publishedOn": "2024-02-24T18:35:03.000Z",
          "wordCount": 3861,
          "title": "Book review: Theft of Fire by Devon Eriksen",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=21126",
          "author": "Daniel Lemire",
          "description": "Modern processor have fancy instructions that can do many operations at one using wide registers: SIMD instructions. Intel and AMD have 512-bit registers and associated instructions under AVX-512. You expect these instructions to use more power, more energy. However, they get the job done faster. Do you save energy overall? You should expect so. Let … Continue reading Measuring energy usage: regular code vs. SIMD code",
          "link": "https://lemire.me/blog/2024/02/19/measuring-energy-usage-regular-code-vs-simd-code/",
          "publishedOn": "2024-02-19T21:39:32.000Z",
          "wordCount": 4084,
          "title": "Measuring energy usage: regular code vs. SIMD code",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        }
      ]
    },
    {
      "title": "devever.net/~hl",
      "feedUrl": "https://www.devever.net/~hl/index.feed",
      "siteUrl": "https://www.devever.net/~hl/",
      "articles": []
    },
    {
      "title": "apenwarr",
      "feedUrl": "https://apenwarr.ca/log/rss.php",
      "siteUrl": "https://apenwarr.ca/log/",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}