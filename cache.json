{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2024/05/25/",
          "author": null,
          "description": "I continue to streamline an arena-based paradigm, and stumbled\nupon a concise technique for dynamic growth ‚Äî an efficient, generic\n‚Äúconcatenate anything to anything‚Äù within an arena built atop a core of\n9-ish lines of code. The key insight originated from a reader suggestion\nabout dynamic arrays. The subject of concatenation can be a string,\ndynamic array, or even something else. The ‚Äúsystem‚Äù is extensible, and\nespecially useful for path handling.\nContinuing from last time, the examples are in light, C-style C++.\nI chose it because templates and function overloading express the concepts\nsuccinctly. It uses no standard library functionality, so converting to C,\nor similar, should be straightforward. The core concatenation ‚Äúoperator‚Äù:\n\ntemplate<typename T>\nT concat(arena *a, T head, T tail)\n‚Ä¶",
          "link": "https://nullprogram.com/blog/2024/05/25/",
          "publishedOn": "2024-05-25T00:00:00.000Z",
          "wordCount": 1724,
          "title": "Arenas and the almighty concatenation operator",
          "imageUrl": null
        },
        {
          "id": "https://nullprogram.com/blog/2024/05/24/",
          "author": null,
          "description": "Occasionally we need to compute the size of an object that does not yet\nexist, or a subscript that may fall out of bounds. It‚Äôs easy to miss\nthe edge cases where results overflow, creating a nasty, subtle bug, even\nin the presence of type safety. Ideally such computations happen in\nspecialized code, such as inside an allocator (calloc, reallocarray)\nand not outside by the allocatee (i.e. malloc). Mitigations exist with\ndifferent trade-offs: arbitrary precision, or using a wider fixed integer\n‚Äî i.e. 128-bit integers on 64-bit hosts. In the typical case, working only\nwith fixed size-type integers, I‚Äôve come up with a set of guidelines to\navoid overflows in the edge cases.\nRange check before computing a result. No exceptions.\nDo not cast unless you know a priori the operand is in range.\nNever‚Ä¶",
          "link": "https://nullprogram.com/blog/2024/05/24/",
          "publishedOn": "2024-05-24T22:25:10.000Z",
          "wordCount": 1143,
          "title": "Guidelines for computing sizes and subscripts",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Max Slater",
      "feedUrl": "https://thenumb.at/feed.xml",
      "siteUrl": "https://thenumb.at/",
      "articles": []
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/6b4d4410b88f",
          "author": "Netflix Technology Blog",
          "description": "A summary of sessions at the first Data Engineering Open Forum at Netflix on April 18th, 2024",
          "link": "https://netflixtechblog.com/a-recap-of-the-data-engineering-open-forum-at-netflix-6b4d4410b88f?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-06-20T15:01:27.000Z",
          "wordCount": 2570,
          "title": "A Recap of the Data Engineering Open Forum at Netflix",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:981/0*k1mwTj0BpJuP0TDi"
        },
        {
          "id": "https://medium.com/p/8ebdda0b2db4",
          "author": "Netflix Technology Blog",
          "description": "Harness domain expertise with Video Annotator: streamline ML annotations, cut costs, and deploy faster using a human-in-the-loop system üöÄ",
          "link": "https://netflixtechblog.com/video-annotator-building-video-classifiers-using-vision-language-models-and-active-learning-8ebdda0b2db4?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-06-19T15:29:29.000Z",
          "wordCount": 3451,
          "title": "Video annotator: building video classifiers using vision-language models and active learning",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:620/1*hqNZjvWBlREV5GIv4uEmHw.png"
        },
        {
          "id": "https://medium.com/p/fd78328ee0bb",
          "author": "Netflix Technology Blog",
          "description": "At Netflix, we want to ensure that every current and future member finds content that thrills them today and excites them to come back for‚Ä¶",
          "link": "https://netflixtechblog.com/round-2-a-survey-of-causal-inference-applications-at-netflix-fd78328ee0bb?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-06-06T20:10:54.000Z",
          "wordCount": 5149,
          "title": "Round 2: A Survey of Causal Inference Applications at Netflix",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:823/0*e8IMSJf7p60mk-WG"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": [
        {
          "id": "https://nim-lang.org//blog/2024/06/17/version-206-released.html",
          "author": null,
          "description": "The Nim team is happy to announce Nim version 2.0.6, our third, and the largest by far, patch release for Nim 2.0.\nVersion 2.0.6 contains (exactly!) 200 commits and brings bugfixes and improvements to Nim 2.0.4, released two months ago.\nThe reason for this many commits in this release is that this is planned as the last 2.0.x release before Nim 2.2 and we wanted to give you the best Nim 2.0 experience in case you won‚Äôt be able to switch immediately to Nim 2.2.\nNOTE: If your program uses threads (--threads:on became the default in the 2.0.x line) please also use the -d:useMalloc switch.\nThis problem will be fixed in a future release, sorry for the inconvenience.\nCheck out if the package manager of your OS already ships version 2.0.6 or\ninstall it as described here.\nExisting users\nIf you hav‚Ä¶",
          "link": "https://nim-lang.org//blog/2024/06/17/version-206-released.html",
          "publishedOn": "2024-06-17T00:00:00.000Z",
          "wordCount": 1339,
          "title": "Nim version 2.0.6 released",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        },
        {
          "id": "https://nim-lang.org//blog/2024/06/01/this-month-with-nim.html",
          "author": null,
          "description": "Oolib Upgrade\nAuthor: Neo\nNew super cool features here!\nMultiple constructor\nclass Gun:\n  var\n    offence: int\n    capacity = 6\n    price: int\n\n  proc `new`(offence: int) =\n    self.offence = offence\n    self.capacity = 8\n    self.price = 300\n\n  proc `new`(capacity: int) =\n    self.offence = 14\n    self.capacity = capacity\n    self.price = 200\n\n# This `new()` is made from the type definition\nlet _ = Gun.new(offence = 5, price = 6)\n\n# 2nd one\nlet _ = Gun.new(offence = 12)\n\n# 3rd one\nlet _ = Gun.new(capacity = 10)\n\nclass Sword:\n  var\n    offence: int\n    price {.initial.} = 100\n\n# made from the type definition\nlet _ = Sword.new(8)\n\n{.construct.}\na type definition with {.construct.} are made into a class. Now that we can define a class without using class!\ntype Shield {.construct.} = ref obje‚Ä¶",
          "link": "https://nim-lang.org//blog/2024/06/01/this-month-with-nim.html",
          "publishedOn": "2024-06-01T00:00:00.000Z",
          "wordCount": 589,
          "title": "This Month with Nim: October 2023 to June 2024 (It is a long month)",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        }
      ]
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2024/06/04/regular-recursive-restricted.html",
          "author": null,
          "description": "A post/question about formal grammars, wherein I search for a good formalism for describing infix\nexpressions.",
          "link": "https://matklad.github.io/2024/06/04/regular-recursive-restricted.html",
          "publishedOn": "2024-06-04T00:00:00.000Z",
          "wordCount": 1292,
          "title": "Regular, Recursive, Restricted",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    },
    {
      "title": "samwho.dev",
      "feedUrl": "https://samwho.dev/rss.xml",
      "siteUrl": "https://samwho.dev/rss.xml",
      "articles": [
        {
          "id": "https://samwho.dev/dogs/",
          "author": null,
          "description": ".dog-line {\n  display: flex;\n  flex-wrap: nowrap;\n  flex-direction: row;\n  width: 100%;\n  height: 10rem;\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n}\n\n.dog-line img {\n  flex-grow: 1;\n  height: auto;\n  margin: 0;\n  padding: 0;\n  object-fit: contain;\n}\n\n.dog-grid {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 1rem;\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n}\n\nBack in Memory Allocation, I introduced Haskie.\nThe idea behind Haskie was to create a character that could ask questions the\nreader might have, and to \"soften\" the posts to make them feel less\nintimidating. I got some feedback from people that Haskie was a bit too\nchildish, and didn't feel like he belonged in posts about serious topics.\nThis feedback was in the minority, though, and most people liked him. So I‚Ä¶",
          "link": "https://samwho.dev/dogs/",
          "publishedOn": "2024-06-01T00:00:00.000Z",
          "wordCount": 738,
          "title": "A Commitment to Art and Dogs",
          "imageUrl": "https://samwho.dev/images/dogs.png?h=763937a7e6c6de05e453"
        }
      ]
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net/feed.atom",
      "articles": [
        {
          "id": "https://notes.abhinavsarkar.net/2024/links-06",
          "author": null,
          "description": "<p>Here are some interesting things I recently read on the internet:</p>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúAs I walk around Philadelphia I often converse with Benjamin Franklin, to see what he thinks about how things have changed since 1790.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://blog.plover.com/tech/its-an-age-of-marvels.html\">It‚Äôs an Age of Marvels</a></cite><a href=\"https://web.archive.org/web/3/https://blog.plover.com/tech/its-an-age-of-marvels.html\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúThe difficulty with music is that half of it is arbitrary and half of it is actually based on something, but you can‚Äôt tell the difference just by looking at it.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://eev.ee/blog/2016/09/15/music-theory-for-nerds/\">Music Theory for Nerds</a></cite><a href=\"https://web.archive.org/web/3/https://eev.ee/blog/2016/09/15/music-theory-for-nerds/\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúDefining the original paths for those letters was a very manual process of writing their positions into the code and then nudging the points back and forth until the letters looked right. When it came to coding cursive, I streamlined the process.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://www.amygoodchild.com/blog/cursive-handwriting-in-javascript\">Coding My Handwriting</a></cite><a href=\"https://web.archive.org/web/3/https://www.amygoodchild.com/blog/cursive-handwriting-in-javascript\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúAre there deeper, more fundamental aspects of software that can help us think beyond surface-level matters? I‚Äôve come to think that a triad of interacting factors best explains what software is and, by extension, why software is difficult.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://tratt.net/laurie/blog/2024/what_factors_explain_the_nature_of_software.html\">What Factors Explain the Nature of Software?</a></cite><a href=\"https://web.archive.org/web/3/https://tratt.net/laurie/blog/2024/what_factors_explain_the_nature_of_software.html\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúPrograms that manipulate other programs are powerful, interesting and fun. I‚Äôll take you on a tour of how interpreters and compilers work, and explain a surprising computer science result which allows compilers to be generated automatically.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://tomstu.art/compilers-for-free\">Compilers for Free</a></cite><a href=\"https://web.archive.org/web/3/https://tomstu.art/compilers-for-free\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúReferences are like jumps, leading wildly from one part of a data structure to another. Their introduction into high-level languages has been a step backward from which we may never recover.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://without.boats/blog/references-are-like-jumps/\">References Are like Jumps</a></cite><a href=\"https://web.archive.org/web/3/https://without.boats/blog/references-are-like-jumps/\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúForsp kind of just appeared and then has continued to surprise me. In many ways it feels more fundamental than Lisp or Forth. It appears to be both simpler than Lisp and more powerful than Forth.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://xorvoid.com/forsp.html\">Forsp: A Forth+Lisp Hybrid Lambda Calculus Language</a></cite><a href=\"https://web.archive.org/web/3/https://xorvoid.com/forsp.html\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚Äúc4 is clever, tricky, fascinating, cool. It‚Äôs a compiler, it‚Äôs a VM, it‚Äôs an interpreter, it‚Äôs a parser, it‚Äôs art, it‚Äôs trickshot programming.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://registerspill.thorstenball.com/p/exploring-the-c4-compiler\">Exploring the c4‚Ä¶ Compiler?</a></cite><a href=\"https://web.archive.org/web/3/https://registerspill.thorstenball.com/p/exploring-the-c4-compiler\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúLately I‚Äôve been discovering new features in Python 3.12 around typing and pattern matching. Combined with dataclasses, they provide support for a style of programming that I‚Äôve employed in Kotlin and Typescript.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://wickstrom.tech/2024-05-23-statically-typed-functional-programming-python-312.html\">Statically Typed Functional Programming with Python 3.12</a></cite><a href=\"https://web.archive.org/web/3/https://wickstrom.tech/2024-05-23-statically-typed-functional-programming-python-312.html\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúOptics represent different relationships between types, such as ‚Äòis a type of‚Äô, or ‚Äòcontains one or more‚Äô, similar to relationships in an old-timey UML class diagram. But unlike relationships in a UML diagram, optics can be used directly in real code.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://doscienceto.it/blog/posts/2019-12-19-optics.html\">Lessons Learned Building a Van Laarhoven Lens Library</a></cite><a href=\"https://web.archive.org/web/3/https://doscienceto.it/blog/posts/2019-12-19-optics.html\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúPlease don‚Äôt do this in production.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://astrid.tech/2024/05/01/0/ansible-is-a-lisp/\">Ansible Is a Lisp</a></cite><a href=\"https://web.archive.org/web/3/https://astrid.tech/2024/05/01/0/ansible-is-a-lisp/\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúIf Bob‚Äôs offering a perfect algorithm off the top of his head, call bullshit (unless he carefully frames it as a hypothesis to test in a simulator, thank you, Bob).‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://sirupsen.com/napkin/problem-16-simulation\">When to Write a Simulator</a></cite><a href=\"https://web.archive.org/web/3/https://sirupsen.com/napkin/problem-16-simulation\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúI just don‚Äôt think it‚Äôs useful, most of the time, to worry about anything beyond: wake me up, or don‚Äôt.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://ntietz.com/blog/the-only-two-log-levels-you-need-are-info-and-error/\">The Only Two Log Levels You Need Are INFO and ERROR</a></cite><a href=\"https://web.archive.org/web/3/https://ntietz.com/blog/the-only-two-log-levels-you-need-are-info-and-error/\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúThe internet is awash with tutorials on how to implement dark mode that will get you to a rudimentary implementation. I found that they lacked the refinements necessary to get to a great implementation.‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://brandur.org/fragments/dark-mode-notes\">Notes on Implementing Dark Mode</a></cite><a href=\"https://web.archive.org/web/3/https://brandur.org/fragments/dark-mode-notes\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<figure>\n  <blockquote>\n    <p>‚ÄúToo often have I witnessed the improvising musician sweaty-handedly attempting to pinch-zoom an A4 pdf on a tiny mobile screen at the climax of a gig. We need fluid and responsive music rendering for the web!‚Äù</p>\n  </blockquote>\n  <figcaption>\n    <p><cite><a href=\"https://cruncher.ch/blog/printing-music-with-css-grid/\">Printing Music with CSS Grid</a></cite><a href=\"https://web.archive.org/web/3/https://cruncher.ch/blog/printing-music-with-css-grid/\" title=\"Archived link\">üèõÔ∏è</a></p>\n  </figcaption>\n</figure>\n\n<p>Like, share, or comment on this post on <a href=\"https://fantastic.earth/@abnv/112615743566573724\" class=\"mastodon-link\">Mastodon</a>.</p>",
          "link": "https://notes.abhinavsarkar.net/2024/links-06",
          "publishedOn": "2024-06-14T00:00:00.000Z",
          "wordCount": 877,
          "title": "Interesting Links for June 2024",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Daniel Lemire's blog",
      "feedUrl": "https://lemire.me/blog/feed/",
      "siteUrl": "https://lemire.me/blog",
      "articles": [
        {
          "id": "https://lemire.me/blog/?p=21410",
          "author": "Daniel Lemire",
          "description": "Copying data in software is cheap, but it is not at all free. As you start optimizing your code, you might find that copies become a performance bottleneck. Let me be clear that copies really are cheap. It is often more performant to copy that data than to track the same memory across different threads. ‚Ä¶ Continue reading Performance tip: avoid unnecessary copies",
          "link": "https://lemire.me/blog/2024/06/22/performance-tip-avoid-unnecessary-copies/",
          "publishedOn": "2024-06-22T19:14:18.000Z",
          "wordCount": 3620,
          "title": "Performance tip: avoid unnecessary copies",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21400",
          "author": "Daniel Lemire",
          "description": "We have been working on a fast library to validate and transcode Unicode and other formats such as base64 in C++: simdutf. We wondered: could we achieve the same good results in C#? Microsoft‚Äôs .NET framework has made great strides in leveraging advanced instructions. For instance, if your processor supports AVX-512, you can instantiate 512-bit ‚Ä¶ Continue reading Validating gigabytes of Unicode strings per second‚Ä¶ in C#?",
          "link": "https://lemire.me/blog/2024/06/20/validating-gigabytes-of-unicode-strings-per-second-in-c/",
          "publishedOn": "2024-06-20T17:25:02.000Z",
          "wordCount": 3352,
          "title": "Validating gigabytes of Unicode strings per second‚Ä¶ in C#?",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21386",
          "author": "Daniel Lemire",
          "description": "If you must multiply matrices, you should use dedicated libraries. However, we sometimes need to roll our own code. In C++, you can quickly write your own Matrix template: template <typename T> struct Matrix { Matrix(size_t rows, size_t cols) : data(new T[rows * cols]), rows(rows), cols(cols) {} T &operator()(size_t i, size_t j) { return data.get()[i ‚Ä¶ Continue reading Rolling your own fast matrix multiplication: loop order and vectorization",
          "link": "https://lemire.me/blog/2024/06/13/rolling-your-own-fast-matrix-multiplication-loop-order-and-vectorization/",
          "publishedOn": "2024-06-13T21:11:26.000Z",
          "wordCount": 3571,
          "title": "Rolling your own fast matrix multiplication: loop order and vectorization",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21382",
          "author": "Daniel Lemire",
          "description": "Modern processors have instructions to process several bytes at once. Effectively all processors have the capability of processing 16 bytes at once. These instructions are called SIMD, for single instruction, multiple data. It was once an open question whether these instructions could be useful to accelerate common tasks such as parsing HTML or JSON. However, ‚Ä¶ Continue reading Scan HTML faster with SIMD instructions: Chrome edition",
          "link": "https://lemire.me/blog/2024/06/08/scan-html-faster-with-simd-instructions-chrome-edition/",
          "publishedOn": "2024-06-08T04:55:42.000Z",
          "wordCount": 4031,
          "title": "Scan HTML faster with SIMD instructions: Chrome edition",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21364",
          "author": "Daniel Lemire",
          "description": "In software, we often represent strings by surrounding them with quotes (\"). What happens if the string itself contains quotes? We then need to escape the string. For example, the quote character (\") or the backslash character (\\) should be replaced by \\\" or \\\\. Most programmers are familiar with this process. Most strings do ‚Ä¶ Continue reading Quickly checking whether a string needs escaping",
          "link": "https://lemire.me/blog/2024/05/31/quickly-checking-whether-a-string-needs-escaping/",
          "publishedOn": "2024-05-31T03:48:21.000Z",
          "wordCount": 4178,
          "title": "Quickly checking whether a string needs escaping",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21360",
          "author": "Daniel Lemire",
          "description": "In the quest for software optimization, a trusty companion is the sampling profiler, a tool available in most programming languages. These profilers work unobtrusively, taking snapshots of the program‚Äôs state and recording the currently executing function or instruction. While profilers sound like a silver bullet for identifying performance bottlenecks, their usefulness has limitations. They excel ‚Ä¶ Continue reading Never reason from the results of a sampling profiler",
          "link": "https://lemire.me/blog/2024/05/30/never-reason-from-the-results-of-a-sampling-profiler/",
          "publishedOn": "2024-05-30T19:33:28.000Z",
          "wordCount": 2880,
          "title": "Never reason from the results of a sampling profiler",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21351",
          "author": "Daniel Lemire",
          "description": "Artificial intelligence is far more efficient at producing content than human beings, as far as carbon emissions go. Human brains got larger by over 5% between 1930 and 1970. Replacing plastics by ‚Äòenvironment friendly‚Äô alternatives typically results in greater greenhouse gas emissions. Prostate-specific antigen screening has only a small effect on men‚Äôs risk of dying ‚Ä¶ Continue reading Science and Technology links (May 25 2024)",
          "link": "https://lemire.me/blog/2024/05/26/science-and-technology-links-may-25-2024/",
          "publishedOn": "2024-05-26T01:09:54.000Z",
          "wordCount": 2937,
          "title": "Science and Technology links (May 25 2024)",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "devever.net/~hl",
      "feedUrl": "https://www.devever.net/~hl/index.feed",
      "siteUrl": "https://www.devever.net/~hl/",
      "articles": []
    },
    {
      "title": "apenwarr",
      "feedUrl": "https://apenwarr.ca/log/rss.php",
      "siteUrl": "https://apenwarr.ca/log/",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}