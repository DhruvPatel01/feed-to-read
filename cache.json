{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2025/02/17/",
          "author": null,
          "description": "xxd is a versatile hexdump utility with a “reverse” feature, originally\nwritten between 1990–1996. The Vim project soon adopted it, and it’s lived\nthere ever since. If you have Vim, you also have xxd. Its primary use\ncases are (1) the basis for a hex editor due to its -r reverse option\nthat can unhexdump its previous output, and (2) a data embedding tool\nfor C and C++ (-i). The former provides Vim’s rudimentary hex editor\nfunctionality. The second case is of special interest to w64devkit:\nxxd -i appears in many builds that embed arbitrary data. It’s\nimportant that w64devkit has a compatible implementation, and a freshly\nrewritten, improved xxd, rexxd, now replaces the original xxd (as\nxxd).\nFor those unfamiliar with xxd, examples are in order. Its default hexdump\noutput looks like this:\n\n$…",
          "link": "https://nullprogram.com/blog/2025/02/17/",
          "publishedOn": "2025-02-17T00:49:49.000Z",
          "wordCount": 2717,
          "title": "Meet the new xxd for w64devkit: rexxd",
          "imageUrl": null
        },
        {
          "id": "https://nullprogram.com/blog/2025/02/05/",
          "author": null,
          "description": "Fuzz testing is incredibly effective for mechanically discovering software\ndefects, yet remains underused and neglected. Pick any program that must\ngracefully accept complex input, written in any language, which has not\nyet been been fuzzed, and fuzz testing usually reveals at least one bug.\nAt least one program currently installed on your own computer certainly\nqualifies. Perhaps even most of them. Everything is broken and\nlow-hanging fruit is everywhere. After fuzz testing ~1,000 projects over\nthe past six years, I’ve accumulated tips for picking that fruit.\nThe checklist format has worked well in the past (1, 2), so\nI’ll use it again. This article discusses AFL++ on source-available\nC and C++ targets, running on glibc-based Linux distributions, currently\nthe indisputable best fuzzing pl…",
          "link": "https://nullprogram.com/blog/2025/02/05/",
          "publishedOn": "2025-02-05T18:03:55.000Z",
          "wordCount": 2094,
          "title": "Tips for more effective fuzz testing with AFL++",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/e2b67c88c9fb",
          "author": "Netflix Technology Blog",
          "description": "Part 1: Creating the Source of Truth for Impressions",
          "link": "https://netflixtechblog.com/introducing-impressions-at-netflix-e2b67c88c9fb?source=rss----2615bd06b42e---4",
          "publishedOn": "2025-02-15T01:13:20.000Z",
          "wordCount": 3298,
          "title": "Introducing Impressions at Netflix",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*T6tQiUj-VDtyEhd1"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": [
        {
          "id": "https://nim-lang.org//blog/2025/02/05/nim-222.html",
          "author": null,
          "description": "The Nim Team is happy to announce version 2.2.2, the first patch release for our stable release, Nim 2.2.\nIt comes four months after the 2.2.0 release and it contains 203 commits, bringing bugfixes and improvements.\nIf you’re still on Nim 1.6, take a look at the version 2.0 release article to see all the features you’re missing.\nIf you’ve been using Nim 2.0, the version 2.2 release article shows the improvements available in Nim 2.2.\nInstalling Nim 2.2.2\nCheck out if the package manager of your OS already ships version 2.2.2 or\ninstall it as described here.\nIf you have installed a previous version of Nim using choosenim,\ngetting Nim 2.2.2 is as easy as:\n$ choosenim update self\n$ choosenim update stable\n\nNOTE: Make sure that the version of choosenim you have installed is 0.8.5 or higher, ot…",
          "link": "https://nim-lang.org//blog/2025/02/05/nim-222.html",
          "publishedOn": "2025-02-05T00:00:00.000Z",
          "wordCount": 683,
          "title": "Nim version 2.2.2 released",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        }
      ]
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": []
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    },
    {
      "title": "samwho.dev",
      "feedUrl": "https://samwho.dev/rss.xml",
      "siteUrl": "https://samwho.dev/rss.xml",
      "articles": []
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net",
      "articles": []
    },
    {
      "title": "Daniel Lemire's blog",
      "feedUrl": "https://lemire.me/blog/feed/",
      "siteUrl": "https://lemire.me/blog",
      "articles": [
        {
          "id": "https://lemire.me/blog/?p=21895",
          "author": "Daniel Lemire",
          "description": "Convention computer instructions operate on a single piece of data at once (e.g., they can negate an integer or add two integers). For better performance, CPU vendors add support for SIMD instructions. SIMD stands for Single Instruction, Multiple Data. It is a type of parallel processing where a single operation is executed simultaneously on multiple … Continue reading AVX-512 gotcha: avoid compressing words to memory with AMD Zen 4 processors",
          "link": "https://lemire.me/blog/2025/02/14/avx-512-gotcha-avoid-compressing-words-to-memory-with-amd-zen-4-processors/",
          "publishedOn": "2025-02-14T21:27:29.000Z",
          "wordCount": 3851,
          "title": "AVX-512 gotcha: avoid compressing words to memory with AMD Zen 4 processors",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21864",
          "author": "Daniel Lemire",
          "description": "A common operation in software is the copy of a block of memory. In C/C++, we often call the function memcpy for this purpose. But what happens if, while you are copying the data, another thread is modifying either the source or the destination? The result is fundamentally unpredictable and almost surely a programming error. … Continue reading Thread-safe memory copy",
          "link": "https://lemire.me/blog/2025/02/07/thread-safe-memory-copy/",
          "publishedOn": "2025-02-07T23:12:34.000Z",
          "wordCount": 4678,
          "title": "Thread-safe memory copy",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21850",
          "author": "Daniel Lemire",
          "description": "Programmer time is precious. This realization should shape our approach to software development, focusing our efforts on tasks that genuinely contribute to the improvement of our code and the software ecosystem.   What does matter?   Hunting for bugs. I like to add tests, and then even more tests. The time spent building tests should … Continue reading Programmer time and the pitfalls of wasteful work",
          "link": "https://lemire.me/blog/2025/01/30/programmer-time-and-the-pitfalls-of-false-positives/",
          "publishedOn": "2025-01-30T03:02:36.000Z",
          "wordCount": 3657,
          "title": "Programmer time and the pitfalls of wasteful work",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21848",
          "author": "Daniel Lemire",
          "description": "Regular expressions, often abbreviated as regex, are a powerful tool for pattern matching within text. For example, the expression \\d*\\.?\\d+ would match a positive number such as 1.1 or 12. If designed and tested with care, regular expressions may be used in mission-critical software. However, their power comes with a risk: it is possible to … Continue reading Regular expressions can blow up!",
          "link": "https://lemire.me/blog/2025/01/25/regular-expressions-can-blow-up/",
          "publishedOn": "2025-01-25T03:53:36.000Z",
          "wordCount": 3365,
          "title": "Regular expressions can blow up!",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "devever.net/~hl",
      "feedUrl": "https://www.devever.net/~hl/index.feed",
      "siteUrl": "https://www.devever.net/~hl/",
      "articles": []
    },
    {
      "title": "apenwarr",
      "feedUrl": "https://apenwarr.ca/log/rss.php",
      "siteUrl": "https://apenwarr.ca/log/",
      "articles": []
    },
    {
      "title": "home on CuriousCoding",
      "feedUrl": "https://curiouscoding.nl/index.xml",
      "siteUrl": "https://curiouscoding.nl/",
      "articles": [
        {
          "id": "https://curiouscoding.nl/posts/pairwise-alignment/",
          "author": null,
          "description": "Table of Contents\n1 Introduction\n\n1.1 Overview\n2 A history of pairwise alignment\n\n2.1 Problem statement\n2.2 Variations on pairwise alignment\n\nAlignment types\nCost Models\nMinimizing Cost versus Maximizing Score\n2.3 The classic quadratic DP algorithms\n2.4 Linear Memory using Divide and Conquer\n2.5 Computational volumes\n2.6 LCS and Contours\n2.7 Diagonal transition\n2.8 graph algos\n2.9 Four russians\n2.10 parallelism & Bitpacking\n2.11 Approximate\n\nseed-chain-extend approximate\nBlockAligner\n2.12 Semi-global highlight\n2.13 Tools\n3 A*PA\n\n3.1 Summary/overview/contribs\n3.2 Methods\n3.3 Evaluation\n3.4 Discussion\n4 A*PA2\n\n4.1 Summary/overview/contribs\n4.2 Notation\n4.3 Methods\n4.4 Evaluation\n4.5 Discussion\n5 TODO\nAttribution\n \nThis chapter is based on two papers:",
          "link": "https://curiouscoding.nl/posts/pairwise-alignment/",
          "publishedOn": "2025-02-20T23:00:00.000Z",
          "wordCount": 4270,
          "title": "Pairwise alignment",
          "imageUrl": null
        },
        {
          "id": "https://curiouscoding.nl/posts/minimizers/",
          "author": null,
          "description": "Table of Contents\n1 Introduction\n\n1.1 Overview\n2 Theory of sampling schemes\n\n2.1 Types of sampling schemes\n2.2 Computing the density\n2.3 The density of random minimizers\n2.4 Universal hitting sets\n2.5 Asymptotic results\n2.6 Variants\n3 Lower bounds\n\n3.1 Schleimer et al.’s bound\n3.2 Marçais et al.’s bound\n3.3 Improving and extending Marçais et al.’s bound\n3.4 A near-tight lower bound on the density of forward sampling schemes\n3.5 Discussion\n4 Sampling schemes\n\n4.1 Variants of lexicographic minimizers\n\nEvaluation\n4.2 UHS-inspired schemes\n4.3 Syncmer-based schemes\n4.4 Open-closed minimizer\n\nEvaluation\n4.5 Mod-minimizer\n\nTheoretical density\nEvaluation\n4.6 Discussion\n5 Selection schemes\n\n5.1 Bidirectional anchors\n5.2 Sus-anchors\n\nEvaluation\n5.3 Discussion\n6 Discussion\nAttribution\n \nThis chapter is based on three papers:",
          "link": "https://curiouscoding.nl/posts/minimizers/",
          "publishedOn": "2025-02-17T23:00:00.000Z",
          "wordCount": 15119,
          "title": "Minimizers and more",
          "imageUrl": null
        },
        {
          "id": "https://curiouscoding.nl/posts/minimizer-papers/",
          "author": null,
          "description": "Table of Contents\n1 Overview\n2 Introduction\n- Previous reviews\n3 Theory of sampling schemes\n\n3.1 Questions\n3.2 Types of schemes\n3.3 Parameter regimes\n3.4 Different perspectives\n3.5 UHS vs minimizer scheme\n3.6 (Asymptotic) bounds\n3.7 Lower bounds\n4 Minimizer schemes\n\n4.1 Orders\n4.2 UHS-based and search-based schemes\n4.3 Pure schemes\n4.4 Other variants\n\nSelection schemes\nCanonical minimizers\n4.5 Non-overlapping string sets\nThis post is simply a list of brief comments on many papers related to\nminimizers, and forms the basis of /posts/minimizers/.\n1 Overview\n \n \n \n\n\n \nFigure 1: An overview of the papers this post discusses, showing authors and categories of each paper.",
          "link": "https://curiouscoding.nl/posts/minimizer-papers/",
          "publishedOn": "2025-02-16T23:00:00.000Z",
          "wordCount": 2534,
          "title": "Minimizer papers",
          "imageUrl": null
        },
        {
          "id": "https://curiouscoding.nl/posts/binsearch/",
          "author": null,
          "description": "Table of Contents\n1 Optimizing Binary Search And Interpolation Search\n\n1.1 Problem statement\n1.2 Inspiration and background\n1.3 Benchmarking setup\n2 Binary search\n\n2.1 Branchless search\n2.2 Explicit prefetching\n2.3 Batching\n2.4 A note on power-of-two array sizes\n3 Eytzinger\n\n3.1 Naive implementation\n3.2 Prefetching\n3.3 Branchless Eytzinger\n3.4 Batched Eytzinger\n\n3.4.1 Non-prefetched\n3.4.2 Prefetched\n4 Eytzinger or BinSearch?\n5 Memory efficiency – parallel search and comparison to B-trees\n6 Interpolation search\n7 Conclusion and takeaways\n1 Optimizing Binary Search And Interpolation Search\n \n \n \n\nThis blogpost is a preliminary of the\npost on static\nsearch trees. We will be looking into binary search and how it can be\noptimized using different memory layouts (Eytzinger), branchless\ntechniques and careful use of prefetching. In addition, we will explore\nbatching and different implementations of it, some of them using vector\ninstructions. Our language of choice will be Rust.",
          "link": "https://curiouscoding.nl/posts/binsearch/",
          "publishedOn": "2025-02-11T23:00:00.000Z",
          "wordCount": 5831,
          "title": "[WIP] Binary search variants and the effects of batching",
          "imageUrl": null
        },
        {
          "id": "https://curiouscoding.nl/posts/consensus/",
          "author": null,
          "description": "Table of Contents\n1 Consensus\n\n1.1 Consensus-RecSplit\n2 IDEA: Consensus-PtrHash\n3 Tiny pointers and optimal open addressing hash tables\nThese are some thoughts on the Consensus-based MPHF presented in\nLehmann et al. (2025), and how this could be applied to PtrHash:\nLehmann, Hans-Peter, Peter Sanders, Stefan Walzer, and Jonatan Ziegler. 2025. “Combined Search and Encoding for Seeds, with an Application to Minimal Perfect Hashing.” arXiv. https://doi.org/10.48550/ARXIV.2502.05613.\nBelow are also some thoughts on the papers on tiny pointers, used to achieve\nhash tables with load factors very close to 1: Bender et al. (2021), Farach-Colton, Krapivin, and Kuszmaul (2025).",
          "link": "https://curiouscoding.nl/posts/consensus/",
          "publishedOn": "2025-02-11T23:00:00.000Z",
          "wordCount": 1791,
          "title": "Thoughts on Consensus MPHF and tiny pointers",
          "imageUrl": null
        },
        {
          "id": "https://curiouscoding.nl/posts/ptrhash-paper/",
          "author": null,
          "description": "Table of Contents\nAbstract\n1 Introduction\n2 Related work\n3 PtrHash\n\n3.1 Overview\n3.2 Details\n3.3 Construction\n3.4 Bucket Assignment Functions\n3.5 Remapping using CacheLineEF\n4 Results\n\n4.1 Construction\n\n4.1.1 Bucket Functions\n4.1.2 Tuning Parameters for Construction\n4.1.3 Remap\n4.2 Comparison to Other Methods\n5 Conclusions and Future Work\nAcknowledgements\nFunding\n6 Appendix: Query throughput\n\n6.1 Batching and streaming\n6.2 Evaluation\n6.3 Multi-threaded Throughput\n7 Appendix: Sharding\n\n7.1 Evaluation\n8 Appendix: Evaluating Hash Functions\n\\[\n\\newcommand{\\part}{\\mathsf{part}}\n\\newcommand{\\bucket}{\\mathsf{bucket}}\n\\newcommand{\\slot}{\\mathsf{slot}}\n\\newcommand{\\reduce}{\\mathsf{reduce}}\n\\newcommand{\\h}{\\mathsf{h}}\n\\newcommand{\\hp}{\\mathsf{h}_{\\mathsf{p}}}\n\\newcommand{\\C}{\\mathsf{C}}\n\\newcommand{\\select}{\\mathsf{select}}\n\\newcommand{\\free}{F}\n\\newcommand{\\mphf}{\\mathsf{H_{mphf}}}\n\\]\nThis is the work-in-progress paper on PtrHash. The original blog post on its\ndevelopment is here.",
          "link": "https://curiouscoding.nl/posts/ptrhash-paper/",
          "publishedOn": "2025-02-02T23:00:00.000Z",
          "wordCount": 11050,
          "title": "PtrHash: Minimal Perfect Hashing at RAM Throughput",
          "imageUrl": null
        }
      ]
    }
  ],
  "cliVersion": "1.15.1"
}