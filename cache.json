{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2023/05/31/",
          "author": null,
          "description": "I love fast builds, and for years I’ve been bothered by the build penalty\nfor translation units including windows.h. This header has an enormous\nnumber of definitions and declarations and so, for C programs, it tends to\ndominate the build time of those translation units. Most programs,\nespecially systems software, only needs a tiny portion of it. For example,\nwhen compiling u-config with GCC, two thirds of the debug build was\nspent processing windows.h just for 4 types, 16 definitions, and 16\nprototypes.\nTo give a sense of the numbers, here’s empty.c, which does nothing but\ninclude windows.h.\n\n#include <windows.h>\n\n\nWith the current Mingw-w64 headers, that’s ~82kLOC (non-blank):\n\n$ gcc -E empty.c | grep -vc '^$'\n82041\n\n\nWith w64devkit this takes my system ~450ms to compile with GCC:\n\n$ tim…",
          "link": "https://nullprogram.com/blog/2023/05/31/",
          "publishedOn": "2023-05-31T01:38:31.000Z",
          "wordCount": 1468,
          "title": "Hand-written Windows API prototypes: fast, flexible, and tedious",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Max Slater",
      "feedUrl": "https://thenumb.at/feed.xml",
      "siteUrl": "https://thenumb.at/",
      "articles": [
        {
          "id": "https://thenumb.at/Pittsburgh/",
          "author": null,
          "description": "University of Pittsburgh / Carnegie Mellon University, Pittsburgh, PA, 2023",
          "link": "https://thenumb.at/Pittsburgh/",
          "publishedOn": "2023-05-19T00:00:00.000Z",
          "wordCount": 53,
          "title": "Pittsburgh",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/6c87836a948",
          "author": "Netflix Technology Blog",
          "description": "This article talks about a novel HDMI technology and how it is used within the Netflix Application to improve a user’s experience.",
          "link": "https://netflixtechblog.com/native-frame-rate-playback-6c87836a948?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-06-05T16:31:44.000Z",
          "wordCount": 4920,
          "title": "Native Frame Rate Playback",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:800/1*hO3tzOhKVzbfMZcgpJvRrA.gif"
        },
        {
          "id": "https://medium.com/p/f99490fdf1ba",
          "author": "Netflix Technology Blog",
          "description": "By Jose Fernandez, Ed Barker, Hank Jacobs",
          "link": "https://netflixtechblog.com/ensuring-the-successful-launch-of-ads-on-netflix-f99490fdf1ba?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-06-01T19:22:48.000Z",
          "wordCount": 2942,
          "title": "Ensuring the Successful Launch of Ads on Netflix",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:1172/1*WSR0HigxkANIu6uyIA-lkQ.png"
        },
        {
          "id": "https://medium.com/p/c75cd7989b6d",
          "author": "Netflix Technology Blog",
          "description": "Tycho Andersen",
          "link": "https://netflixtechblog.com/debugging-a-fuse-deadlock-in-the-linux-kernel-c75cd7989b6d?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-05-19T19:21:03.000Z",
          "wordCount": 4695,
          "title": "Debugging a FUSE deadlock in the Linux kernel",
          "imageUrl": null
        },
        {
          "id": "https://medium.com/p/c118f374fa89",
          "author": "Netflix Technology Blog",
          "description": "By Chris Wolfe, Joey Schorr, and Victor Roldán Betancort",
          "link": "https://netflixtechblog.com/abac-on-spicedb-enabling-netflixs-complex-identity-types-c118f374fa89?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-05-19T12:01:47.000Z",
          "wordCount": 4840,
          "title": "ABAC on SpiceDB: Enabling Netflix’s Complex Identity Types",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:1200/1*SzRBmrSwBYBJyCjvcqFy3w.png"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": [
        {
          "id": "https://nim-lang.org//blog/2023/06/02/this-month-with-nim.html",
          "author": null,
          "description": "Nuance\nAuthor: metagn\nnuance is a library that provides:\nRuntime-compatible types to represent Nim (untyped) AST including filename, line and column information.\nSerialization of these types into an S-expression format that can be directly inserted inside a Nim triple-quoted string.\nDeserialization to these types that works in the compile-time VM.\nConversion from these types into the compile-time NimNode type that can be used in macros.\nThis allows complex systems that generate Nim code to do it in a much faster and easier way than the current alternatives (making all code run only in the compile-time VM, generating it as raw text, interfacing with the compiler codebase etc.).\nExamples of use cases may be templating engines, alternative parsers etc.\nAs a demonstration of what we can do, li…",
          "link": "https://nim-lang.org//blog/2023/06/02/this-month-with-nim.html",
          "publishedOn": "2023-06-02T00:00:00.000Z",
          "wordCount": 1230,
          "title": "This Month with Nim: April and May 2023",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        }
      ]
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2023/06/02/the-worst-zig-version-manager.html",
          "author": null,
          "description": "https://github.com/matklad/hello-getzig",
          "link": "https://matklad.github.io/2023/06/02/the-worst-zig-version-manager.html",
          "publishedOn": "2023-06-02T00:00:00.000Z",
          "wordCount": 1115,
          "title": "The Worst Zig Version Manager",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/05/21/resilient-ll-parsing-tutorial.html",
          "author": null,
          "description": "In this tutorial, I will explain a particular approach to parsing, which gracefully handles syntax errors and is thus suitable for language servers, which, by their nature, have to handle incomplete and invalid code.\nExplaining the problem and the solution requires somewhat less than a trivial worked example, and I want to share a couple of tricks not directly related to resilience, so the tutorial builds a full, self-contained parser, instead of explaining abstractly just the resilience.",
          "link": "https://matklad.github.io/2023/05/21/resilient-ll-parsing-tutorial.html",
          "publishedOn": "2023-05-21T00:00:00.000Z",
          "wordCount": 6278,
          "title": "Resilient LL Parsing Tutorial",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    },
    {
      "title": "samwho.dev",
      "feedUrl": "https://samwho.dev/rss.xml",
      "siteUrl": "https://samwho.dev/rss.xml",
      "articles": []
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net/feed.atom",
      "articles": [
        {
          "id": "https://abhinavsarkar.net/posts/implementing-co-4/?mtm_campaign=feed",
          "author": null,
          "description": "<p>In the <a href=\"https://abhinavsarkar.net/posts/implementing-co-3/\">previous post</a>, we added coroutines to <span class=\"fancy\">Co</span>, the small language we are implementing in this series of posts. In this post, we add channels to it to be able to communicate between coroutines.</p>\n<ol type=\"1\">\n<li><a href=\"https://abhinavsarkar.net/posts/implementing-co-1/\">Implementing Co #1: The Parser</a></li>\n<li><a href=\"https://abhinavsarkar.net/posts/implementing-co-2/\">Implementing Co #2: The Interpreter</a></li>\n<li><a href=\"https://abhinavsarkar.net/posts/implementing-co-3/\">Implementing Co #3: Adding Coroutines</a></li>\n<li>Implementing Co #4: Adding Channels</li>\n<li>Implementing Co #5: Adding Sleep</li>\n</ol>",
          "link": "https://abhinavsarkar.net/posts/implementing-co-4/?mtm_campaign=feed",
          "publishedOn": "2023-06-03T00:00:00.000Z",
          "wordCount": 5414,
          "title": "Implementing Co, a Small Language With Coroutines #4: Adding Channels",
          "imageUrl": "https://abhinavsarkar.net/images/implementing-co-4/preview.png"
        },
        {
          "id": "https://notes.abhinavsarkar.net/2023/mastodon-comments",
          "author": null,
          "description": "<p>Two of the core ideas of <a href=\"https://indieweb.org/\">IndieWeb</a> are <a href=\"https://indieweb.org/POSSE\">POSSE</a> and <a href=\"https://indieweb.org/backfeed\">Backfeed</a>. The idea behind POSSE is that you publish your content on your own website first, and then syndicate it to other platforms. Backfeed means that you pull back the comments and likes from the other platforms to your own website. In this post, I describe how I implemented these ideas for this website with <a href=\"https://joinmastodon.org/\">Mastodon</a>.</p>\n\n<p>Though it is possible to use services like <a href=\"https://brid.gy/\">Bridgy</a> to implement POSSE and Backfeed, I chose to do it myself. Syndicating is just posting the URL of a blog post to Mastodon, so I do it manually. That lets me write a custom message for the post, and also lets me choose the right image to attach. For Backfeed, I use the <a href=\"https://docs.joinmastodon.org/api/\">Mastodon API</a> to pull back the comments to this website.</p>\n\n<p>At the end of each post, I add a link to the Mastodon post that links to the blog post, like:</p>\n\n<div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>You can like, share, or comment on this post on\n<span class=\"p\">[</span><span class=\"nv\">Mastodon</span><span class=\"p\">](</span><span class=\"sx\">https://fantastic.earth/@abnv/110362391871164484</span><span class=\"p\">)</span>{:class=\"mastodon-link\"}.\n</code></pre></div></div>\n\n<p>Then this small Javascipt code pulls back the comments from Mastodon, and displays them on the post:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">DOMContentLoaded</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">mastodonLink</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">a.mastodon-link</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">mastodonLink</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">parts</span> <span class=\"o\">=</span> <span class=\"nx\">mastodonLink</span><span class=\"p\">.</span><span class=\"nx\">href</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">/</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">postId</span> <span class=\"o\">=</span> <span class=\"nx\">parts</span><span class=\"p\">[</span><span class=\"nx\">parts</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">main</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">main</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"s2\">`https://fantastic.earth/api/v1/statuses/</span><span class=\"p\">${</span><span class=\"nx\">postId</span><span class=\"p\">}</span><span class=\"s2\">/context`</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">())</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">let</span> <span class=\"nx\">comments</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">descendants</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"nx\">c</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nx\">visibility</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">public</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">comments</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n\n      <span class=\"kd\">let</span> <span class=\"nx\">commentContainer</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">div</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n      <span class=\"nx\">commentContainer</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">comments</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n      <span class=\"kd\">let</span> <span class=\"nx\">commentsHeader</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">h2</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n      <span class=\"nx\">commentsHeader</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Comments</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n      <span class=\"nx\">commentContainer</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">commentsHeader</span><span class=\"p\">);</span>\n\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">comment</span> <span class=\"k\">of</span> <span class=\"nx\">comments</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">html</span> <span class=\"o\">=</span> <span class=\"s2\">`\n&lt;a class=\"account\" href=\"</span><span class=\"p\">${</span><span class=\"nx\">comment</span><span class=\"p\">.</span><span class=\"nx\">account</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">}</span><span class=\"s2\">\"&gt;</span><span class=\"p\">${</span><span class=\"nx\">comment</span><span class=\"p\">.</span><span class=\"nx\">account</span><span class=\"p\">.</span><span class=\"nx\">username</span><span class=\"p\">}</span><span class=\"s2\">&lt;/a&gt;\n&lt;a class=\"pubtime\" href=\"</span><span class=\"p\">${</span><span class=\"nx\">comment</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">}</span><span class=\"s2\">\"&gt;\n  &lt;time&gt;</span><span class=\"p\">${</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"nx\">comment</span><span class=\"p\">.</span><span class=\"nx\">created_at</span><span class=\"p\">).</span><span class=\"nx\">toLocaleString</span><span class=\"p\">()}</span><span class=\"s2\">&lt;/time&gt;\n&lt;/a&gt;\n&lt;div class=\"content\"&gt;</span><span class=\"p\">${</span><span class=\"nx\">comment</span><span class=\"p\">.</span><span class=\"nx\">content</span><span class=\"p\">}</span><span class=\"s2\">&lt;/div&gt;`</span><span class=\"p\">;</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">commentElement</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">div</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"nx\">commentElement</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"nx\">html</span><span class=\"p\">;</span>\n        <span class=\"nx\">commentElement</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">comment</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">comment</span><span class=\"p\">.</span><span class=\"nx\">in_reply_to_id</span> <span class=\"o\">!==</span> <span class=\"nx\">postId</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">commentElement</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">reply</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">commentContainer</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">commentElement</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">main</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">commentContainer</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>The Javascript code looks for the aforementioned link, and uses the Mastodon API to get the public comments on the linked Mastodon post. The comments are then added to the bottom of the blog post.</p>\n\n<p>I also added some SCSS code to style the comments:</p>\n\n<div class=\"language-scss highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.comment</span> <span class=\"p\">{</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"mi\">.95em</span><span class=\"p\">;</span>\n  <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">dashed</span> <span class=\"mh\">#787882</span><span class=\"p\">;</span>\n  <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"mi\">.5rem</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"mi\">.5rem</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nc\">.content</span> <span class=\"nt\">p</span><span class=\"nd\">:last-of-type</span> <span class=\"p\">{</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nc\">.pubtime</span> <span class=\"p\">{</span>\n    <span class=\"nl\">float</span><span class=\"p\">:</span> <span class=\"nb\">right</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nc\">.content</span> <span class=\"nt\">p</span> <span class=\"p\">{</span>\n    <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"mi\">.5rem</span> <span class=\"nb\">auto</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">&amp;</span><span class=\"nc\">.reply</span> <span class=\"p\">{</span>\n    <span class=\"nl\">margin-left</span><span class=\"p\">:</span> <span class=\"m\">1rem</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The result looks like this:</p>\n\n<p><img src=\"/files/mastodon-comments/comments.png\" alt=\"Screenshot of the comments\" /></p>\n\n<p>That’s it! Now go ahead and like, share, or comment on this post on <a href=\"https://fantastic.earth/@abnv/110395414125998660\" class=\"mastodon-link\">Mastodon</a>.</p>",
          "link": "https://notes.abhinavsarkar.net/2023/mastodon-comments",
          "publishedOn": "2023-05-19T00:00:00.000Z",
          "wordCount": 694,
          "title": "Adding Mastodon Comments to a Website",
          "imageUrl": null
        },
        {
          "id": "https://notes.abhinavsarkar.net/2023/mastodon-backup",
          "author": null,
          "description": "<p>Six months ago, a bunch of my friends and I started the Mastodon instance <a href=\"https://fantastic.earth\">fantastic.earth</a>. Till now, we were kind of experimenting with it, but now that we are accepting new users, I wanted to make sure that we have a backup strategy for the Mastodon data. This post describes how I set up the backup system using <a href=\"https://nixos.org/\">NixOS</a>, which we use to manage the server.</p>\n\n<p>There are two kinds of data that we need to backup for Mastodon: the database and the media files. Mastodon uses <a href=\"https://www.postgresql.org/\">PostgreSQL</a> for database, and the media files are stored in a directory on the server. Fortunately, NixOS already has all the tools we need to do this, we just need to assemble them together.</p>\n\n<p>The idea is to dump the Mastodon database hourly using <a href=\"https://www.postgresql.org/docs/15/app-pgdump.html\"><code class=\"language-plaintext highlighter-rouge\">pg_dump</code></a>, encrypt it using <a href=\"https://gnupg.org/\">GnuPG</a>, and then back it up to one of more remote locations using <a href=\"https://syncthing.net/\">Syncthing</a>. The media files are backed up using Syncthing as well, but they are not encrypted. I chose this combination because I found it to be simpler and easier to understand that other options like <a href=\"https://www.borgbackup.org/\">Borg Backup</a>, <a href=\"https://restic.net/\">Restic</a>, or <a href=\"https://www.postgresql.org/docs/15/continuous-archiving.html\">Postgres WAL archiving</a>.</p>\n\n<h2 id=\"setting-up-the-postgresql-backup\">Setting Up the PostgreSQL Backup</h2>\n\n<p>Here’s the Nix module that I wrote to set this up:</p>\n\n<details>\n  <summary>The NixOS module</summary>\n\n  <div class=\"language-nix highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span> <span class=\"nv\">lib</span><span class=\"p\">,</span> <span class=\"nv\">config</span><span class=\"p\">,</span> <span class=\"nv\">pkgs</span><span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"p\">}:</span>\n\n<span class=\"kd\">let</span>\n  <span class=\"nv\">mastodonCfg</span> <span class=\"o\">=</span> <span class=\"nv\">config</span><span class=\"o\">.</span><span class=\"nv\">services</span><span class=\"o\">.</span><span class=\"nv\">mastodon</span><span class=\"p\">;</span>\n  <span class=\"nv\">syncthingCfg</span> <span class=\"o\">=</span> <span class=\"nv\">config</span><span class=\"o\">.</span><span class=\"nv\">services</span><span class=\"o\">.</span><span class=\"nv\">syncthing</span><span class=\"p\">;</span>\n  <span class=\"nv\">dbName</span> <span class=\"o\">=</span> <span class=\"nv\">mastodonCfg</span><span class=\"o\">.</span><span class=\"nv\">database</span><span class=\"o\">.</span><span class=\"nv\">name</span><span class=\"p\">;</span>\n  <span class=\"nv\">pgBackupDir</span> <span class=\"o\">=</span> <span class=\"nv\">config</span><span class=\"o\">.</span><span class=\"nv\">services</span><span class=\"o\">.</span><span class=\"nv\">postgresqlBackup</span><span class=\"o\">.</span><span class=\"nv\">location</span><span class=\"p\">;</span>\n  <span class=\"nv\">backupFileLocation</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">pgBackupDir</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">${</span><span class=\"nv\">dbName</span><span class=\"si\">}</span><span class=\"s2\">.sql.gz\"</span><span class=\"p\">;</span>\n  <span class=\"nv\">encBackupFileLocation</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">backupFileLocation</span><span class=\"si\">}</span><span class=\"s2\">.enc\"</span><span class=\"p\">;</span>\n  <span class=\"nv\">backupEncPassphraseFile</span> <span class=\"o\">=</span> <span class=\"s2\">\"/var/lib/postgresql/backup-enc-passphrase\"</span><span class=\"p\">;</span>\n  <span class=\"nv\">backupDir</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">syncthingCfg</span><span class=\"o\">.</span><span class=\"nv\">dataDir</span><span class=\"si\">}</span><span class=\"s2\">/Backups\"</span><span class=\"p\">;</span>\n  <span class=\"nv\">mastodonFilesDir</span> <span class=\"o\">=</span> <span class=\"s2\">\"/var/lib/mastodon/public-system\"</span><span class=\"p\">;</span>\n  <span class=\"nv\">devices</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">];</span>\n<span class=\"kn\">in</span>\n<span class=\"p\">{</span>\n  <span class=\"nv\">services</span><span class=\"o\">.</span><span class=\"nv\">postgresqlBackup</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nv\">enable</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"nv\">startAt</span> <span class=\"o\">=</span> <span class=\"s2\">\"*-*-* *:40:00\"</span><span class=\"p\">;</span>\n    <span class=\"nv\">databases</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"nv\">dbName</span> <span class=\"p\">];</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"nv\">systemd</span><span class=\"o\">.</span><span class=\"nv\">services</span><span class=\"o\">.</span><span class=\"s2\">\"postgresqlBackup-</span><span class=\"si\">${</span><span class=\"nv\">dbName</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"nv\">serviceConfig</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nv\">ExecStartPost</span> <span class=\"o\">=</span> <span class=\"s2\">''</span><span class=\"err\">\n</span><span class=\"s2\">      /bin/sh -c '</span><span class=\"si\">${</span><span class=\"nv\">pkgs</span><span class=\"o\">.</span><span class=\"nv\">gnupg</span><span class=\"si\">}</span><span class=\"s2\">/bin/gpg -c --batch --yes \\</span><span class=\"err\">\n</span><span class=\"s2\">        --passphrase-file </span><span class=\"si\">${</span><span class=\"nv\">backupEncPassphraseFile</span><span class=\"si\">}</span><span class=\"s2\"> \\</span><span class=\"err\">\n</span><span class=\"s2\">        --output </span><span class=\"si\">${</span><span class=\"nv\">encBackupFileLocation</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">${</span><span class=\"nv\">backupFileLocation</span><span class=\"si\">}</span><span class=\"s2\"> &amp;&amp; \\</span><span class=\"err\">\n</span><span class=\"s2\">      echo \"DB dump encrypted successfully\" &amp;&amp; \\</span><span class=\"err\">\n</span><span class=\"s2\">      chgrp </span><span class=\"si\">${</span><span class=\"nv\">syncthingCfg</span><span class=\"o\">.</span><span class=\"nv\">group</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">${</span><span class=\"nv\">encBackupFileLocation</span><span class=\"si\">}</span><span class=\"s2\"> &amp;&amp; \\</span><span class=\"err\">\n</span><span class=\"s2\">      mv </span><span class=\"si\">${</span><span class=\"nv\">encBackupFileLocation</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">${</span><span class=\"nv\">backupDir</span><span class=\"si\">}</span><span class=\"s2\">/ &amp;&amp; \\</span><span class=\"err\">\n</span><span class=\"s2\">      echo \"DB dump moved to the backup directory\"'</span><span class=\"err\">\n</span><span class=\"s2\">    ''</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"nv\">services</span><span class=\"o\">.</span><span class=\"nv\">syncthing</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nv\">enable</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"nv\">devices</span> <span class=\"o\">=</span> <span class=\"kr\">builtins</span><span class=\"o\">.</span><span class=\"nv\">listToAttrs</span> <span class=\"p\">(</span><span class=\"kr\">builtins</span><span class=\"o\">.</span><span class=\"kr\">map</span>\n      <span class=\"p\">(</span><span class=\"nv\">dev</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nv\">name</span> <span class=\"o\">=</span> <span class=\"nv\">dev</span><span class=\"p\">;</span>\n        <span class=\"nv\">value</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nv\">id</span> <span class=\"o\">=</span> <span class=\"kr\">builtins</span><span class=\"o\">.</span><span class=\"nv\">readFile</span> <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">syncthingCfg</span><span class=\"o\">.</span><span class=\"nv\">dataDir</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">${</span><span class=\"nv\">dev</span><span class=\"si\">}</span><span class=\"s2\">-id\"</span><span class=\"p\">;</span> <span class=\"p\">};</span>\n      <span class=\"p\">})</span>\n      <span class=\"nv\">devices</span><span class=\"p\">);</span>\n    <span class=\"nv\">folders</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">backupDir</span><span class=\"si\">}</span><span class=\"s2\">\"</span> <span class=\"o\">=</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">folderId</span> <span class=\"o\">=</span> <span class=\"s2\">\"db-dump\"</span><span class=\"p\">;</span>\n        <span class=\"kn\">in</span> <span class=\"p\">{</span>\n          <span class=\"nv\">id</span> <span class=\"o\">=</span> <span class=\"nv\">folderId</span><span class=\"p\">;</span>\n          <span class=\"nv\">label</span> <span class=\"o\">=</span> <span class=\"nv\">folderId</span><span class=\"p\">;</span>\n          <span class=\"nv\">devices</span> <span class=\"o\">=</span> <span class=\"nv\">devices</span><span class=\"p\">;</span>\n          <span class=\"nv\">rescanInterval</span> <span class=\"o\">=</span> <span class=\"mi\">300</span><span class=\"p\">;</span>\n          <span class=\"nv\">type</span> <span class=\"o\">=</span> <span class=\"s2\">\"sendonly\"</span><span class=\"p\">;</span>\n          <span class=\"nv\">versioning</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"nv\">type</span> <span class=\"o\">=</span> <span class=\"s2\">\"simple\"</span><span class=\"p\">;</span>\n            <span class=\"nv\">params</span><span class=\"o\">.</span><span class=\"nv\">keep</span> <span class=\"o\">=</span> <span class=\"s2\">\"6\"</span><span class=\"p\">;</span>\n          <span class=\"p\">};</span>\n        <span class=\"p\">};</span>\n      <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">mastodonFilesDir</span><span class=\"si\">}</span><span class=\"s2\">\"</span> <span class=\"o\">=</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">folderId</span> <span class=\"o\">=</span> <span class=\"s2\">\"mastodon-files\"</span><span class=\"p\">;</span>\n        <span class=\"kn\">in</span> <span class=\"p\">{</span>\n          <span class=\"nv\">id</span> <span class=\"o\">=</span> <span class=\"nv\">folderId</span><span class=\"p\">;</span>\n          <span class=\"nv\">label</span> <span class=\"o\">=</span> <span class=\"nv\">folderId</span><span class=\"p\">;</span>\n          <span class=\"nv\">devices</span> <span class=\"o\">=</span> <span class=\"nv\">devices</span><span class=\"p\">;</span>\n          <span class=\"nv\">rescanInterval</span> <span class=\"o\">=</span> <span class=\"mi\">60</span><span class=\"p\">;</span>\n          <span class=\"nv\">type</span> <span class=\"o\">=</span> <span class=\"s2\">\"sendonly\"</span><span class=\"p\">;</span>\n        <span class=\"p\">};</span>\n    <span class=\"p\">};</span>\n    <span class=\"nv\">extraFlags</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s2\">\"--no-upgrade\"</span> <span class=\"s2\">\"--no-restart\"</span> <span class=\"p\">];</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"nv\">systemd</span><span class=\"o\">.</span><span class=\"nv\">tmpfiles</span><span class=\"o\">.</span><span class=\"nv\">rules</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"z </span><span class=\"si\">${</span><span class=\"nv\">syncthingCfg</span><span class=\"o\">.</span><span class=\"nv\">dataDir</span><span class=\"si\">}</span><span class=\"s2\"> 0750 </span><span class=\"si\">${</span><span class=\"nv\">syncthingCfg</span><span class=\"o\">.</span><span class=\"nv\">user</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">${</span><span class=\"nv\">syncthingCfg</span><span class=\"o\">.</span><span class=\"nv\">group</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"d </span><span class=\"si\">${</span><span class=\"nv\">backupDir</span><span class=\"si\">}</span><span class=\"s2\"> 0775 </span><span class=\"si\">${</span><span class=\"nv\">syncthingCfg</span><span class=\"o\">.</span><span class=\"nv\">user</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">${</span><span class=\"nv\">syncthingCfg</span><span class=\"o\">.</span><span class=\"nv\">group</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"z </span><span class=\"si\">${</span><span class=\"nv\">mastodonFilesDir</span><span class=\"si\">}</span><span class=\"s2\"> 0770 </span><span class=\"si\">${</span><span class=\"nv\">mastodonCfg</span><span class=\"o\">.</span><span class=\"nv\">user</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">${</span><span class=\"nv\">mastodonCfg</span><span class=\"o\">.</span><span class=\"nv\">group</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"z </span><span class=\"si\">${</span><span class=\"nv\">backupEncPassphraseFile</span><span class=\"si\">}</span><span class=\"s2\"> 400 postgres postgres\"</span>\n  <span class=\"p\">];</span>\n\n  <span class=\"nv\">users</span><span class=\"o\">.</span><span class=\"nv\">users</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nv\">postgres</span><span class=\"o\">.</span><span class=\"nv\">extraGroups</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"nv\">syncthingCfg</span><span class=\"o\">.</span><span class=\"nv\">group</span> <span class=\"p\">];</span>\n    <span class=\"p\">${</span><span class=\"nv\">syncthingCfg</span><span class=\"o\">.</span><span class=\"nv\">user</span><span class=\"p\">}</span><span class=\"o\">.</span><span class=\"nv\">extraGroups</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"nv\">mastodonCfg</span><span class=\"o\">.</span><span class=\"nv\">group</span> <span class=\"p\">];</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div>  </div>\n</details>\n\n<p>In the NixOS module above, first, we enable the <a href=\"https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/services/backup/postgresql-backup.nix\">PostgreSQL Backup service</a> to dump the Mastodon database every hour. Next, we use Systemd’s <code class=\"language-plaintext highlighter-rouge\">ExecStartPost</code> setting to run a shell script after the database dump is taken. This script encrypts the database dump using GnuPG, and moves it to the Syncthing backup directory. The passphrase for the GnuPG encryption is stored in a file that is readable only by the postgresql user.</p>\n\n<p>Next, we configure the <a href=\"https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/services/networking/syncthing.nix\">Syncthing service</a> to backup the Mastodon media files and the <code class=\"language-plaintext highlighter-rouge\">Backup</code> directory containing the encrypted database dump to all the devices in the <code class=\"language-plaintext highlighter-rouge\">devices</code> list. The directories are set to be <code class=\"language-plaintext highlighter-rouge\">sendonly</code> so that any changes made to them on the backup devices are not synced back to the Mastodon server. The <code class=\"language-plaintext highlighter-rouge\">Backup</code> directory is also configured to keep the last 6 versions of the database dump.</p>\n\n<p>Finally, we set up file permissions and user groups so that the PostgreSQL user can write to the Syncthing backup directory, and the Syncthing user can read from the Mastodon files directory. That’s all for the NixOS module.</p>\n\n<p>We also put a strong password in the file <code class=\"language-plaintext highlighter-rouge\">/var/lib/postgresql/backup-enc-passphrase</code> that is used to encrypt the database dump.</p>\n\n<h2 id=\"setting-up-syncthing\">Setting Up Syncthing</h2>\n\n<p>Before enabling the module we need to set up the Syncthing, the instructions for which are as follows:</p>\n\n<ol>\n  <li>Get the Mastodon server’s Syncthing device ID by running the following commands on the server:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> sudo su syncthing -s /bin/sh\n $(ls /nix/store/*syncthing*/bin/syncthing) --device-id\n</code></pre></div>    </div>\n  </li>\n  <li>Copy the device ID, and use it to add a remote device in the Syncthing web UI of the backup device.\n    <ul>\n      <li>Check the “Auto Accept” checkbox in the Sharing tab.</li>\n    </ul>\n  </li>\n  <li>Copy the device ID of the backup device, and use it to add a remote device in the Mastodon server:\n    <ul>\n      <li>While still logged in as the <code class=\"language-plaintext highlighter-rouge\">syncthing</code> user after running the previous command on the server, create a file <code class=\"language-plaintext highlighter-rouge\">/var/lib/syncthing/&lt;backup-device-name&gt;-id</code>, put the backup device’s device ID into it, and change the file’s mode to 400:\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> echo &lt;backup-device-id&gt; &gt; /var/lib/syncthing/&lt;backup-device-name&gt;-id\n chmod 400 /var/lib/syncthing/&lt;backup-device-name&gt;-id\n</code></pre></div>        </div>\n      </li>\n    </ul>\n  </li>\n  <li>Edit the Nix module above to add the <code class=\"language-plaintext highlighter-rouge\">&lt;backup-device-name&gt;</code> in the line containing <code class=\"language-plaintext highlighter-rouge\">devices = [ ]</code>.</li>\n  <li>Deploy the module on the Mastodon server. This will start the Syncthing service on the server.</li>\n  <li>In the Syncthing web UI of the backup device:\n    <ol>\n      <li>accept the syncing for <code class=\"language-plaintext highlighter-rouge\">db-dump</code> and <code class=\"language-plaintext highlighter-rouge\">mastodon-files</code> folders,</li>\n      <li>click the “Edit” button in the <code class=\"language-plaintext highlighter-rouge\">db-dump</code> folder’s section, and:\n        <ol>\n          <li>change the “File Versioning” option in the “File Versioning” tab to “Simple File Versioning”,</li>\n          <li>change the “Keep Versions” option to “6”, and</li>\n          <li>change the “Folder Type” option in the “Advanced” tab to “Receive Only”.</li>\n        </ol>\n      </li>\n      <li>click the “Edit” button in the <code class=\"language-plaintext highlighter-rouge\">mastodon-files</code> folder’s section, and:\n        <ol>\n          <li>add the ignore pattern “cache/**” in the “Ignore Patterns” tab, and</li>\n          <li>change the “Folder Type” option in the “Advanced” tab to “Receive Only”.</li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n</ol>\n\n<p>After this, the Syncthing backup should be set up and working as expected.</p>\n\n<h2 id=\"restoring-the-database\">Restoring the Database</h2>\n\n<p>To restore the database, we need to decrypt the database dump, and then restore it using the <code class=\"language-plaintext highlighter-rouge\">pg_restore</code> command:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gpg -d --batch --yes \\\n  --passphrase-file /var/lib/postgresql/backup-enc-passphrase \\\n  --output /tmp/mastodon.sql.gz /var/lib/syncthing/Backup/mastodon.sql.gz.enc\npg_restore --clean --if-exists --dbname mastodon /tmp/mastodon.sql.gz\n</code></pre></div></div>\n\n<p>That’s all for setting up the Syncthing backup for Mastodon. I hope this helps someone. If you have any questions or suggestions, please feel free to leave a comment. Thanks for reading!</p>\n\n<p>You can like, share, or comment on this post on <a href=\"https://fantastic.earth/@abnv/110362391871164484\" class=\"mastodon-link\">Mastodon</a>.</p>",
          "link": "https://notes.abhinavsarkar.net/2023/mastodon-backup",
          "publishedOn": "2023-05-13T00:00:00.000Z",
          "wordCount": 1305,
          "title": "Automating Mastodon Backups with NixOS and Syncthing",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Daniel Lemire's blog",
      "feedUrl": "https://lemire.me/blog/feed/",
      "siteUrl": "https://lemire.me/blog",
      "articles": [
        {
          "id": "https://lemire.me/blog/?p=20611",
          "author": "Daniel Lemire",
          "description": "Most of us are familiar with IP addresses: they are strings typically of the form “ddd.ddd.ddd.ddd” where ddd is a decimal number of up to three digits in the range 0 to 255. For example, 127.0.0.1 or 192.168.0.2. Each of the four number is a byte value, and the address is n IPv4 network address … Continue reading Parsing IP addresses crazily fast",
          "link": "https://lemire.me/blog/2023/06/08/parsing-ip-addresses-crazily-fast/",
          "publishedOn": "2023-06-08T20:47:56.000Z",
          "wordCount": 4220,
          "title": "Parsing IP addresses crazily fast",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20599",
          "author": "Daniel Lemire",
          "description": "There are fewer serial killers these days. Some suggests it is due to better forensic techniques: we catch the killers faster and more efficiently. Between the beginnings of the Web (1996) and today, the household Internet connection bandwidth got over 5000 times faster. Thus what took nearly two hours of download time back then can … Continue reading Science and Technogy links (June 3 2023)",
          "link": "https://lemire.me/blog/2023/06/03/science-and-technogy-links-june-3-2023/",
          "publishedOn": "2023-06-03T20:41:56.000Z",
          "wordCount": 3411,
          "title": "Science and Technogy links (June 3 2023)",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20602",
          "author": "Daniel Lemire",
          "description": "How much is a degree from a prestigious university worth? The answer is a bit difficult to answer because there are many cofounding factors: people from the connected class  (folks that ‘know people’) tend to attend the most prestigious universities, and they also tend to do well professionally. It is likely that highly connected people … Continue reading Peak credentialism",
          "link": "https://lemire.me/blog/2023/06/01/peak-credentialism/",
          "publishedOn": "2023-06-01T16:40:15.000Z",
          "wordCount": 4063,
          "title": "Peak credentialism",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20589",
          "author": "Daniel Lemire",
          "description": "A hash function is a function that maps a value (such as a string) to an integer value. Typically, we want random-looking values. A Bloom filter is a standard data structure in computer science to approximate a set. Basically, you start with a large array of bits, all initialized at zero. Each time you want … Continue reading Expected performance of a Bloom filter",
          "link": "https://lemire.me/blog/2023/05/26/expected-performance-of-a-bloom-filter/",
          "publishedOn": "2023-05-26T20:36:04.000Z",
          "wordCount": 3873,
          "title": "Expected performance of a Bloom filter",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20559",
          "author": "Daniel Lemire",
          "description": "The Go programming language makes it easy to call C code. Suppose you have the following C functions: char* allocate() { return (char*)malloc(100); } void free_allocated(char *c) { free(c); } Then you can call them from Go as follows: c := C.allocate() C.free_allocated(c) It works well. You might argue that my functions are useless, but … Continue reading The absurd cost of finalizers in Go",
          "link": "https://lemire.me/blog/2023/05/19/the-absurd-cost-of-finalizers-in-go/",
          "publishedOn": "2023-05-19T14:57:14.000Z",
          "wordCount": 4686,
          "title": "The absurd cost of finalizers in Go",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20542",
          "author": "Daniel Lemire",
          "description": "While most of our software relies on Unicode strings, we often still encounter legacy encodings such as Latin 1. Before we convert Latin 1 strings to Unicode (e.g., UTF-8), we must compute the size of the UTF-8 string. It is fairly easy: all ASCII characters map 1 byte to 1 byte, while other characters (with … Continue reading Computing the UTF-8 size of a Latin 1 string quickly (ARM NEON edition)",
          "link": "https://lemire.me/blog/2023/05/15/computing-the-utf-8-size-of-a-latin-1-string-quickly-arm-neon-edition/",
          "publishedOn": "2023-05-15T15:46:20.000Z",
          "wordCount": 4277,
          "title": "Computing the UTF-8 size of a Latin 1 string quickly (ARM NEON edition)",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        },
        {
          "id": "https://lemire.me/blog/?p=20534",
          "author": "Daniel Lemire",
          "description": "Modern processors can execute several instructions per cycle. Because processors cannot easily run faster (in terms of clock speed), vendors try to get their processors to do more work per cycle. Apple processors are wide in the sense that they can retire many more instructions per cycle than comparable Intel or AMD processors. However, some … Continue reading ARM instructions do “less work”?",
          "link": "https://lemire.me/blog/2023/05/12/arm-instructions-do-less-work/",
          "publishedOn": "2023-05-12T15:56:11.000Z",
          "wordCount": 3576,
          "title": "ARM instructions do “less work”?",
          "imageUrl": "https://lemire.me/img/portrait2018facebook.jpg"
        }
      ]
    }
  ],
  "cliVersion": "1.15.1"
}