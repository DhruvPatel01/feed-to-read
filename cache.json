{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2023/04/29/",
          "author": null,
          "description": "The major compilers have an enormous number of knobs. Most are\nhighly specialized, but others are generally useful even if uncommon. For\nwarnings, the venerable -﻿Wall -﻿Wextra is a good start, but\ncircumstances improve by tweaking this warning set. This article covers\nhigh-hitting development-time options in GCC, Clang, and MSVC that ought\nto get more consideration.\nThere’s an irony that the more you use these options, the less useful they\nbecome. Given a reasonable workflow, they are a harsh mistress in a fast,\ntight feedback loop quickly breaking the habits that cause warnings and\nerrors. It’s a kind of self-improvement, where eventually most findings\nwill be false positives. With heuristics internalized, you will be able\nspot the same issues just reading code — a handy skill during cod…",
          "link": "https://nullprogram.com/blog/2023/04/29/",
          "publishedOn": "2023-04-29T22:55:25.000Z",
          "wordCount": 2213,
          "title": "My favorite C compiler flags during development",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Max Slater",
      "feedUrl": "https://thenumb.at/feed.xml",
      "siteUrl": "https://thenumbat.github.io/",
      "articles": []
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/e691c60dc61e",
          "author": "Netflix Technology Blog",
          "description": "Ruchir Jha, Brian Harrington, Yingwu Zhao",
          "link": "https://netflixtechblog.com/improved-alerting-with-atlas-streaming-eval-e691c60dc61e?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-04-27T20:52:51.000Z",
          "wordCount": 4018,
          "title": "Improved Alerting with Atlas Streaming Eval",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:1200/1*OEqSEUO7E-XcFzjkvgKtxA.png"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": [
        {
          "id": "https://nim-lang.org//blog/2023/04/01/this-month-with-nim.html",
          "author": null,
          "description": "Binance\nAuthor: Juan Carlos\nTrade Bitcoin, USD and Gold using Nim!\nIncludes examples, API documentation, giftcards maker, futures maker,\nleveraged perpetual futures automated trading bots with TSL/SL/TP/PNL,\nmake your own strategy, code Nim and make some money.\nLichess BOT Annie\nAuthor: Tsoj\nI want to introduce you to Annie, a chess bot for Lichess.\nShe’s excited about exploring the more intricate sides of chess.\nHer favorite openings are the cloud variations and she is a very enthusiastic fan of en passant in every imaginable form.\nAnnie’s handcrafted, large-table powered evaluation was trained on no fewer than six million, four hundred and thirty-four positions from games played on Lichess.\nNot just the games of grandmasters, but the games of noobs and sub-800 Elo players too. On top of …",
          "link": "https://nim-lang.org//blog/2023/04/01/this-month-with-nim.html",
          "publishedOn": "2023-04-01T00:00:00.000Z",
          "wordCount": 1876,
          "title": "This Month with Nim: March 2023",
          "imageUrl": "https://nim-lang.org/assets/img/twitter_banner.png"
        }
      ]
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net/feed.atom",
      "articles": [
        {
          "id": "https://notes.abhinavsarkar.net/2023/links-23-03",
          "author": null,
          "description": "<p>Here are some interesting things I read on the internet in March 2023:</p>\n\n<h2 id=\"haskell\">Haskell</h2>\n\n<ul>\n  <li><a href=\"https://web.archive.org/web/3/https://mihai.page/evolving-is-digit/\">Evolving <code class=\"language-plaintext highlighter-rouge\">isDigit</code></a> <br />\nUsing Genetic algorithms to evolve a Haskell program that determines if a character is a digit.</li>\n  <li><a href=\"https://web.archive.org/web/3/https://typeclasses.substack.com/p/memfd-an-example-of-haskell-and-c\">memfd: An example of Haskell and C</a> <br />\nA simple example of how to call C code from Haskell.</li>\n  <li><a href=\"https://web.archive.org/web/3/https://sriramsami.com/haskell-optimization/\">Optimizing Haskell Programs</a> <br />\nA guide to optimizing Haskell programs.</li>\n  <li><a href=\"https://web.archive.org/web/3/https://www.lambdabytes.io/articles/defectprocess/\">The Source Code of Defect Process</a> <br />\nAn analysis of the source code of the Defect Process video game written in Haskell.</li>\n  <li><a href=\"https://web.archive.org/web/3/https://typeclasses.substack.com/p/whats-new-in-ghc-2021\">What’s new in GHC 2021</a> <br />\nA summary of the new features in GHC 2021 language.</li>\n</ul>\n\n<h2 id=\"nix\">Nix</h2>\n\n<ul>\n  <li><a href=\"https://web.archive.org/web/3/https://typeclasses.substack.com/p/flakes-nixos-desktop\">7.5 years of NixOS on the desktop, cleaned up with Flakes</a> <br />\nA guide to using NixOS on the desktop.</li>\n  <li><a href=\"https://web.archive.org/web/3/https://bmcgee.ie/posts/2022/11/getting-nixos-to-keep-a-secret/\">Getting NixOS to keep a secret</a> <br />\nA guide on how to use secrets in NixOS.</li>\n  <li><a href=\"https://web.archive.org/web/3/https://jvns.ca/blog/2023/03/03/how-do-nix-builds-work-/\">How do Nix builds work?</a> <br />\nAn exploration of how Nix builds work.</li>\n  <li><a href=\"https://web.archive.org/web/3/https://jvns.ca/blog/2023/02/28/some-notes-on-using-nix/\">Some notes on using Nix</a> <br />\nSome notes on using Nix as a beginner.</li>\n</ul>\n\n<h2 id=\"zig\">Zig</h2>\n\n<ul>\n  <li><a href=\"https://web.archive.org/web/3/https://www.scattered-thoughts.net/writing/assorted-thoughts-on-zig-and-rust/\">Assorted thoughts on Zig (and Rust)</a> <br />\nA comparison of Zig and Rust.</li>\n  <li><a href=\"https://web.archive.org/web/3/https://matklad.github.io/2023/03/26/zig-and-rust.html\">Zig and Rust</a> <br />\nAnother comparison of Zig and Rust, from the point of view of writing reliable software.</li>\n  <li><a href=\"https://web.archive.org/web/3/https://www.openmymind.net/Zig-Quirks/\">Zig Quirks</a> <br />\nSome quirks of the Zig programming language.</li>\n</ul>\n\n<h2 id=\"programming-languages-theory\">Programming Languages Theory</h2>\n\n<ul>\n  <li><a href=\"https://web.archive.org/web/3/https://yangdanny97.github.io/blog/2020/05/29/chocopy-typechecker\">Chocopy Hacking Part 1: Building a compiler frontend in Python</a> <br />\nBuilding a compiler frontend in Python for the Chocopy programming language.</li>\n  <li><a href=\"https://web.archive.org/web/3/https://yangdanny97.github.io/blog/2021/08/26/chocopy-jvm-backend\">Chocopy Hacking Part 2: Compiling to JVM</a> <br />\nCompiling Chocopy to JVM bytecode.</li>\n  <li><a href=\"https://web.archive.org/web/3/https://yangdanny97.github.io/blog/2022/10/11/chocopy-wasm-backend\">Chocopy Hacking Part 4: Compiling to WASM</a> <br />\nCompiling Chocopy to WASM.</li>\n  <li><a href=\"https://web.archive.org/web/3/http://www.iro.umontreal.ca/~felipe/IFT2030-Automne2002/Complements/tinyc.c\">Compiler for the Tiny-C language</a> <br />\nA bytecode compiler and virtual machine for a tiny C-like programming language written in C.</li>\n  <li><a href=\"https://web.archive.org/web/3/https://pubby.games/codegen.html\">Explaining my fast 6502 code generator</a> <br />\nSomewhat unconventional 6502 code generation that is fast.</li>\n  <li><a href=\"https://web.archive.org/web/3/https://tweedegolf.nl/en/blog/88/data-oriented-design\">Optimizing a parser/compiler with data-oriented design: a case study</a> <br />\nA case study of optimizing a parser/compiler with data-oriented design.</li>\n  <li><a href=\"https://web.archive.org/web/3/https://yangdanny97.github.io/blog/2022/09/03/scratching-the-pl-itch\">Scratching the PL Itch</a> <br />\nVarious ways in which programming language theory can be applied to real-world problems other than compilers.</li>\n</ul>\n\n<h2 id=\"miscellaneous\">Miscellaneous</h2>\n\n<ul>\n  <li><a href=\"https://web.archive.org/web/3/https://sandymaguire.me/blog/book-mechanics/\">The Mechanics of Writing a Book</a> <br />\nHow to write a book.</li>\n  <li><a href=\"https://web.archive.org/web/3/https://www.richard-towers.com/2023/03/11/typescripting-the-technical-interview.html\">Typescripting the technical interview</a> <br />\nA homage to Aphyr’s “Typing the Technical Interview”.</li>\n  <li><a href=\"https://web.archive.org/web/3/http://rtpg.co/2023/03/02/quines-for-dummies.html\">Writing The World’s Most Boring Quine</a> <br />\nHow to write quines from first principles.</li>\n</ul>\n\n<p>Like, repost, or comment on this post on <a href=\"https://fantastic.earth/@abnv/110122311237335886\">Mastodon</a>.</p>",
          "link": "https://notes.abhinavsarkar.net/2023/links-23-03",
          "publishedOn": "2023-04-01T00:00:00.000Z",
          "wordCount": 486,
          "title": "Interesting Links for March 2023",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2023/04/23/data-oriented-parallel-value-interner.html",
          "author": null,
          "description": "In this post, I will present a theoretical design for an interner.\nIt should be fast, but there will be no benchmarks as I haven't implemented the thing.\nSo it might actually be completely broken or super slow for one reason or another.\nStill, I think there are a couple of neat ideas, which I would love to call out.",
          "link": "https://matklad.github.io/2023/04/23/data-oriented-parallel-value-interner.html",
          "publishedOn": "2023-04-23T00:00:00.000Z",
          "wordCount": 2866,
          "title": "Data Oriented Parallel Value Interner",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/04/13/reasonable-bootstrap.html",
          "author": null,
          "description": "Compilers for systems programming languages (C, C++, Rust, Zig) tend to be implemented in the languages themselves.\nThe idea being that the current version of the compiler is built using some previous version.\nBut how can you get a working compiler if you start out from nothing?",
          "link": "https://matklad.github.io/2023/04/13/reasonable-bootstrap.html",
          "publishedOn": "2023-04-13T00:00:00.000Z",
          "wordCount": 941,
          "title": "Reasonable Bootstrap",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/04/09/can-you-trust-a-compiler-to-optimize-your-code.html",
          "author": null,
          "description": "More or less the title this time, but first, a story about SIMD. There are three\nlevels of understanding how SIMD works (well, at least I am level 3 at the moment):",
          "link": "https://matklad.github.io/2023/04/09/can-you-trust-a-compiler-to-optimize-your-code.html",
          "publishedOn": "2023-04-09T00:00:00.000Z",
          "wordCount": 2673,
          "title": "Can You Trust a Compiler to Optimize Your Code?",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/04/02/ub-might-be-the-wrong-term-for-newer-languages.html",
          "author": null,
          "description": "A short note on undefined behavior, which assumes familiarity with the subject (see this article for the introduction).\nThe TL;DR is that I think that carrying the wording from the C standard into newer languages, like Zig and Rust, might be a mistake.\nThis is strictly the word choice, the lexical syntax of the comments argument.",
          "link": "https://matklad.github.io/2023/04/02/ub-might-be-the-wrong-term-for-newer-languages.html",
          "publishedOn": "2023-04-02T00:00:00.000Z",
          "wordCount": 561,
          "title": "UB Might Be a Wrong Term for Newer Languages",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}