{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2023/04/29/",
          "author": null,
          "description": "This article was discussed on Hacker News and on reddit.\nThe major compilers have an enormous number of knobs. Most are\nhighly specialized, but others are generally useful even if uncommon. For\nwarnings, the venerable -﻿Wall -﻿Wextra is a good start, but\ncircumstances improve by tweaking this warning set. This article covers\nhigh-hitting development-time options in GCC, Clang, and MSVC that ought\nto get more consideration.\nThere’s an irony that the more you use these options, the less useful they\nbecome. Given a reasonable workflow, they are a harsh mistress in a fast,\ntight feedback loop quickly breaking the habits that cause warnings and\nerrors. It’s a kind of self-improvement, where eventually most findings\nwill be false positives. With heuristics internalized, you will be able\nspot the…",
          "link": "https://nullprogram.com/blog/2023/04/29/",
          "publishedOn": "2023-04-29T22:55:25.000Z",
          "wordCount": 2223,
          "title": "My favorite C compiler flags during development",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Max Slater",
      "feedUrl": "https://thenumb.at/feed.xml",
      "siteUrl": "https://thenumbat.github.io/",
      "articles": []
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/ba1c7a1c7835",
          "author": "Netflix Technology Blog",
          "description": "Shyam Gala, Javier Fernandez-Ivern, Anup Rokkam Pratap, Devang Shah",
          "link": "https://netflixtechblog.com/migrating-critical-traffic-at-scale-with-no-downtime-part-1-ba1c7a1c7835?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-05-04T21:32:37.000Z",
          "wordCount": 6451,
          "title": "Migrating Critical Traffic At Scale with No Downtime — Part 1",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:1075/1*Xq_jAychfflCMguIEhqKKw.png"
        },
        {
          "id": "https://medium.com/p/e691c60dc61e",
          "author": "Netflix Technology Blog",
          "description": "Ruchir Jha, Brian Harrington, Yingwu Zhao",
          "link": "https://netflixtechblog.com/improved-alerting-with-atlas-streaming-eval-e691c60dc61e?source=rss----2615bd06b42e---4",
          "publishedOn": "2023-04-27T20:52:51.000Z",
          "wordCount": 4021,
          "title": "Improved Alerting with Atlas Streaming Eval",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:1200/1*OEqSEUO7E-XcFzjkvgKtxA.png"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": []
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net/feed.atom",
      "articles": [
        {
          "id": "https://notes.abhinavsarkar.net/2023/links-23-04",
          "author": null,
          "description": "<p>Here are some interesting things I read on the internet in April 2023:</p>\n\n<h2 id=\"haskell\">Haskell</h2>\n\n<ul>\n  <li><a href=\"https://ciobaca.substack.com/p/pedagogical-downsides-of-haskell\">Pedagogical Downsides of Haskell</a> <br />\nWhy teaching Haskell is hard.</li>\n</ul>\n\n<h2 id=\"nix\">Nix</h2>\n\n<ul>\n  <li>\n    <p><a href=\"https://tweag.io/blog/2022-12-15-bazel-nix-migration-experience/\">Bazel and Nix: A Migration Experience</a> <br />\nIntegrating Nix with Bazel for dependency management.</p>\n  </li>\n  <li>\n    <p><a href=\"https://blinry.org/nix-time-travel/\">Building 15-year-old software with Nix</a> <br />\nHow to build old software with Nix.</p>\n  </li>\n  <li>\n    <p><a href=\"https://jade.fyi/blog/nix-evaluation-blocking/\">Stopping evaluation from blocking in Nix</a> <br />\nHow to stop Nix from blocking when evaluating an expression</p>\n  </li>\n</ul>\n\n<h2 id=\"programming-languages-theory\">Programming Languages Theory</h2>\n\n<ul>\n  <li>\n    <p><a href=\"https://danieljharvey.github.io//posts/2023-02-23-llvm-compiler-part-2.html\">Compiling a functional language to LLVM, part 2</a> <br />\nCompiling a functional language to LLVM: adding support for conditionals.</p>\n  </li>\n  <li>\n    <p><a href=\"https://elizarov.medium.com/deep-recursion-with-coroutines-7c53e15993e3\">Deep recursion with coroutines</a> <br />\nHow to do deep recursion with coroutines in Kotlin without blowing the stack.</p>\n  </li>\n  <li>\n    <p><a href=\"https://borretti.me/article/design-austral-compiler\">Design of the Austral Compiler</a> <br />\nComplete description of the design of the Austral compiler.</p>\n  </li>\n  <li>\n    <p><a href=\"https://blog.jez.io/intro-elim/\">Every type is defined by its intro and elim forms</a> <br />\nEvery type is defined by how we construct it and how we deconstruct it.</p>\n  </li>\n  <li>\n    <p><a href=\"https://intuitiveexplanations.com/tech/kalyn\">Kalyn: a self-hosting compiler for x86-64</a> <br />\nComplete description of a self-hosting compiler for x86-64.</p>\n  </li>\n  <li>\n    <p><a href=\"https://eli.thegreenplace.net/2017/on-recursion-continuations-and-trampolines/\">On Recursion, Continuations and Trampolines</a> <br />\nImplementing tail recursion using Continuation Passing Style and trampolines.</p>\n  </li>\n  <li>\n    <p><a href=\"https://matklad.github.io/2023/04/13/reasonable-bootstrap.html\">Reasonable Bootstrap</a> <br />\nA better way to bootstrap a compiler.</p>\n  </li>\n  <li>\n    <p><a href=\"https://capitalex.codeberg.page/scripting-languages-without-gcs/\">Scripting Objects without Trash Day</a> <br />\nSurvey of scripting languages without garbage collection.</p>\n  </li>\n</ul>\n\n<h2 id=\"reverse-engineering\">Reverse Engineering</h2>\n\n<ul>\n  <li>\n    <p><a href=\"https://www.anvilsecure.com/blog/compromising-garmins-sport-watches-a-deep-dive-into-garminos-and-its-monkeyc-virtual-machine.html\">Compromising Garmin’s Sport Watches: A Deep Dive into GarminOS and its MonkeyC Virtual Machine</a> <br />\nReverse engineering GarminOS and its MonkeyC VM to find vulnerabilities.</p>\n  </li>\n  <li>\n    <p><a href=\"https://blog.polybdenum.com/2021/05/05/how-i-hacked-google-app-engine-anatomy-of-a-java-bytecode-exploit.html\">How I Hacked Google App Engine: Anatomy of a Java Bytecode Exploit</a> <br />\nStory of a Java bytecode exploit that allowed running arbitrary code on Google App Engine.</p>\n  </li>\n</ul>\n\n<h2 id=\"programming\">Programming</h2>\n\n<ul>\n  <li>\n    <p><a href=\"https://mckayla.blog/posts/all-you-need-is-data-and-functions.html\">All you need is data and functions</a> <br />\nReplacing traits with data and functions.</p>\n  </li>\n  <li>\n    <p><a href=\"https://www.evalapply.org/posts/animate-text-art-javascript/index.html\">Animating Text Art in JavaScript</a> <br />\nHow to animate text art in JavaScript.</p>\n  </li>\n  <li>\n    <p><a href=\"https://typeclasses.substack.com/p/make-invalid-states-representable\">Make invalid states representable</a> <br />\nMaking invalid states representable to provide better error messages.</p>\n  </li>\n</ul>\n\n<h2 id=\"miscellaneous\">Miscellaneous</h2>\n\n<ul>\n  <li>\n    <p><a href=\"https://borretti.me/article/effective-spaced-repetition\">Effective Spaced Repetition</a> <br />\nStrategies for effective spaced repetition.</p>\n  </li>\n  <li>\n    <p><a href=\"https://typeclasses.substack.com/p/erasing-at-the-blackboard\">Erasing at the blackboard</a> <br />\nBetter ways to write code for a book.</p>\n  </li>\n</ul>\n\n<p>Like, share, or comment on this post on <a href=\"https://fantastic.earth/@abnv/110297621824341094\">Mastodon</a>.</p>",
          "link": "https://notes.abhinavsarkar.net/2023/links-23-04",
          "publishedOn": "2023-05-02T00:00:00.000Z",
          "wordCount": 437,
          "title": "Interesting Links for April 2023",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2023/05/02/implicits-for-mvs.html",
          "author": null,
          "description": "An amateur note on language design which explores two important questions:",
          "link": "https://matklad.github.io/2023/05/02/implicits-for-mvs.html",
          "publishedOn": "2023-05-02T00:00:00.000Z",
          "wordCount": 1259,
          "title": "Value Oriented Programming Needs Implicits?",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/04/23/data-oriented-parallel-value-interner.html",
          "author": null,
          "description": "In this post, I will present a theoretical design for an interner.\nIt should be fast, but there will be no benchmarks as I haven't implemented the thing.\nSo it might actually be completely broken or super slow for one reason or another.\nStill, I think there are a couple of neat ideas, which I would love to call out.",
          "link": "https://matklad.github.io/2023/04/23/data-oriented-parallel-value-interner.html",
          "publishedOn": "2023-04-23T00:00:00.000Z",
          "wordCount": 2866,
          "title": "Data Oriented Parallel Value Interner",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/04/13/reasonable-bootstrap.html",
          "author": null,
          "description": "Compilers for systems programming languages (C, C++, Rust, Zig) tend to be implemented in the languages themselves.\nThe idea being that the current version of the compiler is built using some previous version.\nBut how can you get a working compiler if you start out from nothing?",
          "link": "https://matklad.github.io/2023/04/13/reasonable-bootstrap.html",
          "publishedOn": "2023-04-13T00:00:00.000Z",
          "wordCount": 941,
          "title": "Reasonable Bootstrap",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2023/04/09/can-you-trust-a-compiler-to-optimize-your-code.html",
          "author": null,
          "description": "More or less the title this time, but first, a story about SIMD. There are three\nlevels of understanding how SIMD works (well, at least I am level 3 at the moment):",
          "link": "https://matklad.github.io/2023/04/09/can-you-trust-a-compiler-to-optimize-your-code.html",
          "publishedOn": "2023-04-09T00:00:00.000Z",
          "wordCount": 2673,
          "title": "Can You Trust a Compiler to Optimize Your Code?",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}