{
  "sources": [
    {
      "title": "null program",
      "feedUrl": "https://nullprogram.com/feed/",
      "siteUrl": "https://nullprogram.com",
      "articles": [
        {
          "id": "https://nullprogram.com/blog/2024/03/05/",
          "author": null,
          "description": "After a year I’ve finally came up with an elegant solution to a vexing\nu-config problem. The pkg-config format uses macros to generate build\nflags through recursive expansion. Some flags embed file system paths, but\nto the macro system it’s all strings. The output is also ultimately just\none big string, which the receiving shell splits into fields. If\na path contains spaces, or shell metacharacters, u-config must escape them\nso that shells treat them as part of a token. But how can u-config itself\ndistinguish incidental spaces in paths from deliberate spaces between\nflags? What about other shell metacharacters in paths? My solution is to\nextend UTF-8 to encode metadata that survives macro expansion.\nAs usual, it helps to begin with a concrete example of the problem. The\nfollowing is a conv…",
          "link": "https://nullprogram.com/blog/2024/03/05/",
          "publishedOn": "2024-03-05T03:15:12.000Z",
          "wordCount": 1101,
          "title": "Protecting paths in macro expansions by extending UTF-8",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Max Slater",
      "feedUrl": "https://thenumb.at/feed.xml",
      "siteUrl": "https://thenumb.at/",
      "articles": []
    },
    {
      "title": "Netflix TechBlog - Medium",
      "feedUrl": "https://netflixtechblog.com/feed",
      "siteUrl": "https://netflixtechblog.com?source=rss----2615bd06b42e---4",
      "articles": [
        {
          "id": "https://medium.com/p/da6805341642",
          "author": "Netflix Technology Blog",
          "description": "Michael Lindon, Chris Sanden, Vache Shirikian, Yanjun Liu, Minal Mishra, Martin Tingley",
          "link": "https://netflixtechblog.com/sequential-testing-keeps-the-world-streaming-netflix-part-2-counting-processes-da6805341642?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-03-18T12:46:46.000Z",
          "wordCount": 3862,
          "title": "Sequential Testing Keeps the World Streaming Netflix Part 2: Counting Processes",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:1024/1*7DNyGA0x7r7msS7w1Zpvpw.jpeg"
        },
        {
          "id": "https://medium.com/p/2d2e6b6d205d",
          "author": "Netflix Technology Blog",
          "description": "David J. Berg, Romain Cledat, Kayla Seeley, Shashank Srikanth, Chaoying Wang, Darin Yu",
          "link": "https://netflixtechblog.com/supporting-diverse-ml-systems-at-netflix-2d2e6b6d205d?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-03-07T18:33:07.000Z",
          "wordCount": 6313,
          "title": "Supporting Diverse ML Systems at Netflix",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:1200/1*4hoAg4FX6oeua708alTMlA.png"
        },
        {
          "id": "https://medium.com/p/256629c9386b",
          "author": "Netflix Technology Blog",
          "description": "The surprising and not so surprising benefits of generations in the Z Garbage Collector.",
          "link": "https://netflixtechblog.com/bending-pause-times-to-your-will-with-generational-zgc-256629c9386b?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-03-06T01:35:08.000Z",
          "wordCount": 3115,
          "title": "Bending pause times to your will with Generational ZGC",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*GuEZ-RMhzNnYgLQd"
        },
        {
          "id": "https://medium.com/p/039d5efd115b",
          "author": "Netflix Technology Blog",
          "description": "by Binbing Hou, Stephanie Vezich Tamayo, Xiao Chen, Liang Tian, Troy Ristow, Haoyuan Wang, Snehal Chennuru, Pawan Dixit",
          "link": "https://netflixtechblog.com/evolving-from-rule-based-classifier-machine-learning-powered-auto-remediation-in-netflix-data-039d5efd115b?source=rss----2615bd06b42e---4",
          "publishedOn": "2024-03-04T18:01:55.000Z",
          "wordCount": 6839,
          "title": "Evolving from Rule-based Classifier: Machine Learning Powered Auto Remediation in Netflix Data…",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:1200/1*2eENd1mhwyGpMWNccEwqlQ.png"
        }
      ]
    },
    {
      "title": "Nim Programming Language",
      "feedUrl": "https://nim-lang.org/feed.xml",
      "siteUrl": "https://nim-lang.org//",
      "articles": []
    },
    {
      "title": null,
      "feedUrl": "https://ayazhafiz.com/feed-rss2.xml",
      "siteUrl": "https://ayazhafiz.com",
      "articles": []
    },
    {
      "title": "matklad",
      "feedUrl": "https://matklad.github.io/feed.xml",
      "siteUrl": "https://matklad.github.io",
      "articles": [
        {
          "id": "https://matklad.github.io/2024/03/22/basic-things.html",
          "author": null,
          "description": "After working on the initial stages of several largish projects, I accumulated a list of things that\nshare the following three properties:",
          "link": "https://matklad.github.io/2024/03/22/basic-things.html",
          "publishedOn": "2024-03-22T00:00:00.000Z",
          "wordCount": 3904,
          "title": "Basic Things",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2024/03/21/defer-patterns.html",
          "author": null,
          "description": "A short note about some unexpected usages of Zig's defer statement.",
          "link": "https://matklad.github.io/2024/03/21/defer-patterns.html",
          "publishedOn": "2024-03-21T00:00:00.000Z",
          "wordCount": 825,
          "title": "Zig defer Patterns",
          "imageUrl": null
        },
        {
          "id": "https://matklad.github.io/2024/03/02/Kafka-vs-Nabokov.html",
          "author": null,
          "description": "Uplifting a lobste.rs comment to a stand-alone post.",
          "link": "https://matklad.github.io/2024/03/02/Kafka-vs-Nabokov.html",
          "publishedOn": "2024-03-02T00:00:00.000Z",
          "wordCount": 973,
          "title": "Kafka versus Nabokov",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Hugging Face - Blog",
      "feedUrl": "https://huggingface.co/blog/feed.xml",
      "siteUrl": "https://huggingface.co/blog",
      "articles": []
    },
    {
      "title": "samwho.dev",
      "feedUrl": "https://samwho.dev/rss.xml",
      "siteUrl": "https://samwho.dev/rss.xml",
      "articles": []
    },
    {
      "title": "Posts on abhinavsarkar.net",
      "feedUrl": "https://abhinavsarkar.net/feed.atom",
      "siteUrl": "https://abhinavsarkar.net/feed.atom",
      "articles": []
    },
    {
      "title": "Daniel Lemire's blog",
      "feedUrl": "https://lemire.me/blog/feed/",
      "siteUrl": "https://lemire.me/blog",
      "articles": [
        {
          "id": "https://lemire.me/blog/?p=21179",
          "author": "Daniel Lemire",
          "description": "In modern C++, as in many popular languages, you can create ‘lambdas’. Effectively, they are potentially anonymous function instances that you can create on the fly as you are programming, possibly inside another function. The following is a simple example. auto return1 = [](int n) -> int { return 1; }; What about recursive functions? … Continue reading Passing recursive C++ lambdas as function pointers",
          "link": "https://lemire.me/blog/2024/03/22/passing-recursive-c-lambdas-as-function-pointers/",
          "publishedOn": "2024-03-22T15:14:36.000Z",
          "wordCount": 3313,
          "title": "Passing recursive C++ lambdas as function pointers",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21167",
          "author": "Daniel Lemire",
          "description": "When programming software, we are working over an abstraction over a system. The computer hardware may not know about your functions, your variables, and your data. It may only see bits and instructions. Yet to write efficient software, the programmer needs to be aware of the characteristics of the underlying system. Thankfully, we can also … Continue reading Measuring your system’s performance using software  (Go edition)",
          "link": "https://lemire.me/blog/2024/03/17/measuring-your-systems-performance-using-software-go-edition/",
          "publishedOn": "2024-03-17T21:24:01.000Z",
          "wordCount": 10611,
          "title": "Measuring your system’s performance using software  (Go edition)",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21158",
          "author": "Daniel Lemire",
          "description": "Suppose you need to read several files on a server using JavaScript. There are many ways to read files in JavaScript with a runtime like Node.js. Which one is best? Let us consider the various approaches. Using fs.promises const fs = require('fs/promises'); const readFile = fs.readFile; readFile(\"lipsum.txt\", { encoding: 'utf-8' }) .then((data) => {...}) .catch((err) … Continue reading How to read files quickly in JavaScript",
          "link": "https://lemire.me/blog/2024/03/12/how-to-read-files-quickly-in-javascript/",
          "publishedOn": "2024-03-12T15:43:09.000Z",
          "wordCount": 3165,
          "title": "How to read files quickly in JavaScript",
          "imageUrl": null
        },
        {
          "id": "https://lemire.me/blog/?p=21150",
          "author": "Daniel Lemire",
          "description": "Canada has several political parties with elected member of parliament: the Liberals, the Conservatives, the Bloc Québecois, de NDP and the Green. But do they behave as distinct political parties when voting, or are they somehow aligned? Voting data for the member of parliament in Canada is easily accessible as JSON or XML. Thus I … Continue reading How many political parties rule Canada? Fun with statistics",
          "link": "https://lemire.me/blog/2024/03/08/how-many-political-parties-rule-canada-fun-with-statistics/",
          "publishedOn": "2024-03-08T15:59:04.000Z",
          "wordCount": 2914,
          "title": "How many political parties rule Canada? Fun with statistics",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "devever.net/~hl",
      "feedUrl": "https://www.devever.net/~hl/index.feed",
      "siteUrl": "https://www.devever.net/~hl/",
      "articles": []
    },
    {
      "title": "apenwarr",
      "feedUrl": "https://apenwarr.ca/log/rss.php",
      "siteUrl": "https://apenwarr.ca/log/",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}